// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace mapped
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }

    public enum Formatting
    {
        None,
        Indented
    }

    public class GraphQlObjectTypeAttribute : Attribute
    {
        public string TypeName { get; }

        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;

                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }

        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }

    public class GraphQlInterfaceJsonConverter : JsonConverter
    {
        private const string FieldNameType = "__typename";

        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);

        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();

            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;

                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");

                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");

                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);

                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");

                    return ReadArray(reader, objectType, elementType, serializer);

                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);

        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }

        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);

            return new JsonReaderException(message);
        }

        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();

        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));

            if (!targetType.IsArray)
                return list;

            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }

        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
#endif

    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);

        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }

        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    case JTokenType.String:
                        return "\"" + ((string)jValue.Value).Replace("\"", "\\\"") + "\"";
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }

            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");

                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }

            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
#endif

            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));

            if (value is Enum @enum)
                return ConvertEnumToString(@enum);

            if (value is bool @bool)
                return @bool ? "true" : "false";

            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";

            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";

            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);

            if (value is Guid)
                return "\"" + value + "\"";

            if (value is String @string)
                return "\"" + @string.Replace("\"", "\\\"") + "\"";

            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');

            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);

            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }

        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);

                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }

                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }

            builder.Append(closingSymbol);
            return builder.ToString();
        }

        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");

            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";

            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);

                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);

                separator = ",";

                if (isIndentedFormatting)
                    builder.AppendLine();
            }

            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;

            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");

            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;

                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);

                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }

                separator = isIndentedFormatting ? ", " : ",";
            }

            builder.Append(")");
            return builder.ToString();
        }

        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }

        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");

            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }

    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }

    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }

    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }

    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }

    public abstract class QueryBuilderParameter
    {
        private string _name;

        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }

        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }

        protected QueryBuilderParameter(object value) => Value = value;
    }

    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }

        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }

        private QueryBuilderParameter(T value) : base(value)
        {
        }

        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);

        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }

    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;

        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }

        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }

        public GraphQlQueryParameter(string name, T value, bool isNullable = true) : base(name, GetGraphQlTypeName(value, isNullable), value)
        {
        }

        private static string GetGraphQlTypeName(T value, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(typeof(T));
            if (!isNullable)
                graphQlTypeName += "!";

            return graphQlTypeName;
        }

        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;

            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }

            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }

            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;

            if (valueType == typeof(string))
                return "String";

            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }

        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";

            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";

            if (valueType == typeof(Guid))
                return "ID";

            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";

            return null;
        }
    }

    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();

        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;

        public string Name { get; }

        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }

        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }

    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;

        protected abstract string TypeName { get; }

        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }

        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }

        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }

        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }

        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }

        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }

        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();

            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);

                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }

                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");

                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);

                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);

                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);

                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }

                        separator = ",";
                    }

                    builder.Append(")");
                }
            }

            builder.Append(indentationSpace);
            builder.Append("{");

            if (isIndentedFormatting)
                builder.AppendLine();

            separator = String.Empty;

            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }

                separator = ",";
            }

            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));

            builder.Append("}");

            return builder.ToString();
        }

        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }

        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }

        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }

        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));

            _fieldCriteria.Remove(fieldName);
        }

        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }

        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();

                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;

                    parentTypes?.Add(builderType);

                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);

                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);

                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });

                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }

        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }

        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;

            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }

        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();

            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }

        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;

            protected readonly string FieldName;
            protected readonly string Alias;

            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;

            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }

            public abstract string Build(Formatting formatting, int level, byte indentationSize);

            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;

                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");

                return $"({String.Join($",{separator}", arguments)})";
            }

            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));

            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }

        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }

        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }

        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;

            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }

            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }

    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }

        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }

        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }

        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }

        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }

        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }

    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }

    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }

    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string DateTime = "DateTime";
        public const string Float = "Float";
        public const string GeoJson = "GeoJSON";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string JsonSchema = "JSONSchema";
        public const string String = "String";
        public const string Url = "Url";

        public const string CalendarInvitationResponse = "CalendarInvitationResponse";
        public const string CertificateType = "CertificateType";
        public const string CertificateTypeInput = "CertificateTypeInput";
        public const string ConnectorState = "ConnectorState";
        public const string ConnectorStateInput = "ConnectorStateInput";
        public const string EncodingType = "EncodingType";
        public const string EncodingTypeInput = "EncodingTypeInput";
        public const string GatewayCourier = "GatewayCourier";
        public const string GatewayCourierInput = "GatewayCourierInput";
        public const string GatewayLifecycleState = "GatewayLifecycleState";
        public const string GatewayLifecycleStateInput = "GatewayLifecycleStateInput";
        public const string GatewayModel = "GatewayModel";
        public const string GatewayModelInput = "GatewayModelInput";
        public const string GatewayRmaReason = "GatewayRMAReason";
        public const string GatewayRmaReasonInput = "GatewayRMAReasonInput";
        public const string GatewayShippingStatus = "GatewayShippingStatus";
        public const string GatewayShippingStatusInput = "GatewayShippingStatusInput";
        public const string GatewaySimType = "GatewaySIMType";
        public const string GatewaySimTypeInput = "GatewaySIMTypeInput";
        public const string GatewaySuspensionReason = "GatewaySuspensionReason";
        public const string GatewaySuspensionReasonInput = "GatewaySuspensionReasonInput";
        public const string GatewayTerminationReason = "GatewayTerminationReason";
        public const string GatewayTerminationReasonInput = "GatewayTerminationReasonInput";
        public const string GrantGrantState = "GrantGrantState";
        public const string GrantGrantStateInput = "GrantGrantStateInput";
        public const string GrantRequestType = "GrantRequestType";
        public const string GrantRequestTypeInput = "GrantRequestTypeInput";
        public const string GraphEdgeDirection = "GraphEdgeDirection";
        public const string HttpMethod = "HTTPMethod";
        public const string HttpMethodInput = "HTTPMethodInput";
        public const string Interval = "Interval";
        public const string IntervalInput = "IntervalInput";
        public const string InviteInviteStatus = "InviteInviteStatus";
        public const string InviteInviteStatusInput = "InviteInviteStatusInput";
        public const string OrgState = "OrgState";
        public const string OrgStateInput = "OrgStateInput";
        public const string Permission = "Permission";
        public const string PermissionInput = "PermissionInput";
        public const string PriceType = "PriceType";
        public const string PriceTypeInput = "PriceTypeInput";
        public const string ProductType = "ProductType";
        public const string ProductTypeInput = "ProductTypeInput";
        public const string Role = "Role";
        public const string RoleInput = "RoleInput";
        public const string SignatureType = "SignatureType";
        public const string SignatureTypeInput = "SignatureTypeInput";
        public const string SystemTypeKey = "SystemTypeKey";
        public const string SystemTypeKeyInput = "SystemTypeKeyInput";
        public const string TimeseriesAggPeriod = "TimeseriesAggPeriod";
        public const string TimeseriesAggPeriodInput = "TimeseriesAggPeriodInput";
        public const string WebhookTargetTargetType = "WebhookTargetTargetType";
        public const string WebhookTargetTargetTypeInput = "WebhookTargetTargetTypeInput";

        public const string Address = "Address";
        public const string AddressMutation = "AddressMutation";
        public const string Auth = "Auth";
        public const string BillingCalculatedProductBundleResponse = "BillingCalculatedProductBundleResponse";
        public const string BillingCalculationResponse = "BillingCalculationResponse";
        public const string BillingPriceTypeFilterExpression = "BillingPriceTypeFilterExpression";
        public const string BillingProductBundleFilter = "BillingProductBundleFilter";
        public const string BillingProductBundleSubscriptionResponse = "BillingProductBundleSubscriptionResponse";
        public const string BodyValueLocation = "BodyValueLocation";
        public const string Building = "Building";
        public const string BuildingCreateResponse = "BuildingCreateResponse";
        public const string BuildingDeleteResponse = "BuildingDeleteResponse";
        public const string BuildingMutation = "BuildingMutation";
        public const string BuildingUpdateResponse = "BuildingUpdateResponse";
        public const string CalendarEvent = "CalendarEvent";
        public const string CalendarInvitation = "CalendarInvitation";
        public const string Certificate = "Certificate";
        public const string CertificateAuthorityBundle = "CertificateAuthorityBundle";
        public const string CertMatch = "CertMatch";
        public const string Connector = "Connector";
        public const string ConnectorAuth = "ConnectorAuth";
        public const string ConnectorAuthCreateResponse = "ConnectorAuthCreateResponse";
        public const string ConnectorAuthDeleteResponse = "ConnectorAuthDeleteResponse";
        public const string ConnectorAuthUpdateResponse = "ConnectorAuthUpdateResponse";
        public const string ConnectorContribution = "ConnectorContribution";
        public const string ConnectorCreateResponse = "ConnectorCreateResponse";
        public const string ConnectorDeleteResponse = "ConnectorDeleteResponse";
        public const string ConnectorFilter = "ConnectorFilter";
        public const string ConnectorRequestsConnectorRequest = "ConnectorRequestsConnectorRequest";
        public const string ConnectorRequestsCreateResponse = "ConnectorRequestsCreateResponse";
        public const string ConnectorRequestsFilter = "ConnectorRequestsFilter";
        public const string ConnectorType = "ConnectorType";
        public const string ConnectorTypeFilter = "ConnectorTypeFilter";
        public const string ConnectorUpdateResponse = "ConnectorUpdateResponse";
        public const string ConnectorUpsertConfigResponse = "ConnectorUpsertConfigResponse";
        public const string DeviceManufacturer = "DeviceManufacturer";
        public const string DeviceModel = "DeviceModel";
        public const string EmailAddress = "EmailAddress";
        public const string ExampleFilter = "ExampleFilter";
        public const string Floor = "Floor";
        public const string FloorCreateResponse = "FloorCreateResponse";
        public const string FloorDeleteResponse = "FloorDeleteResponse";
        public const string FloorMutation = "FloorMutation";
        public const string FloorUpdateResponse = "FloorUpdateResponse";
        public const string Gateway = "Gateway";
        public const string GatewayActiveDetails = "GatewayActiveDetails";
        public const string GatewayAssignmentDetails = "GatewayAssignmentDetails";
        public const string GatewayAssignResponse = "GatewayAssignResponse";
        public const string GatewayFilter = "GatewayFilter";
        public const string GatewayFirstBootDetails = "GatewayFirstBootDetails";
        public const string GatewayGenerateContainerSiDsResponse = "GatewayGenerateContainerSIDsResponse";
        public const string GatewayLifecycleStateFilterExpression = "GatewayLifecycleStateFilterExpression";
        public const string GatewayModelFilterExpression = "GatewayModelFilterExpression";
        public const string GatewayNote = "GatewayNote";
        public const string GatewayProvisioningDetails = "GatewayProvisioningDetails";
        public const string GatewayRegisterContainerResponse = "GatewayRegisterContainerResponse";
        public const string GatewayRegistrationDetails = "GatewayRegistrationDetails";
        public const string GatewayRmaDetails = "GatewayRMADetails";
        public const string GatewayShippingDetails = "GatewayShippingDetails";
        public const string GatewaySimCertificate = "GatewaySIMCertificate";
        public const string GatewaySimInfo = "GatewaySIMInfo";
        public const string GatewaySuspendResponse = "GatewaySuspendResponse";
        public const string GatewaySuspensionDetails = "GatewaySuspensionDetails";
        public const string GatewaySystemTypeFilterExpression = "GatewaySystemTypeFilterExpression";
        public const string GatewayTerminationDetails = "GatewayTerminationDetails";
        public const string GenericPlace = "GenericPlace";
        public const string GeoPoint = "GeoPoint";
        public const string Grant = "Grant";
        public const string GrantCreateResponse = "GrantCreateResponse";
        public const string GrantDeleteResponse = "GrantDeleteResponse";
        public const string GrantFilter = "GrantFilter";
        public const string GrantGrantStateFilterExpression = "GrantGrantStateFilterExpression";
        public const string GrantNote = "GrantNote";
        public const string GrantPlacesAndTypes = "GrantPlacesAndTypes";
        public const string GrantRequest = "GrantRequest";
        public const string GrantUpdateResponse = "GrantUpdateResponse";
        public const string IdFilterExpression = "IDFilterExpression";
        public const string Invite = "Invite";
        public const string InviteCreateResponse = "InviteCreateResponse";
        public const string InviteDeleteResponse = "InviteDeleteResponse";
        public const string InviteFilter = "InviteFilter";
        public const string InviteInviteStatusFilterExpression = "InviteInviteStatusFilterExpression";
        public const string InviteUpdateResponse = "InviteUpdateResponse";
        public const string IpAllowlistMatch = "IPAllowlistMatch";
        public const string Match = "Match";
        public const string MetadataEntry = "MetadataEntry";
        public const string MtlsMatch = "MTLSMatch";
        public const string Mutation = "Mutation";
        public const string OneTimePriceItem = "OneTimePriceItem";
        public const string OneTimePriceItems = "OneTimePriceItems";
        public const string Org = "Org";
        public const string OrgContact = "OrgContact";
        public const string OrgFilter = "OrgFilter";
        public const string OrgStateFilterExpression = "OrgStateFilterExpression";
        public const string OrgUpdateResponse = "OrgUpdateResponse";
        public const string PermissionFilterExpression = "PermissionFilterExpression";
        public const string Person = "Person";
        public const string PersonalAccessToken = "PersonalAccessToken";
        public const string PersonalAccessTokenCreateResponse = "PersonalAccessTokenCreateResponse";
        public const string PersonalAccessTokenDeleteResponse = "PersonalAccessTokenDeleteResponse";
        public const string PersonalAccessTokenFilter = "PersonalAccessTokenFilter";
        public const string PersonalAccessTokenUpdateResponse = "PersonalAccessTokenUpdateResponse";
        public const string Point = "Point";
        public const string ProductBundleResponse = "ProductBundleResponse";
        public const string ProductPriceItemResponse = "ProductPriceItemResponse";
        public const string QuantityRange = "QuantityRange";
        public const string Query = "Query";
        public const string RegexMatch = "RegexMatch";
        public const string SignatureMatch = "SignatureMatch";
        public const string Site = "Site";
        public const string SiteCreateResponse = "SiteCreateResponse";
        public const string SiteDeleteResponse = "SiteDeleteResponse";
        public const string SiteMutation = "SiteMutation";
        public const string SiteUpdateResponse = "SiteUpdateResponse";
        public const string Space = "Space";
        public const string SpaceCreateResponse = "SpaceCreateResponse";
        public const string SpaceDeleteResponse = "SpaceDeleteResponse";
        public const string SpaceMutation = "SpaceMutation";
        public const string SpaceUpdateResponse = "SpaceUpdateResponse";
        public const string StringArrayFilterExpression = "StringArrayFilterExpression";
        public const string StringFilterExpression = "StringFilterExpression";
        public const string SystemTypeFilterExpression = "SystemTypeFilterExpression";
        public const string Thing = "Thing";
        public const string Tier = "Tier";
        public const string TimeseriesAggregateRow = "TimeseriesAggregateRow";
        public const string TimeseriesRow = "TimeseriesRow";
        public const string TimeseriesRowValue = "TimeseriesRowValue";
        public const string TimestampFilterExpression = "TimestampFilterExpression";
        public const string Unit = "Unit";
        public const string UnitFilter = "UnitFilter";
        public const string User = "User";
        public const string UserAssignRoleResponse = "UserAssignRoleResponse";
        public const string UserCreateResponse = "UserCreateResponse";
        public const string UserDeleteResponse = "UserDeleteResponse";
        public const string UserFilter = "UserFilter";
        public const string UserGetOrgMembershipsResponse = "UserGetOrgMembershipsResponse";
        public const string UserRemoveOrgMembershipResponse = "UserRemoveOrgMembershipResponse";
        public const string UserRemoveRoleResponse = "UserRemoveRoleResponse";
        public const string UserUpdateResponse = "UserUpdateResponse";
        public const string ValueLocation = "ValueLocation";
        public const string ValueMatch = "ValueMatch";
        public const string WebhookTarget = "WebhookTarget";
        public const string WebhookTargetAmqpTarget = "WebhookTargetAMQPTarget";
        public const string WebhookTargetApiKey = "WebhookTargetAPIKey";
        public const string WebhookTargetBasicAuth = "WebhookTargetBasicAuth";
        public const string WebhookTargetCloudEventFilter = "WebhookTargetCloudEventFilter";
        public const string WebhookTargetCreateResponse = "WebhookTargetCreateResponse";
        public const string WebhookTargetDeleteResponse = "WebhookTargetDeleteResponse";
        public const string WebhookTargetFilter = "WebhookTargetFilter";
        public const string WebhookTargetHttpTarget = "WebhookTargetHTTPTarget";
        public const string WebhookTargetKafkaTarget = "WebhookTargetKafkaTarget";
        public const string WebhookTargetMqttTarget = "WebhookTargetMQTTTarget";
        public const string WebhookTargetNatsTarget = "WebhookTargetNATSTarget";
        public const string WebhookTargetNoAuth = "WebhookTargetNoAuth";
        public const string WebhookTargetOAuth2ClientCredentialsFlow = "WebhookTargetOAuth2ClientCredentialsFlow";
        public const string WebhookTargetUpdateResponse = "WebhookTargetUpdateResponse";
        public const string WebhookTargetWsTarget = "WebhookTargetWSTarget";
        public const string Zone = "Zone";

        public const string AddressFilter = "AddressFilter";
        public const string AddressMutationInput = "AddressMutationInput";
        public const string AuthContextMapper = "AuthContextMapper";
        public const string AuthInput = "AuthInput";
        public const string BillingCalculatedProductBundleResponseInput = "BillingCalculatedProductBundleResponseInput";
        public const string BillingCalculationResponseInput = "BillingCalculationResponseInput";
        public const string BillingPriceTypeFilterExpressionInput = "BillingPriceTypeFilterExpressionInput";
        public const string BillingProductBundleFilterInput = "BillingProductBundleFilterInput";
        public const string BillingProductBundleSubscriptionResponseInput = "BillingProductBundleSubscriptionResponseInput";
        public const string BodyValueLocationInput = "BodyValueLocationInput";
        public const string BuildingCreateRequestInput = "BuildingCreateRequestInput";
        public const string BuildingDeleteRequestInput = "BuildingDeleteRequestInput";
        public const string BuildingFilter = "BuildingFilter";
        public const string BuildingMutationInput = "BuildingMutationInput";
        public const string BuildingUpdateRequestInput = "BuildingUpdateRequestInput";
        public const string CalendarEventFilter = "CalendarEventFilter";
        public const string CalendarInvitationFilter = "CalendarInvitationFilter";
        public const string CalendarInvitationResponseFilterExpressionInput = "CalendarInvitationResponseFilterExpressionInput";
        public const string CertificateAuthorityBundleInput = "CertificateAuthorityBundleInput";
        public const string CertificateInput = "CertificateInput";
        public const string CertMatchInput = "CertMatchInput";
        public const string ConnectorAuthCreateRequestInput = "ConnectorAuthCreateRequestInput";
        public const string ConnectorAuthDeleteRequestInput = "ConnectorAuthDeleteRequestInput";
        public const string ConnectorAuthInput = "ConnectorAuthInput";
        public const string ConnectorAuthRequestSecretInput = "ConnectorAuthRequestSecretInput";
        public const string ConnectorAuthStaticTokenInput = "ConnectorAuthStaticTokenInput";
        public const string ConnectorAuthUpdateRequestInput = "ConnectorAuthUpdateRequestInput";
        public const string ConnectorAuthUsernamePasswordInput = "ConnectorAuthUsernamePasswordInput";
        public const string ConnectorCreateRequestInput = "ConnectorCreateRequestInput";
        public const string ConnectorDeleteRequestInput = "ConnectorDeleteRequestInput";
        public const string ConnectorFilterInput = "ConnectorFilterInput";
        public const string ConnectorInput = "ConnectorInput";
        public const string ConnectorRequestsConnectorRequestInput = "ConnectorRequestsConnectorRequestInput";
        public const string ConnectorRequestsCreateRequestInput = "ConnectorRequestsCreateRequestInput";
        public const string ConnectorRequestsFilterInput = "ConnectorRequestsFilterInput";
        public const string ConnectorServicesRefreshTokenInput = "ConnectorServicesRefreshTokenInput";
        public const string ConnectorTypeFilterInput = "ConnectorTypeFilterInput";
        public const string ConnectorTypeInput = "ConnectorTypeInput";
        public const string ConnectorUpdateRequestInput = "ConnectorUpdateRequestInput";
        public const string ConnectorUpsertConfigRequestInput = "ConnectorUpsertConfigRequestInput";
        public const string DateTimeFilterExpressionInput = "DateTimeFilterExpressionInput";
        public const string DeviceManufacturerInput = "DeviceManufacturerInput";
        public const string DeviceModelInput = "DeviceModelInput";
        public const string ExampleFilterInput = "ExampleFilterInput";
        public const string FloorCreateRequestInput = "FloorCreateRequestInput";
        public const string FloorDeleteRequestInput = "FloorDeleteRequestInput";
        public const string FloorFilter = "FloorFilter";
        public const string FloorMutationInput = "FloorMutationInput";
        public const string FloorUpdateRequestInput = "FloorUpdateRequestInput";
        public const string GatewayActiveDetailsInput = "GatewayActiveDetailsInput";
        public const string GatewayAssignmentDetailsInput = "GatewayAssignmentDetailsInput";
        public const string GatewayAssignRequestInput = "GatewayAssignRequestInput";
        public const string GatewayFilterInput = "GatewayFilterInput";
        public const string GatewayFirstBootDetailsInput = "GatewayFirstBootDetailsInput";
        public const string GatewayGenerateContainerSiDsRequestInput = "GatewayGenerateContainerSIDsRequestInput";
        public const string GatewayInput = "GatewayInput";
        public const string GatewayLifecycleStateFilterExpressionInput = "GatewayLifecycleStateFilterExpressionInput";
        public const string GatewayModelFilterExpressionInput = "GatewayModelFilterExpressionInput";
        public const string GatewayNoteInput = "GatewayNoteInput";
        public const string GatewayProvisioningDetailsInput = "GatewayProvisioningDetailsInput";
        public const string GatewayRegisterContainerRequestInput = "GatewayRegisterContainerRequestInput";
        public const string GatewayRegistrationDetailsInput = "GatewayRegistrationDetailsInput";
        public const string GatewayRmaDetailsInput = "GatewayRMADetailsInput";
        public const string GatewayShippingDetailsInput = "GatewayShippingDetailsInput";
        public const string GatewaySimCertificateInput = "GatewaySIMCertificateInput";
        public const string GatewaySimInfoInput = "GatewaySIMInfoInput";
        public const string GatewaySuspendRequestInput = "GatewaySuspendRequestInput";
        public const string GatewaySuspensionDetailsInput = "GatewaySuspensionDetailsInput";
        public const string GatewaySystemTypeFilterExpressionInput = "GatewaySystemTypeFilterExpressionInput";
        public const string GatewayTerminationDetailsInput = "GatewayTerminationDetailsInput";
        public const string GeoPointInput = "GeoPointInput";
        public const string GrantCreateRequestInput = "GrantCreateRequestInput";
        public const string GrantDeleteRequestInput = "GrantDeleteRequestInput";
        public const string GrantFilterInput = "GrantFilterInput";
        public const string GrantGrantStateFilterExpressionInput = "GrantGrantStateFilterExpressionInput";
        public const string GrantInput = "GrantInput";
        public const string GrantNoteInput = "GrantNoteInput";
        public const string GrantPlacesAndTypesInput = "GrantPlacesAndTypesInput";
        public const string GrantRequestInput = "GrantRequestInput";
        public const string GrantUpdateRequestInput = "GrantUpdateRequestInput";
        public const string GrpcRequestOptions = "GRPCRequestOptions";
        public const string IdFilterExpressionInput = "IDFilterExpressionInput";
        public const string InviteCreateRequestInput = "InviteCreateRequestInput";
        public const string InviteDeleteRequestInput = "InviteDeleteRequestInput";
        public const string InviteFilterInput = "InviteFilterInput";
        public const string InviteInput = "InviteInput";
        public const string InviteInviteStatusFilterExpressionInput = "InviteInviteStatusFilterExpressionInput";
        public const string InviteUpdateRequestInput = "InviteUpdateRequestInput";
        public const string IpAllowlistMatchInput = "IPAllowlistMatchInput";
        public const string MatchInput = "MatchInput";
        public const string MetadataEntryInput = "MetadataEntryInput";
        public const string MtlsMatchInput = "MTLSMatchInput";
        public const string OneTimePriceItemInput = "OneTimePriceItemInput";
        public const string OneTimePriceItemsInput = "OneTimePriceItemsInput";
        public const string OrgContactInput = "OrgContactInput";
        public const string OrgFilterInput = "OrgFilterInput";
        public const string OrgInput = "OrgInput";
        public const string OrgStateFilterExpressionInput = "OrgStateFilterExpressionInput";
        public const string OrgUpdateRequestInput = "OrgUpdateRequestInput";
        public const string PermissionFilterExpressionInput = "PermissionFilterExpressionInput";
        public const string PersonalAccessTokenCreateRequestInput = "PersonalAccessTokenCreateRequestInput";
        public const string PersonalAccessTokenDeleteRequestInput = "PersonalAccessTokenDeleteRequestInput";
        public const string PersonalAccessTokenFilterInput = "PersonalAccessTokenFilterInput";
        public const string PersonalAccessTokenInput = "PersonalAccessTokenInput";
        public const string PersonalAccessTokenUpdateRequestInput = "PersonalAccessTokenUpdateRequestInput";
        public const string PersonFilter = "PersonFilter";
        public const string PointFilter = "PointFilter";
        public const string PostalAddressInput = "PostalAddressInput";
        public const string ProductBundleResponseInput = "ProductBundleResponseInput";
        public const string ProductPriceItemResponseInput = "ProductPriceItemResponseInput";
        public const string QuantityRangeInput = "QuantityRangeInput";
        public const string RegexMatchInput = "RegexMatchInput";
        public const string RelationMatcher = "RelationMatcher";
        public const string SignatureMatchInput = "SignatureMatchInput";
        public const string SiteCreateRequestInput = "SiteCreateRequestInput";
        public const string SiteDeleteRequestInput = "SiteDeleteRequestInput";
        public const string SiteFilter = "SiteFilter";
        public const string SiteMutationInput = "SiteMutationInput";
        public const string SiteUpdateRequestInput = "SiteUpdateRequestInput";
        public const string SpaceCreateRequestInput = "SpaceCreateRequestInput";
        public const string SpaceDeleteRequestInput = "SpaceDeleteRequestInput";
        public const string SpaceFilter = "SpaceFilter";
        public const string SpaceMutationInput = "SpaceMutationInput";
        public const string SpaceUpdateRequestInput = "SpaceUpdateRequestInput";
        public const string StringArrayFilterExpressionInput = "StringArrayFilterExpressionInput";
        public const string StringFilterExpressionInput = "StringFilterExpressionInput";
        public const string SystemTypeFilterExpressionInput = "SystemTypeFilterExpressionInput";
        public const string ThingFilter = "ThingFilter";
        public const string TierInput = "TierInput";
        public const string TimeseriesAggregateRowInput = "TimeseriesAggregateRowInput";
        public const string TimeseriesRowInput = "TimeseriesRowInput";
        public const string TimeseriesRowValueInput = "TimeseriesRowValueInput";
        public const string TimestampFilterExpressionInput = "TimestampFilterExpressionInput";
        public const string UnitFilterInput = "UnitFilterInput";
        public const string UnitInput = "UnitInput";
        public const string UserAssignRoleRequestInput = "UserAssignRoleRequestInput";
        public const string UserCreateRequestInput = "UserCreateRequestInput";
        public const string UserDeleteRequestInput = "UserDeleteRequestInput";
        public const string UserFilterInput = "UserFilterInput";
        public const string UserGetOrgMembershipsRequestInput = "UserGetOrgMembershipsRequestInput";
        public const string UserInput = "UserInput";
        public const string UserRemoveOrgMembershipRequestInput = "UserRemoveOrgMembershipRequestInput";
        public const string UserRemoveRoleRequestInput = "UserRemoveRoleRequestInput";
        public const string UserUpdateRequestInput = "UserUpdateRequestInput";
        public const string ValueLocationInput = "ValueLocationInput";
        public const string ValueMatchInput = "ValueMatchInput";
        public const string WebhookTargetAmqpTargetInput = "WebhookTargetAMQPTargetInput";
        public const string WebhookTargetApiKeyInput = "WebhookTargetAPIKeyInput";
        public const string WebhookTargetBasicAuthInput = "WebhookTargetBasicAuthInput";
        public const string WebhookTargetCloudEventFilterInput = "WebhookTargetCloudEventFilterInput";
        public const string WebhookTargetCreateRequestInput = "WebhookTargetCreateRequestInput";
        public const string WebhookTargetDeleteRequestInput = "WebhookTargetDeleteRequestInput";
        public const string WebhookTargetFilterInput = "WebhookTargetFilterInput";
        public const string WebhookTargetHttpTargetInput = "WebhookTargetHTTPTargetInput";
        public const string WebhookTargetInput = "WebhookTargetInput";
        public const string WebhookTargetKafkaTargetInput = "WebhookTargetKafkaTargetInput";
        public const string WebhookTargetMqttTargetInput = "WebhookTargetMQTTTargetInput";
        public const string WebhookTargetNatsTargetInput = "WebhookTargetNATSTargetInput";
        public const string WebhookTargetNoAuthInput = "WebhookTargetNoAuthInput";
        public const string WebhookTargetOAuth2ClientCredentialsFlowInput = "WebhookTargetOAuth2ClientCredentialsFlowInput";
        public const string WebhookTargetUpdateRequestInput = "WebhookTargetUpdateRequestInput";
        public const string WebhookTargetWsTargetInput = "WebhookTargetWSTargetInput";
        public const string ZoneFilter = "ZoneFilter";

        public const string CalendarInvitee = "CalendarInvitee";
        public const string FeedsUnion = "FeedsUnion";
        public const string IsPointOfUnion = "IsPointOfUnion";
        public const string ThingFeed = "ThingFeed";

        public const string Event = "Event";
        public const string Place = "Place";
        public const string ThingContainer = "ThingContainer";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(string), "String" },
                { typeof(Guid), "ID" },
                { typeof(int), "Int" },
                { typeof(decimal), "Float" },
                { typeof(bool), "Boolean" },
                { typeof(DateTimeOffset), "DateTime" },
                { typeof(AddressFilter), "AddressFilter" },
                { typeof(AddressMutationInput), "AddressMutationInput" },
                { typeof(AuthContextMapper), "AuthContextMapper" },
                { typeof(AuthInput), "AuthInput" },
                { typeof(BillingCalculatedProductBundleResponseInput), "BillingCalculatedProductBundleResponseInput" },
                { typeof(BillingCalculationResponseInput), "BillingCalculationResponseInput" },
                { typeof(BillingPriceTypeFilterExpressionInput), "BillingPriceTypeFilterExpressionInput" },
                { typeof(BillingProductBundleFilterInput), "BillingProductBundleFilterInput" },
                { typeof(BillingProductBundleSubscriptionResponseInput), "BillingProductBundleSubscriptionResponseInput" },
                { typeof(BodyValueLocationInput), "BodyValueLocationInput" },
                { typeof(BuildingCreateRequestInput), "BuildingCreateRequestInput" },
                { typeof(BuildingDeleteRequestInput), "BuildingDeleteRequestInput" },
                { typeof(BuildingFilter), "BuildingFilter" },
                { typeof(BuildingMutationInput), "BuildingMutationInput" },
                { typeof(BuildingUpdateRequestInput), "BuildingUpdateRequestInput" },
                { typeof(CalendarEventFilter), "CalendarEventFilter" },
                { typeof(CalendarInvitationFilter), "CalendarInvitationFilter" },
                { typeof(CalendarInvitationResponseFilterExpressionInput), "CalendarInvitationResponseFilterExpressionInput" },
                { typeof(CertificateAuthorityBundleInput), "CertificateAuthorityBundleInput" },
                { typeof(CertificateInput), "CertificateInput" },
                { typeof(CertMatchInput), "CertMatchInput" },
                { typeof(ConnectorAuthCreateRequestInput), "ConnectorAuthCreateRequestInput" },
                { typeof(ConnectorAuthDeleteRequestInput), "ConnectorAuthDeleteRequestInput" },
                { typeof(ConnectorAuthInput), "ConnectorAuthInput" },
                { typeof(ConnectorAuthRequestSecretInput), "ConnectorAuthRequestSecretInput" },
                { typeof(ConnectorAuthStaticTokenInput), "ConnectorAuthStaticTokenInput" },
                { typeof(ConnectorAuthUpdateRequestInput), "ConnectorAuthUpdateRequestInput" },
                { typeof(ConnectorAuthUsernamePasswordInput), "ConnectorAuthUsernamePasswordInput" },
                { typeof(ConnectorCreateRequestInput), "ConnectorCreateRequestInput" },
                { typeof(ConnectorDeleteRequestInput), "ConnectorDeleteRequestInput" },
                { typeof(ConnectorFilterInput), "ConnectorFilterInput" },
                { typeof(ConnectorInput), "ConnectorInput" },
                { typeof(ConnectorRequestsConnectorRequestInput), "ConnectorRequestsConnectorRequestInput" },
                { typeof(ConnectorRequestsCreateRequestInput), "ConnectorRequestsCreateRequestInput" },
                { typeof(ConnectorRequestsFilterInput), "ConnectorRequestsFilterInput" },
                { typeof(ConnectorServicesRefreshTokenInput), "ConnectorServicesRefreshTokenInput" },
                { typeof(ConnectorTypeFilterInput), "ConnectorTypeFilterInput" },
                { typeof(ConnectorTypeInput), "ConnectorTypeInput" },
                { typeof(ConnectorUpdateRequestInput), "ConnectorUpdateRequestInput" },
                { typeof(ConnectorUpsertConfigRequestInput), "ConnectorUpsertConfigRequestInput" },
                { typeof(DateTimeFilterExpressionInput), "DateTimeFilterExpressionInput" },
                { typeof(DeviceManufacturerInput), "DeviceManufacturerInput" },
                { typeof(DeviceModelInput), "DeviceModelInput" },
                { typeof(ExampleFilterInput), "ExampleFilterInput" },
                { typeof(FloorCreateRequestInput), "FloorCreateRequestInput" },
                { typeof(FloorDeleteRequestInput), "FloorDeleteRequestInput" },
                { typeof(FloorFilter), "FloorFilter" },
                { typeof(FloorMutationInput), "FloorMutationInput" },
                { typeof(FloorUpdateRequestInput), "FloorUpdateRequestInput" },
                { typeof(GatewayActiveDetailsInput), "GatewayActiveDetailsInput" },
                { typeof(GatewayAssignmentDetailsInput), "GatewayAssignmentDetailsInput" },
                { typeof(GatewayAssignRequestInput), "GatewayAssignRequestInput" },
                { typeof(GatewayFilterInput), "GatewayFilterInput" },
                { typeof(GatewayFirstBootDetailsInput), "GatewayFirstBootDetailsInput" },
                { typeof(GatewayGenerateContainerSiDsRequestInput), "GatewayGenerateContainerSIDsRequestInput" },
                { typeof(GatewayInput), "GatewayInput" },
                { typeof(GatewayLifecycleStateFilterExpressionInput), "GatewayLifecycleStateFilterExpressionInput" },
                { typeof(GatewayModelFilterExpressionInput), "GatewayModelFilterExpressionInput" },
                { typeof(GatewayNoteInput), "GatewayNoteInput" },
                { typeof(GatewayProvisioningDetailsInput), "GatewayProvisioningDetailsInput" },
                { typeof(GatewayRegisterContainerRequestInput), "GatewayRegisterContainerRequestInput" },
                { typeof(GatewayRegistrationDetailsInput), "GatewayRegistrationDetailsInput" },
                { typeof(GatewayRmaDetailsInput), "GatewayRMADetailsInput" },
                { typeof(GatewayShippingDetailsInput), "GatewayShippingDetailsInput" },
                { typeof(GatewaySimCertificateInput), "GatewaySIMCertificateInput" },
                { typeof(GatewaySimInfoInput), "GatewaySIMInfoInput" },
                { typeof(GatewaySuspendRequestInput), "GatewaySuspendRequestInput" },
                { typeof(GatewaySuspensionDetailsInput), "GatewaySuspensionDetailsInput" },
                { typeof(GatewaySystemTypeFilterExpressionInput), "GatewaySystemTypeFilterExpressionInput" },
                { typeof(GatewayTerminationDetailsInput), "GatewayTerminationDetailsInput" },
                { typeof(GeoPointInput), "GeoPointInput" },
                { typeof(GrantCreateRequestInput), "GrantCreateRequestInput" },
                { typeof(GrantDeleteRequestInput), "GrantDeleteRequestInput" },
                { typeof(GrantFilterInput), "GrantFilterInput" },
                { typeof(GrantGrantStateFilterExpressionInput), "GrantGrantStateFilterExpressionInput" },
                { typeof(GrantInput), "GrantInput" },
                { typeof(GrantNoteInput), "GrantNoteInput" },
                { typeof(GrantPlacesAndTypesInput), "GrantPlacesAndTypesInput" },
                { typeof(GrantRequestInput), "GrantRequestInput" },
                { typeof(GrantUpdateRequestInput), "GrantUpdateRequestInput" },
                { typeof(GrpcRequestOptions), "GRPCRequestOptions" },
                { typeof(IdFilterExpressionInput), "IDFilterExpressionInput" },
                { typeof(InviteCreateRequestInput), "InviteCreateRequestInput" },
                { typeof(InviteDeleteRequestInput), "InviteDeleteRequestInput" },
                { typeof(InviteFilterInput), "InviteFilterInput" },
                { typeof(InviteInput), "InviteInput" },
                { typeof(InviteInviteStatusFilterExpressionInput), "InviteInviteStatusFilterExpressionInput" },
                { typeof(InviteUpdateRequestInput), "InviteUpdateRequestInput" },
                { typeof(IpAllowlistMatchInput), "IPAllowlistMatchInput" },
                { typeof(MatchInput), "MatchInput" },
                { typeof(MetadataEntryInput), "MetadataEntryInput" },
                { typeof(MtlsMatchInput), "MTLSMatchInput" },
                { typeof(OneTimePriceItemInput), "OneTimePriceItemInput" },
                { typeof(OneTimePriceItemsInput), "OneTimePriceItemsInput" },
                { typeof(OrgContactInput), "OrgContactInput" },
                { typeof(OrgFilterInput), "OrgFilterInput" },
                { typeof(OrgInput), "OrgInput" },
                { typeof(OrgStateFilterExpressionInput), "OrgStateFilterExpressionInput" },
                { typeof(OrgUpdateRequestInput), "OrgUpdateRequestInput" },
                { typeof(PermissionFilterExpressionInput), "PermissionFilterExpressionInput" },
                { typeof(PersonalAccessTokenCreateRequestInput), "PersonalAccessTokenCreateRequestInput" },
                { typeof(PersonalAccessTokenDeleteRequestInput), "PersonalAccessTokenDeleteRequestInput" },
                { typeof(PersonalAccessTokenFilterInput), "PersonalAccessTokenFilterInput" },
                { typeof(PersonalAccessTokenInput), "PersonalAccessTokenInput" },
                { typeof(PersonalAccessTokenUpdateRequestInput), "PersonalAccessTokenUpdateRequestInput" },
                { typeof(PersonFilter), "PersonFilter" },
                { typeof(PointFilter), "PointFilter" },
                { typeof(PostalAddressInput), "PostalAddressInput" },
                { typeof(ProductBundleResponseInput), "ProductBundleResponseInput" },
                { typeof(ProductPriceItemResponseInput), "ProductPriceItemResponseInput" },
                { typeof(QuantityRangeInput), "QuantityRangeInput" },
                { typeof(RegexMatchInput), "RegexMatchInput" },
                { typeof(RelationMatcher), "RelationMatcher" },
                { typeof(SignatureMatchInput), "SignatureMatchInput" },
                { typeof(SiteCreateRequestInput), "SiteCreateRequestInput" },
                { typeof(SiteDeleteRequestInput), "SiteDeleteRequestInput" },
                { typeof(SiteFilter), "SiteFilter" },
                { typeof(SiteMutationInput), "SiteMutationInput" },
                { typeof(SiteUpdateRequestInput), "SiteUpdateRequestInput" },
                { typeof(SpaceCreateRequestInput), "SpaceCreateRequestInput" },
                { typeof(SpaceDeleteRequestInput), "SpaceDeleteRequestInput" },
                { typeof(SpaceFilter), "SpaceFilter" },
                { typeof(SpaceMutationInput), "SpaceMutationInput" },
                { typeof(SpaceUpdateRequestInput), "SpaceUpdateRequestInput" },
                { typeof(StringArrayFilterExpressionInput), "StringArrayFilterExpressionInput" },
                { typeof(StringFilterExpressionInput), "StringFilterExpressionInput" },
                { typeof(SystemTypeFilterExpressionInput), "SystemTypeFilterExpressionInput" },
                { typeof(ThingFilter), "ThingFilter" },
                { typeof(TierInput), "TierInput" },
                { typeof(TimeseriesAggregateRowInput), "TimeseriesAggregateRowInput" },
                { typeof(TimeseriesRowInput), "TimeseriesRowInput" },
                { typeof(TimeseriesRowValueInput), "TimeseriesRowValueInput" },
                { typeof(TimestampFilterExpressionInput), "TimestampFilterExpressionInput" },
                { typeof(UnitFilterInput), "UnitFilterInput" },
                { typeof(UnitInput), "UnitInput" },
                { typeof(UserAssignRoleRequestInput), "UserAssignRoleRequestInput" },
                { typeof(UserCreateRequestInput), "UserCreateRequestInput" },
                { typeof(UserDeleteRequestInput), "UserDeleteRequestInput" },
                { typeof(UserFilterInput), "UserFilterInput" },
                { typeof(UserGetOrgMembershipsRequestInput), "UserGetOrgMembershipsRequestInput" },
                { typeof(UserInput), "UserInput" },
                { typeof(UserRemoveOrgMembershipRequestInput), "UserRemoveOrgMembershipRequestInput" },
                { typeof(UserRemoveRoleRequestInput), "UserRemoveRoleRequestInput" },
                { typeof(UserUpdateRequestInput), "UserUpdateRequestInput" },
                { typeof(ValueLocationInput), "ValueLocationInput" },
                { typeof(ValueMatchInput), "ValueMatchInput" },
                { typeof(WebhookTargetAmqpTargetInput), "WebhookTargetAMQPTargetInput" },
                { typeof(WebhookTargetApiKeyInput), "WebhookTargetAPIKeyInput" },
                { typeof(WebhookTargetBasicAuthInput), "WebhookTargetBasicAuthInput" },
                { typeof(WebhookTargetCloudEventFilterInput), "WebhookTargetCloudEventFilterInput" },
                { typeof(WebhookTargetCreateRequestInput), "WebhookTargetCreateRequestInput" },
                { typeof(WebhookTargetDeleteRequestInput), "WebhookTargetDeleteRequestInput" },
                { typeof(WebhookTargetFilterInput), "WebhookTargetFilterInput" },
                { typeof(WebhookTargetHttpTargetInput), "WebhookTargetHTTPTargetInput" },
                { typeof(WebhookTargetInput), "WebhookTargetInput" },
                { typeof(WebhookTargetKafkaTargetInput), "WebhookTargetKafkaTargetInput" },
                { typeof(WebhookTargetMqttTargetInput), "WebhookTargetMQTTTargetInput" },
                { typeof(WebhookTargetNatsTargetInput), "WebhookTargetNATSTargetInput" },
                { typeof(WebhookTargetNoAuthInput), "WebhookTargetNoAuthInput" },
                { typeof(WebhookTargetOAuth2ClientCredentialsFlowInput), "WebhookTargetOAuth2ClientCredentialsFlowInput" },
                { typeof(WebhookTargetUpdateRequestInput), "WebhookTargetUpdateRequestInput" },
                { typeof(WebhookTargetWsTargetInput), "WebhookTargetWSTargetInput" },
                { typeof(ZoneFilter), "ZoneFilter" }
            };
    }
    #endregion

    #region enums
    public enum CalendarInvitationResponse
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DECLINED")] Declined,
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "TENTATIVE")] Tentative
    }

    public enum CertificateType
    {
        [EnumMember(Value = "CERTIFICATETYPE_UNSPECIFIED")] CertificatetypeUnspecified,
        [EnumMember(Value = "X509_CERT")] X509Cert,
        [EnumMember(Value = "X509_PKIX")] X509Pkix
    }

    public enum CertificateTypeInput
    {
        [EnumMember(Value = "CERTIFICATETYPE_UNSPECIFIED")] CertificatetypeUnspecified,
        [EnumMember(Value = "X509_CERT")] X509Cert,
        [EnumMember(Value = "X509_PKIX")] X509Pkix
    }

    public enum ConnectorState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "CONNECTING")] Connecting,
        [EnumMember(Value = "CONNECTOR_STATE_UNSPECIFIED")] ConnectorStateUnspecified,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "DELETING")] Deleting,
        [EnumMember(Value = "ERROR_GENERAL")] ErrorGeneral,
        [EnumMember(Value = "PAUSED")] Paused,
        [EnumMember(Value = "PAUSING")] Pausing,
        [EnumMember(Value = "STOPPED")] Stopped,
        [EnumMember(Value = "STOPPING")] Stopping
    }

    public enum ConnectorStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "CONNECTING")] Connecting,
        [EnumMember(Value = "CONNECTOR_STATE_UNSPECIFIED")] ConnectorStateUnspecified,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "DELETING")] Deleting,
        [EnumMember(Value = "ERROR_GENERAL")] ErrorGeneral,
        [EnumMember(Value = "PAUSED")] Paused,
        [EnumMember(Value = "PAUSING")] Pausing,
        [EnumMember(Value = "STOPPED")] Stopped,
        [EnumMember(Value = "STOPPING")] Stopping
    }

    public enum EncodingType
    {
        [EnumMember(Value = "BASE64")] Base64,
        [EnumMember(Value = "ENCODINGTYPE_UNSPECIFIED")] EncodingtypeUnspecified,
        [EnumMember(Value = "HEX")] Hex
    }

    public enum EncodingTypeInput
    {
        [EnumMember(Value = "BASE64")] Base64,
        [EnumMember(Value = "ENCODINGTYPE_UNSPECIFIED")] EncodingtypeUnspecified,
        [EnumMember(Value = "HEX")] Hex
    }

    public enum GatewayCourier
    {
        [EnumMember(Value = "COURIER_DHL")] CourierDhl,
        [EnumMember(Value = "COURIER_FEDEX")] CourierFedex,
        [EnumMember(Value = "COURIER_UNSPECIFIED")] CourierUnspecified,
        [EnumMember(Value = "COURIER_UPS")] CourierUps,
        [EnumMember(Value = "COURIER_USPS")] CourierUsps
    }

    public enum GatewayCourierInput
    {
        [EnumMember(Value = "COURIER_DHL")] CourierDhl,
        [EnumMember(Value = "COURIER_FEDEX")] CourierFedex,
        [EnumMember(Value = "COURIER_UNSPECIFIED")] CourierUnspecified,
        [EnumMember(Value = "COURIER_UPS")] CourierUps,
        [EnumMember(Value = "COURIER_USPS")] CourierUsps
    }

    public enum GatewayLifecycleState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "ASSIGNED")] Assigned,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "DELIVERED")] Delivered,
        [EnumMember(Value = "EXTENDED_OFFLINE")] ExtendedOffline,
        [EnumMember(Value = "FIRST_BOOT")] FirstBoot,
        [EnumMember(Value = "INVENTORY")] Inventory,
        [EnumMember(Value = "LIFECYCLE_STATE_UNSPECIFIED")] LifecycleStateUnspecified,
        [EnumMember(Value = "PROVISIONED")] Provisioned,
        [EnumMember(Value = "RMA")] Rma,
        [EnumMember(Value = "SHIPPED")] Shipped,
        [EnumMember(Value = "SHIPPING_EXCEPTION")] ShippingException,
        [EnumMember(Value = "SUSPENDED")] Suspended,
        [EnumMember(Value = "TERMINATED")] Terminated
    }

    public enum GatewayLifecycleStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "ASSIGNED")] Assigned,
        [EnumMember(Value = "CONFIGURING")] Configuring,
        [EnumMember(Value = "DELIVERED")] Delivered,
        [EnumMember(Value = "EXTENDED_OFFLINE")] ExtendedOffline,
        [EnumMember(Value = "FIRST_BOOT")] FirstBoot,
        [EnumMember(Value = "INVENTORY")] Inventory,
        [EnumMember(Value = "LIFECYCLE_STATE_UNSPECIFIED")] LifecycleStateUnspecified,
        [EnumMember(Value = "PROVISIONED")] Provisioned,
        [EnumMember(Value = "RMA")] Rma,
        [EnumMember(Value = "SHIPPED")] Shipped,
        [EnumMember(Value = "SHIPPING_EXCEPTION")] ShippingException,
        [EnumMember(Value = "SUSPENDED")] Suspended,
        [EnumMember(Value = "TERMINATED")] Terminated
    }

    public enum GatewayModel
    {
        [EnumMember(Value = "MODEL_UG100")] ModelUg100,
        [EnumMember(Value = "MODEL_UGCLOUD")] ModelUgcloud,
        [EnumMember(Value = "MODEL_UGCONTAINER")] ModelUgcontainer,
        [EnumMember(Value = "MODEL_UNSPECIFIED")] ModelUnspecified
    }

    public enum GatewayModelInput
    {
        [EnumMember(Value = "MODEL_UG100")] ModelUg100,
        [EnumMember(Value = "MODEL_UGCLOUD")] ModelUgcloud,
        [EnumMember(Value = "MODEL_UGCONTAINER")] ModelUgcontainer,
        [EnumMember(Value = "MODEL_UNSPECIFIED")] ModelUnspecified
    }

    public enum GatewayRmaReason
    {
        [EnumMember(Value = "RMA_REASON_CONNECTIVITY")] RmaReasonConnectivity,
        [EnumMember(Value = "RMA_REASON_CUSTOMER_RETURN")] RmaReasonCustomerReturn,
        [EnumMember(Value = "RMA_REASON_HARDWAREFAILURE")] RmaReasonHardwarefailure,
        [EnumMember(Value = "RMA_REASON_OTHER")] RmaReasonOther,
        [EnumMember(Value = "RMA_REASON_UNSPECIFIED")] RmaReasonUnspecified
    }

    public enum GatewayRmaReasonInput
    {
        [EnumMember(Value = "RMA_REASON_CONNECTIVITY")] RmaReasonConnectivity,
        [EnumMember(Value = "RMA_REASON_CUSTOMER_RETURN")] RmaReasonCustomerReturn,
        [EnumMember(Value = "RMA_REASON_HARDWAREFAILURE")] RmaReasonHardwarefailure,
        [EnumMember(Value = "RMA_REASON_OTHER")] RmaReasonOther,
        [EnumMember(Value = "RMA_REASON_UNSPECIFIED")] RmaReasonUnspecified
    }

    public enum GatewaySimType
    {
        [EnumMember(Value = "SIM_TYPE_CERTS_ONLY")] SimTypeCertsOnly,
        [EnumMember(Value = "SIM_TYPE_ESIM")] SimTypeEsim,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER")] SimTypeTwilioSuper,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER_TOB")] SimTypeTwilioSuperTob,
        [EnumMember(Value = "SIM_TYPE_TWILIO_TOB")] SimTypeTwilioTob,
        [EnumMember(Value = "SIM_TYPE_UNSPECIFIED")] SimTypeUnspecified
    }

    public enum GatewaySimTypeInput
    {
        [EnumMember(Value = "SIM_TYPE_CERTS_ONLY")] SimTypeCertsOnly,
        [EnumMember(Value = "SIM_TYPE_ESIM")] SimTypeEsim,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER")] SimTypeTwilioSuper,
        [EnumMember(Value = "SIM_TYPE_TWILIO_SUPER_TOB")] SimTypeTwilioSuperTob,
        [EnumMember(Value = "SIM_TYPE_TWILIO_TOB")] SimTypeTwilioTob,
        [EnumMember(Value = "SIM_TYPE_UNSPECIFIED")] SimTypeUnspecified
    }

    public enum GatewayShippingStatus
    {
        [EnumMember(Value = "SHIPPING_STATUS_DELIVERED")] ShippingStatusDelivered,
        [EnumMember(Value = "SHIPPING_STATUS_EXCEPTION")] ShippingStatusException,
        [EnumMember(Value = "SHIPPING_STATUS_SHIPPED")] ShippingStatusShipped,
        [EnumMember(Value = "SHIPPING_STATUS_UNSPECIFIED")] ShippingStatusUnspecified
    }

    public enum GatewayShippingStatusInput
    {
        [EnumMember(Value = "SHIPPING_STATUS_DELIVERED")] ShippingStatusDelivered,
        [EnumMember(Value = "SHIPPING_STATUS_EXCEPTION")] ShippingStatusException,
        [EnumMember(Value = "SHIPPING_STATUS_SHIPPED")] ShippingStatusShipped,
        [EnumMember(Value = "SHIPPING_STATUS_UNSPECIFIED")] ShippingStatusUnspecified
    }

    public enum GatewaySuspensionReason
    {
        [EnumMember(Value = "SUSPENSION_REASON_ACCOUNT_STATE")] SuspensionReasonAccountState,
        [EnumMember(Value = "SUSPENSION_REASON_CUSTOMER_REQUEST")] SuspensionReasonCustomerRequest,
        [EnumMember(Value = "SUSPENSION_REASON_LOST_TEMPORARY")] SuspensionReasonLostTemporary,
        [EnumMember(Value = "SUSPENSION_REASON_UNSPECIFIED")] SuspensionReasonUnspecified,
        [EnumMember(Value = "SUSPENSION_REASON_UNSUSPEND")] SuspensionReasonUnsuspend
    }

    public enum GatewaySuspensionReasonInput
    {
        [EnumMember(Value = "SUSPENSION_REASON_ACCOUNT_STATE")] SuspensionReasonAccountState,
        [EnumMember(Value = "SUSPENSION_REASON_CUSTOMER_REQUEST")] SuspensionReasonCustomerRequest,
        [EnumMember(Value = "SUSPENSION_REASON_LOST_TEMPORARY")] SuspensionReasonLostTemporary,
        [EnumMember(Value = "SUSPENSION_REASON_UNSPECIFIED")] SuspensionReasonUnspecified,
        [EnumMember(Value = "SUSPENSION_REASON_UNSUSPEND")] SuspensionReasonUnsuspend
    }

    public enum GatewayTerminationReason
    {
        [EnumMember(Value = "TERMINATION_DAMAGED")] TerminationDamaged,
        [EnumMember(Value = "TERMINATION_FAILURE")] TerminationFailure,
        [EnumMember(Value = "TERMINATION_LOST")] TerminationLost,
        [EnumMember(Value = "TERMINATION_REASON_ACCOUNT_STATE")] TerminationReasonAccountState,
        [EnumMember(Value = "TERMINATION_REASON_CUSTOMER_REQUEST")] TerminationReasonCustomerRequest,
        [EnumMember(Value = "TERMINATION_REASON_UNSPECIFIED")] TerminationReasonUnspecified
    }

    public enum GatewayTerminationReasonInput
    {
        [EnumMember(Value = "TERMINATION_DAMAGED")] TerminationDamaged,
        [EnumMember(Value = "TERMINATION_FAILURE")] TerminationFailure,
        [EnumMember(Value = "TERMINATION_LOST")] TerminationLost,
        [EnumMember(Value = "TERMINATION_REASON_ACCOUNT_STATE")] TerminationReasonAccountState,
        [EnumMember(Value = "TERMINATION_REASON_CUSTOMER_REQUEST")] TerminationReasonCustomerRequest,
        [EnumMember(Value = "TERMINATION_REASON_UNSPECIFIED")] TerminationReasonUnspecified
    }

    public enum GrantGrantState
    {
        [EnumMember(Value = "APPROVED")] Approved,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "GRANTSTATE_UNSPECIFIED")] GrantstateUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REJECTED")] Rejected
    }

    public enum GrantGrantStateInput
    {
        [EnumMember(Value = "APPROVED")] Approved,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "GRANTSTATE_UNSPECIFIED")] GrantstateUnspecified,
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "REJECTED")] Rejected
    }

    public enum GrantRequestType
    {
        [EnumMember(Value = "ENTIRE_BUILDINGS")] EntireBuildings,
        [EnumMember(Value = "ENTIRE_FLOORS")] EntireFloors,
        [EnumMember(Value = "ENTIRE_SITE")] EntireSite,
        [EnumMember(Value = "PARTIAL_FLOORS")] PartialFloors,
        [EnumMember(Value = "REQUESTED_UNSPECIFIED")] RequestedUnspecified
    }

    public enum GrantRequestTypeInput
    {
        [EnumMember(Value = "ENTIRE_BUILDINGS")] EntireBuildings,
        [EnumMember(Value = "ENTIRE_FLOORS")] EntireFloors,
        [EnumMember(Value = "ENTIRE_SITE")] EntireSite,
        [EnumMember(Value = "PARTIAL_FLOORS")] PartialFloors,
        [EnumMember(Value = "REQUESTED_UNSPECIFIED")] RequestedUnspecified
    }

    public enum GraphEdgeDirection
    {
        [EnumMember(Value = "IN")] In,
        [EnumMember(Value = "OUT")] Out
    }

    public enum HttpMethod
    {
        [EnumMember(Value = "CONNECT")] Connect,
        [EnumMember(Value = "DELETE")] Delete,
        [EnumMember(Value = "GET")] Get,
        [EnumMember(Value = "HEAD")] Head,
        [EnumMember(Value = "HTTPMETHOD_UNSPECIFIED")] HttpmethodUnspecified,
        [EnumMember(Value = "OPTIONS")] Options,
        [EnumMember(Value = "PATCH")] Patch,
        [EnumMember(Value = "POST")] Post,
        [EnumMember(Value = "PUT")] Put,
        [EnumMember(Value = "TRACE")] Trace
    }

    public enum HttpMethodInput
    {
        [EnumMember(Value = "CONNECT")] Connect,
        [EnumMember(Value = "DELETE")] Delete,
        [EnumMember(Value = "GET")] Get,
        [EnumMember(Value = "HEAD")] Head,
        [EnumMember(Value = "HTTPMETHOD_UNSPECIFIED")] HttpmethodUnspecified,
        [EnumMember(Value = "OPTIONS")] Options,
        [EnumMember(Value = "PATCH")] Patch,
        [EnumMember(Value = "POST")] Post,
        [EnumMember(Value = "PUT")] Put,
        [EnumMember(Value = "TRACE")] Trace
    }

    public enum Interval
    {
        [EnumMember(Value = "INTERVAL_CUSTOM")] IntervalCustom,
        [EnumMember(Value = "INTERVAL_EVERY_3_MONTHS")] IntervalEvery3Months,
        [EnumMember(Value = "INTERVAL_EVERY_6_MONTHS")] IntervalEvery6Months,
        [EnumMember(Value = "INTERVAL_EVERY_MONTH")] IntervalEveryMonth,
        [EnumMember(Value = "INTERVAL_EVERY_YEAR")] IntervalEveryYear,
        [EnumMember(Value = "INTERVAL_ONE_TIME")] IntervalOneTime,
        [EnumMember(Value = "INTERVAL_UNSPECIFIED")] IntervalUnspecified
    }

    public enum IntervalInput
    {
        [EnumMember(Value = "INTERVAL_CUSTOM")] IntervalCustom,
        [EnumMember(Value = "INTERVAL_EVERY_3_MONTHS")] IntervalEvery3Months,
        [EnumMember(Value = "INTERVAL_EVERY_6_MONTHS")] IntervalEvery6Months,
        [EnumMember(Value = "INTERVAL_EVERY_MONTH")] IntervalEveryMonth,
        [EnumMember(Value = "INTERVAL_EVERY_YEAR")] IntervalEveryYear,
        [EnumMember(Value = "INTERVAL_ONE_TIME")] IntervalOneTime,
        [EnumMember(Value = "INTERVAL_UNSPECIFIED")] IntervalUnspecified
    }

    public enum InviteInviteStatus
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "EXPIRED")] Expired,
        [EnumMember(Value = "INVITE_STATUS_UNSPECIFIED")] InviteStatusUnspecified,
        [EnumMember(Value = "PENDING")] Pending
    }

    public enum InviteInviteStatusInput
    {
        [EnumMember(Value = "ACCEPTED")] Accepted,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "EXPIRED")] Expired,
        [EnumMember(Value = "INVITE_STATUS_UNSPECIFIED")] InviteStatusUnspecified,
        [EnumMember(Value = "PENDING")] Pending
    }

    public enum OrgState
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "ORG_STATE_UNSPECIFIED")] OrgStateUnspecified,
        [EnumMember(Value = "PROVISIONING")] Provisioning
    }

    public enum OrgStateInput
    {
        [EnumMember(Value = "ACTIVE")] Active,
        [EnumMember(Value = "DELETED")] Deleted,
        [EnumMember(Value = "ORG_STATE_UNSPECIFIED")] OrgStateUnspecified,
        [EnumMember(Value = "PROVISIONING")] Provisioning
    }

    public enum Permission
    {
        [EnumMember(Value = "ANAXIENRICHMENT_READWRITE_ALL")] AnaxienrichmentReadwriteAll,
        [EnumMember(Value = "ANAXIENRICHMENT_READ_ALL")] AnaxienrichmentReadAll,
        [EnumMember(Value = "ANAXIINFERENCE_READWRITE_ALL")] AnaxiinferenceReadwriteAll,
        [EnumMember(Value = "ANAXIINFERENCE_READ_ALL")] AnaxiinferenceReadAll,
        [EnumMember(Value = "ANAXILABEL_READ")] AnaxilabelRead,
        [EnumMember(Value = "ANAXILABEL_READWRITE")] AnaxilabelReadwrite,
        [EnumMember(Value = "ANAXILABEL_READWRITE_ALL")] AnaxilabelReadwriteAll,
        [EnumMember(Value = "ANAXILABEL_READ_ALL")] AnaxilabelReadAll,
        [EnumMember(Value = "ANAXIMODEL_READWRITE_ALL")] AnaximodelReadwriteAll,
        [EnumMember(Value = "ANAXIMODEL_READ_ALL")] AnaximodelReadAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READWRITE_ALL")] AnaxistandardlabelReadwriteAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READ_ALL")] AnaxistandardlabelReadAll,
        [EnumMember(Value = "BILLING_READ")] BillingRead,
        [EnumMember(Value = "BILLING_READWRITE")] BillingReadwrite,
        [EnumMember(Value = "BILLING_READWRITE_ALL")] BillingReadwriteAll,
        [EnumMember(Value = "BILLING_READ_ALL")] BillingReadAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READWRITE_ALL")] ConnectorauthserviceReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READ_ALL")] ConnectorauthserviceReadAll,
        [EnumMember(Value = "CONNECTORAUTH_ACCESS")] ConnectorauthAccess,
        [EnumMember(Value = "CONNECTORAUTH_READWRITE_ALL")] ConnectorauthReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTH_READ_ALL")] ConnectorauthReadAll,
        [EnumMember(Value = "CONNECTOR_READWRITE_ALL")] ConnectorReadwriteAll,
        [EnumMember(Value = "CONNECTOR_READ_ALL")] ConnectorReadAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READWRITE_ALL")] DevicemanufacturerReadwriteAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READ_ALL")] DevicemanufacturerReadAll,
        [EnumMember(Value = "DEVICEMODEL_READWRITE_ALL")] DevicemodelReadwriteAll,
        [EnumMember(Value = "DEVICEMODEL_READ_ALL")] DevicemodelReadAll,
        [EnumMember(Value = "DEVICEPROFILE_READWRITE_ALL")] DeviceprofileReadwriteAll,
        [EnumMember(Value = "DEVICEPROFILE_READ_ALL")] DeviceprofileReadAll,
        [EnumMember(Value = "GATEWAY_PIPELINE_ALL")] GatewayPipelineAll,
        [EnumMember(Value = "GATEWAY_READWRITE_ALL")] GatewayReadwriteAll,
        [EnumMember(Value = "GATEWAY_READ_ALL")] GatewayReadAll,
        [EnumMember(Value = "GRANTS_READ")] GrantsRead,
        [EnumMember(Value = "GRANTS_READWRITE")] GrantsReadwrite,
        [EnumMember(Value = "GRANTS_READWRITE_ALL")] GrantsReadwriteAll,
        [EnumMember(Value = "GRANTS_READ_ALL")] GrantsReadAll,
        [EnumMember(Value = "MESSAGING_READ")] MessagingRead,
        [EnumMember(Value = "MESSAGING_READWRITE")] MessagingReadwrite,
        [EnumMember(Value = "MESSAGING_READWRITE_ALL")] MessagingReadwriteAll,
        [EnumMember(Value = "MESSAGING_READ_ALL")] MessagingReadAll,
        [EnumMember(Value = "ORG_READ")] OrgRead,
        [EnumMember(Value = "ORG_READWRITE")] OrgReadwrite,
        [EnumMember(Value = "ORG_READWRITE_ALL")] OrgReadwriteAll,
        [EnumMember(Value = "ORG_READ_ALL")] OrgReadAll,
        [EnumMember(Value = "PERMISSION_UNSPECIFIED")] PermissionUnspecified,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ")] PersonalaccesstokenRead,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE")] PersonalaccesstokenReadwrite,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE_ALL")] PersonalaccesstokenReadwriteAll,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ_ALL")] PersonalaccesstokenReadAll,
        [EnumMember(Value = "PLACE_READWRITE_ALL")] PlaceReadwriteAll,
        [EnumMember(Value = "PLACE_READ_ALL")] PlaceReadAll,
        [EnumMember(Value = "THING_READWRITE_ALL")] ThingReadwriteAll,
        [EnumMember(Value = "THING_READ_ALL")] ThingReadAll,
        [EnumMember(Value = "USER_READ")] UserRead,
        [EnumMember(Value = "USER_READWRITE")] UserReadwrite,
        [EnumMember(Value = "USER_READWRITE_ALL")] UserReadwriteAll,
        [EnumMember(Value = "USER_READ_ALL")] UserReadAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READWRITE_ALL")] WebhookreceiverReadwriteAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READ_ALL")] WebhookreceiverReadAll,
        [EnumMember(Value = "WEBHOOKSENDER_READWRITE_ALL")] WebhooksenderReadwriteAll,
        [EnumMember(Value = "WEBHOOKSENDER_READ_ALL")] WebhooksenderReadAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ")] WebhooktargetRead,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE")] WebhooktargetReadwrite,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE_ALL")] WebhooktargetReadwriteAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ_ALL")] WebhooktargetReadAll
    }

    public enum PermissionInput
    {
        [EnumMember(Value = "ANAXIENRICHMENT_READWRITE_ALL")] AnaxienrichmentReadwriteAll,
        [EnumMember(Value = "ANAXIENRICHMENT_READ_ALL")] AnaxienrichmentReadAll,
        [EnumMember(Value = "ANAXIINFERENCE_READWRITE_ALL")] AnaxiinferenceReadwriteAll,
        [EnumMember(Value = "ANAXIINFERENCE_READ_ALL")] AnaxiinferenceReadAll,
        [EnumMember(Value = "ANAXILABEL_READ")] AnaxilabelRead,
        [EnumMember(Value = "ANAXILABEL_READWRITE")] AnaxilabelReadwrite,
        [EnumMember(Value = "ANAXILABEL_READWRITE_ALL")] AnaxilabelReadwriteAll,
        [EnumMember(Value = "ANAXILABEL_READ_ALL")] AnaxilabelReadAll,
        [EnumMember(Value = "ANAXIMODEL_READWRITE_ALL")] AnaximodelReadwriteAll,
        [EnumMember(Value = "ANAXIMODEL_READ_ALL")] AnaximodelReadAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READWRITE_ALL")] AnaxistandardlabelReadwriteAll,
        [EnumMember(Value = "ANAXISTANDARDLABEL_READ_ALL")] AnaxistandardlabelReadAll,
        [EnumMember(Value = "BILLING_READ")] BillingRead,
        [EnumMember(Value = "BILLING_READWRITE")] BillingReadwrite,
        [EnumMember(Value = "BILLING_READWRITE_ALL")] BillingReadwriteAll,
        [EnumMember(Value = "BILLING_READ_ALL")] BillingReadAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READWRITE_ALL")] ConnectorauthserviceReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTHSERVICE_READ_ALL")] ConnectorauthserviceReadAll,
        [EnumMember(Value = "CONNECTORAUTH_ACCESS")] ConnectorauthAccess,
        [EnumMember(Value = "CONNECTORAUTH_READWRITE_ALL")] ConnectorauthReadwriteAll,
        [EnumMember(Value = "CONNECTORAUTH_READ_ALL")] ConnectorauthReadAll,
        [EnumMember(Value = "CONNECTOR_READWRITE_ALL")] ConnectorReadwriteAll,
        [EnumMember(Value = "CONNECTOR_READ_ALL")] ConnectorReadAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READWRITE_ALL")] DevicemanufacturerReadwriteAll,
        [EnumMember(Value = "DEVICEMANUFACTURER_READ_ALL")] DevicemanufacturerReadAll,
        [EnumMember(Value = "DEVICEMODEL_READWRITE_ALL")] DevicemodelReadwriteAll,
        [EnumMember(Value = "DEVICEMODEL_READ_ALL")] DevicemodelReadAll,
        [EnumMember(Value = "DEVICEPROFILE_READWRITE_ALL")] DeviceprofileReadwriteAll,
        [EnumMember(Value = "DEVICEPROFILE_READ_ALL")] DeviceprofileReadAll,
        [EnumMember(Value = "GATEWAY_PIPELINE_ALL")] GatewayPipelineAll,
        [EnumMember(Value = "GATEWAY_READWRITE_ALL")] GatewayReadwriteAll,
        [EnumMember(Value = "GATEWAY_READ_ALL")] GatewayReadAll,
        [EnumMember(Value = "GRANTS_READ")] GrantsRead,
        [EnumMember(Value = "GRANTS_READWRITE")] GrantsReadwrite,
        [EnumMember(Value = "GRANTS_READWRITE_ALL")] GrantsReadwriteAll,
        [EnumMember(Value = "GRANTS_READ_ALL")] GrantsReadAll,
        [EnumMember(Value = "MESSAGING_READ")] MessagingRead,
        [EnumMember(Value = "MESSAGING_READWRITE")] MessagingReadwrite,
        [EnumMember(Value = "MESSAGING_READWRITE_ALL")] MessagingReadwriteAll,
        [EnumMember(Value = "MESSAGING_READ_ALL")] MessagingReadAll,
        [EnumMember(Value = "ORG_READ")] OrgRead,
        [EnumMember(Value = "ORG_READWRITE")] OrgReadwrite,
        [EnumMember(Value = "ORG_READWRITE_ALL")] OrgReadwriteAll,
        [EnumMember(Value = "ORG_READ_ALL")] OrgReadAll,
        [EnumMember(Value = "PERMISSION_UNSPECIFIED")] PermissionUnspecified,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ")] PersonalaccesstokenRead,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE")] PersonalaccesstokenReadwrite,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READWRITE_ALL")] PersonalaccesstokenReadwriteAll,
        [EnumMember(Value = "PERSONALACCESSTOKEN_READ_ALL")] PersonalaccesstokenReadAll,
        [EnumMember(Value = "PLACE_READWRITE_ALL")] PlaceReadwriteAll,
        [EnumMember(Value = "PLACE_READ_ALL")] PlaceReadAll,
        [EnumMember(Value = "THING_READWRITE_ALL")] ThingReadwriteAll,
        [EnumMember(Value = "THING_READ_ALL")] ThingReadAll,
        [EnumMember(Value = "USER_READ")] UserRead,
        [EnumMember(Value = "USER_READWRITE")] UserReadwrite,
        [EnumMember(Value = "USER_READWRITE_ALL")] UserReadwriteAll,
        [EnumMember(Value = "USER_READ_ALL")] UserReadAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READWRITE_ALL")] WebhookreceiverReadwriteAll,
        [EnumMember(Value = "WEBHOOKRECEIVER_READ_ALL")] WebhookreceiverReadAll,
        [EnumMember(Value = "WEBHOOKSENDER_READWRITE_ALL")] WebhooksenderReadwriteAll,
        [EnumMember(Value = "WEBHOOKSENDER_READ_ALL")] WebhooksenderReadAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ")] WebhooktargetRead,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE")] WebhooktargetReadwrite,
        [EnumMember(Value = "WEBHOOKTARGET_READWRITE_ALL")] WebhooktargetReadwriteAll,
        [EnumMember(Value = "WEBHOOKTARGET_READ_ALL")] WebhooktargetReadAll
    }

    public enum PriceType
    {
        [EnumMember(Value = "PRICE_TYPE_METERED")] PriceTypeMetered,
        [EnumMember(Value = "PRICE_TYPE_ONE_TIME")] PriceTypeOneTime,
        [EnumMember(Value = "PRICE_TYPE_PLATFORM")] PriceTypePlatform,
        [EnumMember(Value = "PRICE_TYPE_PREPAID_METERED")] PriceTypePrepaidMetered,
        [EnumMember(Value = "PRICE_TYPE_UNSPECIFIED")] PriceTypeUnspecified
    }

    public enum PriceTypeInput
    {
        [EnumMember(Value = "PRICE_TYPE_METERED")] PriceTypeMetered,
        [EnumMember(Value = "PRICE_TYPE_ONE_TIME")] PriceTypeOneTime,
        [EnumMember(Value = "PRICE_TYPE_PLATFORM")] PriceTypePlatform,
        [EnumMember(Value = "PRICE_TYPE_PREPAID_METERED")] PriceTypePrepaidMetered,
        [EnumMember(Value = "PRICE_TYPE_UNSPECIFIED")] PriceTypeUnspecified
    }

    public enum ProductType
    {
        [EnumMember(Value = "PRODUCT_TYPE_ONE_TIME")] ProductTypeOneTime,
        [EnumMember(Value = "PRODUCT_TYPE_RECURRING")] ProductTypeRecurring,
        [EnumMember(Value = "PRODUCT_TYPE_UNSPECIFIED")] ProductTypeUnspecified
    }

    public enum ProductTypeInput
    {
        [EnumMember(Value = "PRODUCT_TYPE_ONE_TIME")] ProductTypeOneTime,
        [EnumMember(Value = "PRODUCT_TYPE_RECURRING")] ProductTypeRecurring,
        [EnumMember(Value = "PRODUCT_TYPE_UNSPECIFIED")] ProductTypeUnspecified
    }

    public enum Role
    {
        [EnumMember(Value = "ADMIN")] Admin,
        [EnumMember(Value = "EXPLORER")] Explorer,
        [EnumMember(Value = "ROLE_UNSPECIFIED")] RoleUnspecified
    }

    public enum RoleInput
    {
        [EnumMember(Value = "ADMIN")] Admin,
        [EnumMember(Value = "EXPLORER")] Explorer,
        [EnumMember(Value = "ROLE_UNSPECIFIED")] RoleUnspecified
    }

    public enum SignatureType
    {
        [EnumMember(Value = "ECDSA_SHA1")] EcdsaSha1,
        [EnumMember(Value = "ECDSA_SHA224")] EcdsaSha224,
        [EnumMember(Value = "ECDSA_SHA256")] EcdsaSha256,
        [EnumMember(Value = "ECDSA_SHA384")] EcdsaSha384,
        [EnumMember(Value = "ECDSA_SHA3_224")] EcdsaSha3224,
        [EnumMember(Value = "ECDSA_SHA3_256")] EcdsaSha3256,
        [EnumMember(Value = "ECDSA_SHA3_384")] EcdsaSha3384,
        [EnumMember(Value = "ECDSA_SHA3_512")] EcdsaSha3512,
        [EnumMember(Value = "ECDSA_SHA512")] EcdsaSha512,
        [EnumMember(Value = "HMAC_SHA1")] HmacSha1,
        [EnumMember(Value = "HMAC_SHA224")] HmacSha224,
        [EnumMember(Value = "HMAC_SHA256")] HmacSha256,
        [EnumMember(Value = "HMAC_SHA384")] HmacSha384,
        [EnumMember(Value = "HMAC_SHA3_224")] HmacSha3224,
        [EnumMember(Value = "HMAC_SHA3_256")] HmacSha3256,
        [EnumMember(Value = "HMAC_SHA3_384")] HmacSha3384,
        [EnumMember(Value = "HMAC_SHA3_512")] HmacSha3512,
        [EnumMember(Value = "HMAC_SHA512")] HmacSha512,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA1")] RsassaPkcs1V15Sha1,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA224")] RsassaPkcs1V15Sha224,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA256")] RsassaPkcs1V15Sha256,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA384")] RsassaPkcs1V15Sha384,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA512")] RsassaPkcs1V15Sha512,
        [EnumMember(Value = "RSASSA_PSS_SHA3_224")] RsassaPssSha3224,
        [EnumMember(Value = "RSASSA_PSS_SHA3_256")] RsassaPssSha3256,
        [EnumMember(Value = "RSASSA_PSS_SHA3_384")] RsassaPssSha3384,
        [EnumMember(Value = "RSASSA_PSS_SHA3_512")] RsassaPssSha3512,
        [EnumMember(Value = "SIGNATURETYPE_UNSPECIFIED")] SignaturetypeUnspecified
    }

    public enum SignatureTypeInput
    {
        [EnumMember(Value = "ECDSA_SHA1")] EcdsaSha1,
        [EnumMember(Value = "ECDSA_SHA224")] EcdsaSha224,
        [EnumMember(Value = "ECDSA_SHA256")] EcdsaSha256,
        [EnumMember(Value = "ECDSA_SHA384")] EcdsaSha384,
        [EnumMember(Value = "ECDSA_SHA3_224")] EcdsaSha3224,
        [EnumMember(Value = "ECDSA_SHA3_256")] EcdsaSha3256,
        [EnumMember(Value = "ECDSA_SHA3_384")] EcdsaSha3384,
        [EnumMember(Value = "ECDSA_SHA3_512")] EcdsaSha3512,
        [EnumMember(Value = "ECDSA_SHA512")] EcdsaSha512,
        [EnumMember(Value = "HMAC_SHA1")] HmacSha1,
        [EnumMember(Value = "HMAC_SHA224")] HmacSha224,
        [EnumMember(Value = "HMAC_SHA256")] HmacSha256,
        [EnumMember(Value = "HMAC_SHA384")] HmacSha384,
        [EnumMember(Value = "HMAC_SHA3_224")] HmacSha3224,
        [EnumMember(Value = "HMAC_SHA3_256")] HmacSha3256,
        [EnumMember(Value = "HMAC_SHA3_384")] HmacSha3384,
        [EnumMember(Value = "HMAC_SHA3_512")] HmacSha3512,
        [EnumMember(Value = "HMAC_SHA512")] HmacSha512,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA1")] RsassaPkcs1V15Sha1,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA224")] RsassaPkcs1V15Sha224,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA256")] RsassaPkcs1V15Sha256,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA384")] RsassaPkcs1V15Sha384,
        [EnumMember(Value = "RSASSA_PKCS1_V1_5_SHA512")] RsassaPkcs1V15Sha512,
        [EnumMember(Value = "RSASSA_PSS_SHA3_224")] RsassaPssSha3224,
        [EnumMember(Value = "RSASSA_PSS_SHA3_256")] RsassaPssSha3256,
        [EnumMember(Value = "RSASSA_PSS_SHA3_384")] RsassaPssSha3384,
        [EnumMember(Value = "RSASSA_PSS_SHA3_512")] RsassaPssSha3512,
        [EnumMember(Value = "SIGNATURETYPE_UNSPECIFIED")] SignaturetypeUnspecified
    }

    public enum SystemTypeKey
    {
        [EnumMember(Value = "AIR_QUALITY_MONITORING_SYSTEM")] AirQualityMonitoringSystem,
        [EnumMember(Value = "CALENDAR_SYSTEM")] CalendarSystem,
        [EnumMember(Value = "ELECTRICAL_SYSTEM")] ElectricalSystem,
        [EnumMember(Value = "ELECTRICITY_SYSTEM")] ElectricitySystem,
        [EnumMember(Value = "ELEVATOR_SYSTEM")] ElevatorSystem,
        [EnumMember(Value = "GAS_SYSTEM")] GasSystem,
        [EnumMember(Value = "HVAC_SYSTEM")] HvacSystem,
        [EnumMember(Value = "LIGHTING_SYSTEM")] LightingSystem,
        [EnumMember(Value = "SAFETY_SYSTEM")] SafetySystem,
        [EnumMember(Value = "SECURITY_SYSTEM")] SecuritySystem,
        [EnumMember(Value = "SEWAGE_SYSTEM")] SewageSystem,
        [EnumMember(Value = "SPATIAL_INTELLIGENCE_SYSTEM")] SpatialIntelligenceSystem,
        [EnumMember(Value = "SYSTEMTYPE_UNKNOWN")] SystemtypeUnknown,
        [EnumMember(Value = "SYSTEM_TYPE_KEY_UNSPECIFIED")] SystemTypeKeyUnspecified,
        [EnumMember(Value = "TELECONFERENCE_SYSTEM")] TeleconferenceSystem,
        [EnumMember(Value = "WATER_SYSTEM")] WaterSystem,
        [EnumMember(Value = "WEATHER_SYSTEM")] WeatherSystem
    }

    public enum SystemTypeKeyInput
    {
        [EnumMember(Value = "AIR_QUALITY_MONITORING_SYSTEM")] AirQualityMonitoringSystem,
        [EnumMember(Value = "CALENDAR_SYSTEM")] CalendarSystem,
        [EnumMember(Value = "ELECTRICAL_SYSTEM")] ElectricalSystem,
        [EnumMember(Value = "ELECTRICITY_SYSTEM")] ElectricitySystem,
        [EnumMember(Value = "ELEVATOR_SYSTEM")] ElevatorSystem,
        [EnumMember(Value = "GAS_SYSTEM")] GasSystem,
        [EnumMember(Value = "HVAC_SYSTEM")] HvacSystem,
        [EnumMember(Value = "LIGHTING_SYSTEM")] LightingSystem,
        [EnumMember(Value = "SAFETY_SYSTEM")] SafetySystem,
        [EnumMember(Value = "SECURITY_SYSTEM")] SecuritySystem,
        [EnumMember(Value = "SEWAGE_SYSTEM")] SewageSystem,
        [EnumMember(Value = "SPATIAL_INTELLIGENCE_SYSTEM")] SpatialIntelligenceSystem,
        [EnumMember(Value = "SYSTEMTYPE_UNKNOWN")] SystemtypeUnknown,
        [EnumMember(Value = "SYSTEM_TYPE_KEY_UNSPECIFIED")] SystemTypeKeyUnspecified,
        [EnumMember(Value = "TELECONFERENCE_SYSTEM")] TeleconferenceSystem,
        [EnumMember(Value = "WATER_SYSTEM")] WaterSystem,
        [EnumMember(Value = "WEATHER_SYSTEM")] WeatherSystem
    }

    public enum TimeseriesAggPeriod
    {
        [EnumMember(Value = "AGG_PERIOD_UNSPECIFIED")] AggPeriodUnspecified,
        [EnumMember(Value = "DAY")] Day,
        [EnumMember(Value = "HOUR")] Hour,
        [EnumMember(Value = "MINUTE")] Minute
    }

    public enum TimeseriesAggPeriodInput
    {
        [EnumMember(Value = "AGG_PERIOD_UNSPECIFIED")] AggPeriodUnspecified,
        [EnumMember(Value = "DAY")] Day,
        [EnumMember(Value = "HOUR")] Hour,
        [EnumMember(Value = "MINUTE")] Minute
    }

    public enum WebhookTargetTargetType
    {
        [EnumMember(Value = "AMQP")] Amqp,
        [EnumMember(Value = "HTTP")] Http,
        [EnumMember(Value = "KAFKA")] Kafka,
        [EnumMember(Value = "MQTT")] Mqtt,
        [EnumMember(Value = "NATS")] Nats,
        [EnumMember(Value = "TARGETTYPE_UNSPECIFIED")] TargettypeUnspecified,
        [EnumMember(Value = "WEBSOCKET")] Websocket
    }

    public enum WebhookTargetTargetTypeInput
    {
        [EnumMember(Value = "AMQP")] Amqp,
        [EnumMember(Value = "HTTP")] Http,
        [EnumMember(Value = "KAFKA")] Kafka,
        [EnumMember(Value = "MQTT")] Mqtt,
        [EnumMember(Value = "NATS")] Nats,
        [EnumMember(Value = "TARGETTYPE_UNSPECIFIED")] TargettypeUnspecified,
        [EnumMember(Value = "WEBSOCKET")] Websocket
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class AddressQueryBuilder : GraphQlQueryBuilder<AddressQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "countryName" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "locality" },
                new FieldMetadata { Name = "postalCode" },
                new FieldMetadata { Name = "region" },
                new FieldMetadata { Name = "streetAddress" }
            };

        protected override string TypeName { get { return "Address"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AddressQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public AddressQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AddressQueryBuilder WithLocality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("locality", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptLocality()
        {
            return ExceptField("locality");
        }

        public AddressQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public AddressQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public AddressQueryBuilder WithStreetAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streetAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressQueryBuilder ExceptStreetAddress()
        {
            return ExceptField("streetAddress");
        }
    }

    public class AddressMutationQueryBuilder : GraphQlQueryBuilder<AddressMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "countryName" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "locality" },
                new FieldMetadata { Name = "postalCode" },
                new FieldMetadata { Name = "region" },
                new FieldMetadata { Name = "streetAddress" },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "AddressMutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AddressMutationQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public AddressMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AddressMutationQueryBuilder WithLocality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("locality", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptLocality()
        {
            return ExceptField("locality");
        }

        public AddressMutationQueryBuilder WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptPostalCode()
        {
            return ExceptField("postalCode");
        }

        public AddressMutationQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public AddressMutationQueryBuilder WithStreetAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streetAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptStreetAddress()
        {
            return ExceptField("streetAddress");
        }

        public AddressMutationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AddressMutationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class AuthQueryBuilder : GraphQlQueryBuilder<AuthQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new FieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) }
            };

        protected override string TypeName { get { return "Auth"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public AuthQueryBuilder WithAnd(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public AuthQueryBuilder WithMatches(MatchQueryBuilder matchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public AuthQueryBuilder WithNot(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public AuthQueryBuilder WithOr(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }
    }

    public class BillingCalculatedProductBundleResponseQueryBuilder : GraphQlQueryBuilder<BillingCalculatedProductBundleResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "calculation", IsComplex = true, QueryBuilderType = typeof(BillingCalculationResponseQueryBuilder) },
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "productBundle", IsComplex = true, QueryBuilderType = typeof(ProductBundleResponseQueryBuilder) },
                new FieldMetadata { Name = "productSlug" },
                new FieldMetadata { Name = "statusMessage" }
            };

        protected override string TypeName { get { return "BillingCalculatedProductBundleResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingCalculatedProductBundleResponseQueryBuilder WithCalculation(BillingCalculationResponseQueryBuilder billingCalculationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("calculation", alias, billingCalculationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptCalculation()
        {
            return ExceptField("calculation");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithProductBundle(ProductBundleResponseQueryBuilder productBundleResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundle", alias, productBundleResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptProductBundle()
        {
            return ExceptField("productBundle");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithProductSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productSlug", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptProductSlug()
        {
            return ExceptField("productSlug");
        }

        public BillingCalculatedProductBundleResponseQueryBuilder WithStatusMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculatedProductBundleResponseQueryBuilder ExceptStatusMessage()
        {
            return ExceptField("statusMessage");
        }
    }

    public class BillingCalculationResponseQueryBuilder : GraphQlQueryBuilder<BillingCalculationResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "fixedPrice" },
                new FieldMetadata { Name = "itemSlug" },
                new FieldMetadata { Name = "overagePrice" },
                new FieldMetadata { Name = "productPriceItem", IsComplex = true, QueryBuilderType = typeof(ProductPriceItemResponseQueryBuilder) },
                new FieldMetadata { Name = "quantity" },
                new FieldMetadata { Name = "unitPrice" }
            };

        protected override string TypeName { get { return "BillingCalculationResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingCalculationResponseQueryBuilder WithFixedPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fixedPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptFixedPrice()
        {
            return ExceptField("fixedPrice");
        }

        public BillingCalculationResponseQueryBuilder WithItemSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemSlug", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptItemSlug()
        {
            return ExceptField("itemSlug");
        }

        public BillingCalculationResponseQueryBuilder WithOveragePrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("overagePrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptOveragePrice()
        {
            return ExceptField("overagePrice");
        }

        public BillingCalculationResponseQueryBuilder WithProductPriceItem(ProductPriceItemResponseQueryBuilder productPriceItemResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productPriceItem", alias, productPriceItemResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptProductPriceItem()
        {
            return ExceptField("productPriceItem");
        }

        public BillingCalculationResponseQueryBuilder WithQuantity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantity", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptQuantity()
        {
            return ExceptField("quantity");
        }

        public BillingCalculationResponseQueryBuilder WithUnitPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingCalculationResponseQueryBuilder ExceptUnitPrice()
        {
            return ExceptField("unitPrice");
        }
    }

    public class BillingPriceTypeFilterExpressionQueryBuilder : GraphQlQueryBuilder<BillingPriceTypeFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "productPriceType" }
            };

        protected override string TypeName { get { return "BillingPriceTypeFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingPriceTypeFilterExpressionQueryBuilder WithProductPriceType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productPriceType", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingPriceTypeFilterExpressionQueryBuilder ExceptProductPriceType()
        {
            return ExceptField("productPriceType");
        }
    }

    public class BillingProductBundleFilterQueryBuilder : GraphQlQueryBuilder<BillingProductBundleFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(BillingProductBundleFilterQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(BillingProductBundleFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(BillingProductBundleFilterQueryBuilder) },
                new FieldMetadata { Name = "productPriceType", IsComplex = true, QueryBuilderType = typeof(BillingPriceTypeFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "sku", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "slug", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "BillingProductBundleFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingProductBundleFilterQueryBuilder WithAnd(BillingProductBundleFilterQueryBuilder billingProductBundleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, billingProductBundleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public BillingProductBundleFilterQueryBuilder WithNot(BillingProductBundleFilterQueryBuilder billingProductBundleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, billingProductBundleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public BillingProductBundleFilterQueryBuilder WithOr(BillingProductBundleFilterQueryBuilder billingProductBundleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, billingProductBundleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public BillingProductBundleFilterQueryBuilder WithProductPriceType(BillingPriceTypeFilterExpressionQueryBuilder billingPriceTypeFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productPriceType", alias, billingPriceTypeFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptProductPriceType()
        {
            return ExceptField("productPriceType");
        }

        public BillingProductBundleFilterQueryBuilder WithSku(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sku", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptSku()
        {
            return ExceptField("sku");
        }

        public BillingProductBundleFilterQueryBuilder WithSlug(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("slug", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleFilterQueryBuilder ExceptSlug()
        {
            return ExceptField("slug");
        }
    }

    public class BillingProductBundleSubscriptionResponseQueryBuilder : GraphQlQueryBuilder<BillingProductBundleSubscriptionResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "productBundle", IsComplex = true, QueryBuilderType = typeof(BillingCalculatedProductBundleResponseQueryBuilder) },
                new FieldMetadata { Name = "subscriptionId" }
            };

        protected override string TypeName { get { return "BillingProductBundleSubscriptionResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BillingProductBundleSubscriptionResponseQueryBuilder WithProductBundle(BillingCalculatedProductBundleResponseQueryBuilder billingCalculatedProductBundleResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundle", alias, billingCalculatedProductBundleResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder ExceptProductBundle()
        {
            return ExceptField("productBundle");
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder WithSubscriptionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subscriptionId", alias, new GraphQlDirective[] { include, skip });
        }

        public BillingProductBundleSubscriptionResponseQueryBuilder ExceptSubscriptionId()
        {
            return ExceptField("subscriptionId");
        }
    }

    public class BodyValueLocationQueryBuilder : GraphQlQueryBuilder<BodyValueLocationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "bodySource" },
                new FieldMetadata { Name = "field" }
            };

        protected override string TypeName { get { return "BodyValueLocation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BodyValueLocationQueryBuilder WithBodySource(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bodySource", alias, new GraphQlDirective[] { include, skip });
        }

        public BodyValueLocationQueryBuilder ExceptBodySource()
        {
            return ExceptField("bodySource");
        }

        public BodyValueLocationQueryBuilder WithField(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("field", alias, new GraphQlDirective[] { include, skip });
        }

        public BodyValueLocationQueryBuilder ExceptField()
        {
            return ExceptField("field");
        }
    }

    public class BuildingQueryBuilder : GraphQlQueryBuilder<BuildingQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Building"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public BuildingQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public BuildingQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public BuildingQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public BuildingQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public BuildingQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public BuildingQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public BuildingQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public BuildingQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public BuildingQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public BuildingQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BuildingQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public BuildingQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public BuildingQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public BuildingQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public BuildingQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public BuildingQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public BuildingQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuildingQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public BuildingQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class BuildingCreateResponseQueryBuilder : GraphQlQueryBuilder<BuildingCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuildingCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingCreateResponseQueryBuilder WithBuilding(BuildingMutationQueryBuilder buildingMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("building", alias, buildingMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingCreateResponseQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }
    }

    public class BuildingDeleteResponseQueryBuilder : GraphQlQueryBuilder<BuildingDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "BuildingDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class BuildingMutationQueryBuilder : GraphQlQueryBuilder<BuildingMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressMutationQueryBuilder) },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "siteId" }
            };

        protected override string TypeName { get { return "BuildingMutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingMutationQueryBuilder WithAddress(AddressMutationQueryBuilder addressMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public BuildingMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public BuildingMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BuildingMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public BuildingMutationQueryBuilder WithSiteId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siteId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuildingMutationQueryBuilder ExceptSiteId()
        {
            return ExceptField("siteId");
        }
    }

    public class BuildingUpdateResponseQueryBuilder : GraphQlQueryBuilder<BuildingUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuildingUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public BuildingUpdateResponseQueryBuilder WithBuilding(BuildingMutationQueryBuilder buildingMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("building", alias, buildingMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuildingUpdateResponseQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }
    }

    public class CalendarEventQueryBuilder : GraphQlQueryBuilder<CalendarEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "endTime", IsComplex = true },
                new FieldMetadata { Name = "hasInvitations", IsComplex = true, QueryBuilderType = typeof(CalendarInvitationQueryBuilder) },
                new FieldMetadata { Name = "hasInvitees", IsComplex = true, QueryBuilderType = typeof(CalendarInviteeQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "startTime", IsComplex = true }
            };

        protected override string TypeName { get { return "CalendarEvent"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarEventQueryBuilder WithEndTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public CalendarEventQueryBuilder WithHasInvitations(CalendarInvitationQueryBuilder calendarInvitationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitations", alias, calendarInvitationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptHasInvitations()
        {
            return ExceptField("hasInvitations");
        }

        public CalendarEventQueryBuilder WithHasInvitees(CalendarInviteeQueryBuilder calendarInviteeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitees", alias, calendarInviteeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptHasInvitees()
        {
            return ExceptField("hasInvitees");
        }

        public CalendarEventQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CalendarEventQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CalendarEventQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarEventQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }
    }

    public class CalendarInvitationQueryBuilder : GraphQlQueryBuilder<CalendarInvitationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "email", IsComplex = true, QueryBuilderType = typeof(EmailAddressQueryBuilder) },
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "hasInvitee", IsComplex = true, QueryBuilderType = typeof(CalendarInviteeQueryBuilder) },
                new FieldMetadata { Name = "response" }
            };

        protected override string TypeName { get { return "CalendarInvitation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarInvitationQueryBuilder WithEmail(EmailAddressQueryBuilder emailAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("email", alias, emailAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CalendarInvitationQueryBuilder WithEvent(CalendarEventQueryBuilder calendarEventQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("event", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public CalendarInvitationQueryBuilder WithHasInvitee(CalendarInviteeQueryBuilder calendarInviteeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasInvitee", alias, calendarInviteeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptHasInvitee()
        {
            return ExceptField("hasInvitee");
        }

        public CalendarInvitationQueryBuilder WithResponse(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("response", alias, new GraphQlDirective[] { include, skip });
        }

        public CalendarInvitationQueryBuilder ExceptResponse()
        {
            return ExceptField("response");
        }
    }

    public class CalendarInviteeQueryBuilder : GraphQlQueryBuilder<CalendarInviteeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "CalendarInvitee"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CalendarInviteeQueryBuilder WithPersonFragment(PersonQueryBuilder personQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(personQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CalendarInviteeQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class CertMatchQueryBuilder : GraphQlQueryBuilder<CertMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "caCerts", IsComplex = true, QueryBuilderType = typeof(CertificateAuthorityBundleQueryBuilder) },
                new FieldMetadata { Name = "dnsName" },
                new FieldMetadata { Name = "serialNumber" }
            };

        protected override string TypeName { get { return "CertMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertMatchQueryBuilder WithCaCerts(CertificateAuthorityBundleQueryBuilder certificateAuthorityBundleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("caCerts", alias, certificateAuthorityBundleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptCaCerts()
        {
            return ExceptField("caCerts");
        }

        public CertMatchQueryBuilder WithDnsName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dnsName", alias, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptDnsName()
        {
            return ExceptField("dnsName");
        }

        public CertMatchQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public CertMatchQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }
    }

    public class CertificateQueryBuilder : GraphQlQueryBuilder<CertificateQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "certificate" },
                new FieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "Certificate"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertificateQueryBuilder WithCertificate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("certificate", alias, new GraphQlDirective[] { include, skip });
        }

        public CertificateQueryBuilder ExceptCertificate()
        {
            return ExceptField("certificate");
        }

        public CertificateQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public CertificateQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class CertificateAuthorityBundleQueryBuilder : GraphQlQueryBuilder<CertificateAuthorityBundleQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "caCertificates", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) }
            };

        protected override string TypeName { get { return "CertificateAuthorityBundle"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public CertificateAuthorityBundleQueryBuilder WithCaCertificates(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("caCertificates", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CertificateAuthorityBundleQueryBuilder ExceptCaCertificates()
        {
            return ExceptField("caCertificates");
        }
    }

    public class ConnectorQueryBuilder : GraphQlQueryBuilder<ConnectorQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "config", IsComplex = true },
                new FieldMetadata { Name = "configHash" },
                new FieldMetadata { Name = "connectorType", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new FieldMetadata { Name = "connectorTypeId" },
                new FieldMetadata { Name = "contributions", IsComplex = true, QueryBuilderType = typeof(ConnectorContributionQueryBuilder) },
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lastSeen", IsComplex = true },
                new FieldMetadata { Name = "lastUpdatedBy" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "runtimeData", IsComplex = true },
                new FieldMetadata { Name = "state" },
                new FieldMetadata { Name = "stateDetails" },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "updated", IsComplex = true },
                new FieldMetadata { Name = "workflowId" }
            };

        protected override string TypeName { get { return "Connector"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorQueryBuilder WithConfig(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("config", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConfig()
        {
            return ExceptField("config");
        }

        public ConnectorQueryBuilder WithConfigHash(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configHash", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConfigHash()
        {
            return ExceptField("configHash");
        }

        public ConnectorQueryBuilder WithConnectorType(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorType", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConnectorType()
        {
            return ExceptField("connectorType");
        }

        public ConnectorQueryBuilder WithConnectorTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectorTypeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorQueryBuilder WithContributions(ConnectorContributionQueryBuilder connectorContributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("contributions", alias, connectorContributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptContributions()
        {
            return ExceptField("contributions");
        }

        public ConnectorQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public ConnectorQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorQueryBuilder WithLastSeen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeen", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptLastSeen()
        {
            return ExceptField("lastSeen");
        }

        public ConnectorQueryBuilder WithLastUpdatedBy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdatedBy", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptLastUpdatedBy()
        {
            return ExceptField("lastUpdatedBy");
        }

        public ConnectorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ConnectorQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public ConnectorQueryBuilder WithRuntimeData(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runtimeData", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptRuntimeData()
        {
            return ExceptField("runtimeData");
        }

        public ConnectorQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public ConnectorQueryBuilder WithStateDetails(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateDetails", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptStateDetails()
        {
            return ExceptField("stateDetails");
        }

        public ConnectorQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConnectorQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ConnectorQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public ConnectorQueryBuilder WithWorkflowId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workflowId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorQueryBuilder ExceptWorkflowId()
        {
            return ExceptField("workflowId");
        }
    }

    public class ConnectorAuthQueryBuilder : GraphQlQueryBuilder<ConnectorAuthQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lastAccessed", IsComplex = true },
                new FieldMetadata { Name = "updated", IsComplex = true }
            };

        protected override string TypeName { get { return "ConnectorAuth"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public ConnectorAuthQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorAuthQueryBuilder WithLastAccessed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastAccessed", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptLastAccessed()
        {
            return ExceptField("lastAccessed");
        }

        public ConnectorAuthQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }
    }

    public class ConnectorAuthCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorAuthCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthCreateResponseQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthCreateResponseQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }
    }

    public class ConnectorAuthDeleteResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorAuthDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorAuthUpdateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorAuthUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorAuthUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorAuthUpdateResponseQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorAuthUpdateResponseQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }
    }

    public class ConnectorContributionQueryBuilder : GraphQlQueryBuilder<ConnectorContributionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "systemType" }
            };

        protected override string TypeName { get { return "ConnectorContribution"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorContributionQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorContributionQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public ConnectorContributionQueryBuilder WithSystemType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemType", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorContributionQueryBuilder ExceptSystemType()
        {
            return ExceptField("systemType");
        }
    }

    public class ConnectorCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connector", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorCreateResponseQueryBuilder WithConnector(ConnectorQueryBuilder connectorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connector", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorCreateResponseQueryBuilder ExceptConnector()
        {
            return ExceptField("connector");
        }
    }

    public class ConnectorDeleteResponseQueryBuilder : GraphQlQueryBuilder<ConnectorDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "ConnectorDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class ConnectorFilterQueryBuilder : GraphQlQueryBuilder<ConnectorFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorTypeId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "id", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorFilterQueryBuilder WithConnectorTypeId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorTypeId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorFilterQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorFilterQueryBuilder WithId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("id", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorFilterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class ConnectorRequestsConnectorRequestQueryBuilder : GraphQlQueryBuilder<ConnectorRequestsConnectorRequestQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorTypeId" },
                new FieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "ConnectorRequestsConnectorRequest"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRequestsConnectorRequestQueryBuilder WithConnectorTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("connectorTypeId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestsConnectorRequestQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorRequestsConnectorRequestQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestsConnectorRequestQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class ConnectorRequestsCreateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorRequestsCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "request", IsComplex = true, QueryBuilderType = typeof(ConnectorRequestsConnectorRequestQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorRequestsCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRequestsCreateResponseQueryBuilder WithRequest(ConnectorRequestsConnectorRequestQueryBuilder connectorRequestsConnectorRequestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("request", alias, connectorRequestsConnectorRequestQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestsCreateResponseQueryBuilder ExceptRequest()
        {
            return ExceptField("request");
        }
    }

    public class ConnectorRequestsFilterQueryBuilder : GraphQlQueryBuilder<ConnectorRequestsFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorTypeId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorRequestsFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorRequestsFilterQueryBuilder WithConnectorTypeId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorTypeId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorRequestsFilterQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }
    }

    public class ConnectorTypeQueryBuilder : GraphQlQueryBuilder<ConnectorTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "configSchema", IsComplex = true },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "taskQueue" },
                new FieldMetadata { Name = "version" }
            };

        protected override string TypeName { get { return "ConnectorType"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorTypeQueryBuilder WithConfigSchema(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configSchema", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptConfigSchema()
        {
            return ExceptField("configSchema");
        }

        public ConnectorTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ConnectorTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ConnectorTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ConnectorTypeQueryBuilder WithTaskQueue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taskQueue", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptTaskQueue()
        {
            return ExceptField("taskQueue");
        }

        public ConnectorTypeQueryBuilder WithVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("version", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeQueryBuilder ExceptVersion()
        {
            return ExceptField("version");
        }
    }

    public class ConnectorTypeFilterQueryBuilder : GraphQlQueryBuilder<ConnectorTypeFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connectorTypeId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "description", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "version", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorTypeFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorTypeFilterQueryBuilder WithConnectorTypeId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connectorTypeId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeFilterQueryBuilder ExceptConnectorTypeId()
        {
            return ExceptField("connectorTypeId");
        }

        public ConnectorTypeFilterQueryBuilder WithDescription(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("description", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeFilterQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ConnectorTypeFilterQueryBuilder WithName(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ConnectorTypeFilterQueryBuilder WithVersion(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("version", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorTypeFilterQueryBuilder ExceptVersion()
        {
            return ExceptField("version");
        }
    }

    public class ConnectorUpdateResponseQueryBuilder : GraphQlQueryBuilder<ConnectorUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "connector", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) }
            };

        protected override string TypeName { get { return "ConnectorUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorUpdateResponseQueryBuilder WithConnector(ConnectorQueryBuilder connectorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("connector", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpdateResponseQueryBuilder ExceptConnector()
        {
            return ExceptField("connector");
        }
    }

    public class ConnectorUpsertConfigResponseQueryBuilder : GraphQlQueryBuilder<ConnectorUpsertConfigResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "config", IsComplex = true },
                new FieldMetadata { Name = "configHash" },
                new FieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "ConnectorUpsertConfigResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ConnectorUpsertConfigResponseQueryBuilder WithConfig(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("config", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptConfig()
        {
            return ExceptField("config");
        }

        public ConnectorUpsertConfigResponseQueryBuilder WithConfigHash(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("configHash", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptConfigHash()
        {
            return ExceptField("configHash");
        }

        public ConnectorUpsertConfigResponseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ConnectorUpsertConfigResponseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class DeviceManufacturerQueryBuilder : GraphQlQueryBuilder<DeviceManufacturerQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "logoUrl" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "DeviceManufacturer"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceManufacturerQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DeviceManufacturerQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DeviceManufacturerQueryBuilder WithLogoUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logoUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptLogoUrl()
        {
            return ExceptField("logoUrl");
        }

        public DeviceManufacturerQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceManufacturerQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class DeviceModelQueryBuilder : GraphQlQueryBuilder<DeviceModelQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "imageUrl" },
                new FieldMetadata { Name = "manufacturer", IsComplex = true, QueryBuilderType = typeof(DeviceManufacturerQueryBuilder) },
                new FieldMetadata { Name = "manufacturerId" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "seeAlsoUrls", IsComplex = true }
            };

        protected override string TypeName { get { return "DeviceModel"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public DeviceModelQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public DeviceModelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DeviceModelQueryBuilder WithImageUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imageUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptImageUrl()
        {
            return ExceptField("imageUrl");
        }

        public DeviceModelQueryBuilder WithManufacturer(DeviceManufacturerQueryBuilder deviceManufacturerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manufacturer", alias, deviceManufacturerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptManufacturer()
        {
            return ExceptField("manufacturer");
        }

        public DeviceModelQueryBuilder WithManufacturerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("manufacturerId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptManufacturerId()
        {
            return ExceptField("manufacturerId");
        }

        public DeviceModelQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public DeviceModelQueryBuilder WithSeeAlsoUrls(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seeAlsoUrls", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceModelQueryBuilder ExceptSeeAlsoUrls()
        {
            return ExceptField("seeAlsoUrls");
        }
    }

    public class EmailAddressQueryBuilder : GraphQlQueryBuilder<EmailAddressQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "address" }
            };

        protected override string TypeName { get { return "EmailAddress"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EmailAddressQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("address", alias, new GraphQlDirective[] { include, skip });
        }

        public EmailAddressQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }
    }

    public class EventQueryBuilder : GraphQlQueryBuilder<EventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "endTime", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "startTime", IsComplex = true }
            };

        protected override string TypeName { get { return "Event"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public EventQueryBuilder WithEndTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public EventQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public EventQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EventQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { include, skip });
        }

        public EventQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public EventQueryBuilder WithCalendarEventFragment(CalendarEventQueryBuilder calendarEventQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(calendarEventQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ExampleFilterQueryBuilder : GraphQlQueryBuilder<ExampleFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(ExampleFilterQueryBuilder) },
                new FieldMetadata { Name = "color", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "make", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "model", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(ExampleFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(ExampleFilterQueryBuilder) },
                new FieldMetadata { Name = "vin", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "year", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "ExampleFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ExampleFilterQueryBuilder WithAnd(ExampleFilterQueryBuilder exampleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, exampleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public ExampleFilterQueryBuilder WithColor(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("color", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptColor()
        {
            return ExceptField("color");
        }

        public ExampleFilterQueryBuilder WithMake(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("make", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptMake()
        {
            return ExceptField("make");
        }

        public ExampleFilterQueryBuilder WithModel(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("model", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptModel()
        {
            return ExceptField("model");
        }

        public ExampleFilterQueryBuilder WithNot(ExampleFilterQueryBuilder exampleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, exampleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public ExampleFilterQueryBuilder WithOr(ExampleFilterQueryBuilder exampleFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, exampleFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public ExampleFilterQueryBuilder WithVin(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vin", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptVin()
        {
            return ExceptField("vin");
        }

        public ExampleFilterQueryBuilder WithYear(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("year", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExampleFilterQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }
    }

    public class FeedsUnionQueryBuilder : GraphQlQueryBuilder<FeedsUnionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "FeedsUnion"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FeedsUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedsUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class FloorQueryBuilder : GraphQlQueryBuilder<FloorQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "building", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "level" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true },
                new FieldMetadata { Name = "zones", IsComplex = true, QueryBuilderType = typeof(ZoneQueryBuilder) }
            };

        protected override string TypeName { get { return "Floor"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorQueryBuilder WithBuilding(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("building", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptBuilding()
        {
            return ExceptField("building");
        }

        public FloorQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public FloorQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public FloorQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public FloorQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public FloorQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public FloorQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public FloorQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public FloorQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public FloorQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public FloorQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public FloorQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public FloorQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public FloorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public FloorQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public FloorQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<int?> childDepth = null, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (childDepth != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "childDepth", ArgumentValue = childDepth });

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public FloorQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public FloorQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FloorQueryBuilder WithZones(ZoneQueryBuilder zoneQueryBuilder, QueryBuilderParameter<ZoneFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("zones", alias, zoneQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FloorQueryBuilder ExceptZones()
        {
            return ExceptField("zones");
        }
    }

    public class FloorCreateResponseQueryBuilder : GraphQlQueryBuilder<FloorCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "FloorCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorCreateResponseQueryBuilder WithFloor(FloorMutationQueryBuilder floorMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("floor", alias, floorMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorCreateResponseQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }
    }

    public class FloorDeleteResponseQueryBuilder : GraphQlQueryBuilder<FloorDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "FloorDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class FloorMutationQueryBuilder : GraphQlQueryBuilder<FloorMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "buildingId" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "level" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "FloorMutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorMutationQueryBuilder WithBuildingId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildingId", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptBuildingId()
        {
            return ExceptField("buildingId");
        }

        public FloorMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public FloorMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FloorMutationQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public FloorMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public FloorMutationQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FloorMutationQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class FloorUpdateResponseQueryBuilder : GraphQlQueryBuilder<FloorUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "FloorUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public FloorUpdateResponseQueryBuilder WithFloor(FloorMutationQueryBuilder floorMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("floor", alias, floorMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FloorUpdateResponseQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }
    }

    public class GatewayQueryBuilder : GraphQlQueryBuilder<GatewayQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "active", IsComplex = true, QueryBuilderType = typeof(GatewayActiveDetailsQueryBuilder) },
                new FieldMetadata { Name = "assignment", IsComplex = true, QueryBuilderType = typeof(GatewayAssignmentDetailsQueryBuilder) },
                new FieldMetadata { Name = "firstBoot", IsComplex = true, QueryBuilderType = typeof(GatewayFirstBootDetailsQueryBuilder) },
                new FieldMetadata { Name = "gatewayId" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "provisioning", IsComplex = true, QueryBuilderType = typeof(GatewayProvisioningDetailsQueryBuilder) },
                new FieldMetadata { Name = "registration", IsComplex = true, QueryBuilderType = typeof(GatewayRegistrationDetailsQueryBuilder) },
                new FieldMetadata { Name = "rma", IsComplex = true, QueryBuilderType = typeof(GatewayRmaDetailsQueryBuilder) },
                new FieldMetadata { Name = "shipping", IsComplex = true, QueryBuilderType = typeof(GatewayShippingDetailsQueryBuilder) },
                new FieldMetadata { Name = "state" },
                new FieldMetadata { Name = "stateTime", IsComplex = true },
                new FieldMetadata { Name = "suspension", IsComplex = true, QueryBuilderType = typeof(GatewaySuspensionDetailsQueryBuilder) },
                new FieldMetadata { Name = "termination", IsComplex = true, QueryBuilderType = typeof(GatewayTerminationDetailsQueryBuilder) }
            };

        protected override string TypeName { get { return "Gateway"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayQueryBuilder WithActive(GatewayActiveDetailsQueryBuilder gatewayActiveDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("active", alias, gatewayActiveDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptActive()
        {
            return ExceptField("active");
        }

        public GatewayQueryBuilder WithAssignment(GatewayAssignmentDetailsQueryBuilder gatewayAssignmentDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("assignment", alias, gatewayAssignmentDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptAssignment()
        {
            return ExceptField("assignment");
        }

        public GatewayQueryBuilder WithFirstBoot(GatewayFirstBootDetailsQueryBuilder gatewayFirstBootDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("firstBoot", alias, gatewayFirstBootDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptFirstBoot()
        {
            return ExceptField("firstBoot");
        }

        public GatewayQueryBuilder WithGatewayId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gatewayId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptGatewayId()
        {
            return ExceptField("gatewayId");
        }

        public GatewayQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public GatewayQueryBuilder WithProvisioning(GatewayProvisioningDetailsQueryBuilder gatewayProvisioningDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("provisioning", alias, gatewayProvisioningDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptProvisioning()
        {
            return ExceptField("provisioning");
        }

        public GatewayQueryBuilder WithRegistration(GatewayRegistrationDetailsQueryBuilder gatewayRegistrationDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("registration", alias, gatewayRegistrationDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptRegistration()
        {
            return ExceptField("registration");
        }

        public GatewayQueryBuilder WithRma(GatewayRmaDetailsQueryBuilder gatewayRmaDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rma", alias, gatewayRmaDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptRma()
        {
            return ExceptField("rma");
        }

        public GatewayQueryBuilder WithShipping(GatewayShippingDetailsQueryBuilder gatewayShippingDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("shipping", alias, gatewayShippingDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptShipping()
        {
            return ExceptField("shipping");
        }

        public GatewayQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public GatewayQueryBuilder WithStateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptStateTime()
        {
            return ExceptField("stateTime");
        }

        public GatewayQueryBuilder WithSuspension(GatewaySuspensionDetailsQueryBuilder gatewaySuspensionDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("suspension", alias, gatewaySuspensionDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptSuspension()
        {
            return ExceptField("suspension");
        }

        public GatewayQueryBuilder WithTermination(GatewayTerminationDetailsQueryBuilder gatewayTerminationDetailsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("termination", alias, gatewayTerminationDetailsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayQueryBuilder ExceptTermination()
        {
            return ExceptField("termination");
        }
    }

    public class GatewayActiveDetailsQueryBuilder : GraphQlQueryBuilder<GatewayActiveDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "lastSeenTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayActiveDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayActiveDetailsQueryBuilder WithLastSeenTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeenTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayActiveDetailsQueryBuilder ExceptLastSeenTime()
        {
            return ExceptField("lastSeenTime");
        }
    }

    public class GatewayAssignResponseQueryBuilder : GraphQlQueryBuilder<GatewayAssignResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GatewayAssignResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayAssignResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GatewayAssignmentDetailsQueryBuilder : GraphQlQueryBuilder<GatewayAssignmentDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "assignmentTime", IsComplex = true },
                new FieldMetadata { Name = "physicalPlaceId" },
                new FieldMetadata { Name = "preciseGeoLocation", IsComplex = true },
                new FieldMetadata { Name = "servesPlaceIds", IsComplex = true },
                new FieldMetadata { Name = "servesSystemTypes", IsComplex = true },
                new FieldMetadata { Name = "uniqueName" }
            };

        protected override string TypeName { get { return "GatewayAssignmentDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayAssignmentDetailsQueryBuilder WithAssignmentTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assignmentTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptAssignmentTime()
        {
            return ExceptField("assignmentTime");
        }

        public GatewayAssignmentDetailsQueryBuilder WithPhysicalPlaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalPlaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptPhysicalPlaceId()
        {
            return ExceptField("physicalPlaceId");
        }

        public GatewayAssignmentDetailsQueryBuilder WithPreciseGeoLocation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("preciseGeoLocation", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptPreciseGeoLocation()
        {
            return ExceptField("preciseGeoLocation");
        }

        public GatewayAssignmentDetailsQueryBuilder WithServesPlaceIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("servesPlaceIds", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptServesPlaceIds()
        {
            return ExceptField("servesPlaceIds");
        }

        public GatewayAssignmentDetailsQueryBuilder WithServesSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("servesSystemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptServesSystemTypes()
        {
            return ExceptField("servesSystemTypes");
        }

        public GatewayAssignmentDetailsQueryBuilder WithUniqueName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uniqueName", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayAssignmentDetailsQueryBuilder ExceptUniqueName()
        {
            return ExceptField("uniqueName");
        }
    }

    public class GatewayFilterQueryBuilder : GraphQlQueryBuilder<GatewayFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(GatewayFilterQueryBuilder) },
                new FieldMetadata { Name = "deviceId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "gatewayId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "iccid", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "imei", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "lanMac", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "mappedModel", IsComplex = true, QueryBuilderType = typeof(GatewayModelFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(GatewayFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(GatewayFilterQueryBuilder) },
                new FieldMetadata { Name = "physicalPlaceId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "serialNumber", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "servesPlaceIds", IsComplex = true, QueryBuilderType = typeof(StringArrayFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "servesSystemTypes", IsComplex = true, QueryBuilderType = typeof(GatewaySystemTypeFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(GatewayLifecycleStateFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "stateTime", IsComplex = true, QueryBuilderType = typeof(TimestampFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "uniqueName", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "GatewayFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayFilterQueryBuilder WithAnd(GatewayFilterQueryBuilder gatewayFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, gatewayFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public GatewayFilterQueryBuilder WithDeviceId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deviceId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptDeviceId()
        {
            return ExceptField("deviceId");
        }

        public GatewayFilterQueryBuilder WithGatewayId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gatewayId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptGatewayId()
        {
            return ExceptField("gatewayId");
        }

        public GatewayFilterQueryBuilder WithIccid(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("iccid", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptIccid()
        {
            return ExceptField("iccid");
        }

        public GatewayFilterQueryBuilder WithImei(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("imei", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptImei()
        {
            return ExceptField("imei");
        }

        public GatewayFilterQueryBuilder WithLanMac(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanMac", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptLanMac()
        {
            return ExceptField("lanMac");
        }

        public GatewayFilterQueryBuilder WithMappedModel(GatewayModelFilterExpressionQueryBuilder gatewayModelFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mappedModel", alias, gatewayModelFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptMappedModel()
        {
            return ExceptField("mappedModel");
        }

        public GatewayFilterQueryBuilder WithNot(GatewayFilterQueryBuilder gatewayFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, gatewayFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public GatewayFilterQueryBuilder WithOr(GatewayFilterQueryBuilder gatewayFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, gatewayFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public GatewayFilterQueryBuilder WithPhysicalPlaceId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("physicalPlaceId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptPhysicalPlaceId()
        {
            return ExceptField("physicalPlaceId");
        }

        public GatewayFilterQueryBuilder WithSerialNumber(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("serialNumber", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }

        public GatewayFilterQueryBuilder WithServesPlaceIds(StringArrayFilterExpressionQueryBuilder stringArrayFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("servesPlaceIds", alias, stringArrayFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptServesPlaceIds()
        {
            return ExceptField("servesPlaceIds");
        }

        public GatewayFilterQueryBuilder WithServesSystemTypes(GatewaySystemTypeFilterExpressionQueryBuilder gatewaySystemTypeFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("servesSystemTypes", alias, gatewaySystemTypeFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptServesSystemTypes()
        {
            return ExceptField("servesSystemTypes");
        }

        public GatewayFilterQueryBuilder WithState(GatewayLifecycleStateFilterExpressionQueryBuilder gatewayLifecycleStateFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("state", alias, gatewayLifecycleStateFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public GatewayFilterQueryBuilder WithStateTime(TimestampFilterExpressionQueryBuilder timestampFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stateTime", alias, timestampFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptStateTime()
        {
            return ExceptField("stateTime");
        }

        public GatewayFilterQueryBuilder WithUniqueName(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("uniqueName", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayFilterQueryBuilder ExceptUniqueName()
        {
            return ExceptField("uniqueName");
        }
    }

    public class GatewayFirstBootDetailsQueryBuilder : GraphQlQueryBuilder<GatewayFirstBootDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "bootTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayFirstBootDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayFirstBootDetailsQueryBuilder WithBootTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bootTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayFirstBootDetailsQueryBuilder ExceptBootTime()
        {
            return ExceptField("bootTime");
        }
    }

    public class GatewayGenerateContainerSiDsResponseQueryBuilder : GraphQlQueryBuilder<GatewayGenerateContainerSiDsResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "availableCertificateCn" },
                new FieldMetadata { Name = "signingCertificateCn" }
            };

        protected override string TypeName { get { return "GatewayGenerateContainerSIDsResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayGenerateContainerSiDsResponseQueryBuilder WithAvailableCertificateCn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("availableCertificateCn", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder ExceptAvailableCertificateCn()
        {
            return ExceptField("availableCertificateCn");
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder WithSigningCertificateCn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signingCertificateCn", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayGenerateContainerSiDsResponseQueryBuilder ExceptSigningCertificateCn()
        {
            return ExceptField("signingCertificateCn");
        }
    }

    public class GatewayLifecycleStateFilterExpressionQueryBuilder : GraphQlQueryBuilder<GatewayLifecycleStateFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayLifecycleStateFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayLifecycleStateFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayLifecycleStateFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public GatewayLifecycleStateFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayLifecycleStateFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class GatewayModelFilterExpressionQueryBuilder : GraphQlQueryBuilder<GatewayModelFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayModelFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayModelFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayModelFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public GatewayModelFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayModelFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class GatewayNoteQueryBuilder : GraphQlQueryBuilder<GatewayNoteQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "note" },
                new FieldMetadata { Name = "time", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayNote"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayNoteQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayNoteQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public GatewayNoteQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayNoteQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }
    }

    public class GatewayProvisioningDetailsQueryBuilder : GraphQlQueryBuilder<GatewayProvisioningDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "provisionTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayProvisioningDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayProvisioningDetailsQueryBuilder WithProvisionTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provisionTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayProvisioningDetailsQueryBuilder ExceptProvisionTime()
        {
            return ExceptField("provisionTime");
        }
    }

    public class GatewayRmaDetailsQueryBuilder : GraphQlQueryBuilder<GatewayRmaDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new FieldMetadata { Name = "reason" },
                new FieldMetadata { Name = "rmaTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayRMADetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRmaDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewayRmaDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewayRmaDetailsQueryBuilder WithRmaTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rmaTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRmaDetailsQueryBuilder ExceptRmaTime()
        {
            return ExceptField("rmaTime");
        }
    }

    public class GatewayRegisterContainerResponseQueryBuilder : GraphQlQueryBuilder<GatewayRegisterContainerResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "deviceId" },
                new FieldMetadata { Name = "gatewayId" }
            };

        protected override string TypeName { get { return "GatewayRegisterContainerResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRegisterContainerResponseQueryBuilder WithDeviceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deviceId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegisterContainerResponseQueryBuilder ExceptDeviceId()
        {
            return ExceptField("deviceId");
        }

        public GatewayRegisterContainerResponseQueryBuilder WithGatewayId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gatewayId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegisterContainerResponseQueryBuilder ExceptGatewayId()
        {
            return ExceptField("gatewayId");
        }
    }

    public class GatewayRegistrationDetailsQueryBuilder : GraphQlQueryBuilder<GatewayRegistrationDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "imei" },
                new FieldMetadata { Name = "lanMac" },
                new FieldMetadata { Name = "mappedModel" },
                new FieldMetadata { Name = "serialNumber" },
                new FieldMetadata { Name = "sim", IsComplex = true, QueryBuilderType = typeof(GatewaySimInfoQueryBuilder) }
            };

        protected override string TypeName { get { return "GatewayRegistrationDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayRegistrationDetailsQueryBuilder WithImei(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imei", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptImei()
        {
            return ExceptField("imei");
        }

        public GatewayRegistrationDetailsQueryBuilder WithLanMac(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lanMac", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptLanMac()
        {
            return ExceptField("lanMac");
        }

        public GatewayRegistrationDetailsQueryBuilder WithMappedModel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedModel", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptMappedModel()
        {
            return ExceptField("mappedModel");
        }

        public GatewayRegistrationDetailsQueryBuilder WithSerialNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serialNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptSerialNumber()
        {
            return ExceptField("serialNumber");
        }

        public GatewayRegistrationDetailsQueryBuilder WithSim(GatewaySimInfoQueryBuilder gatewaySimInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sim", alias, gatewaySimInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayRegistrationDetailsQueryBuilder ExceptSim()
        {
            return ExceptField("sim");
        }
    }

    public class GatewaySimCertificateQueryBuilder : GraphQlQueryBuilder<GatewaySimCertificateQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "pem" },
                new FieldMetadata { Name = "subjectKeyId" }
            };

        protected override string TypeName { get { return "GatewaySIMCertificate"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySimCertificateQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GatewaySimCertificateQueryBuilder WithPem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pem", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptPem()
        {
            return ExceptField("pem");
        }

        public GatewaySimCertificateQueryBuilder WithSubjectKeyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subjectKeyId", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimCertificateQueryBuilder ExceptSubjectKeyId()
        {
            return ExceptField("subjectKeyId");
        }
    }

    public class GatewaySimInfoQueryBuilder : GraphQlQueryBuilder<GatewaySimInfoQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "availableCertificate", IsComplex = true, QueryBuilderType = typeof(GatewaySimCertificateQueryBuilder) },
                new FieldMetadata { Name = "iccid" },
                new FieldMetadata { Name = "signingCertificate", IsComplex = true, QueryBuilderType = typeof(GatewaySimCertificateQueryBuilder) },
                new FieldMetadata { Name = "simType" }
            };

        protected override string TypeName { get { return "GatewaySIMInfo"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySimInfoQueryBuilder WithAvailableCertificate(GatewaySimCertificateQueryBuilder gatewaySimCertificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("availableCertificate", alias, gatewaySimCertificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptAvailableCertificate()
        {
            return ExceptField("availableCertificate");
        }

        public GatewaySimInfoQueryBuilder WithIccid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("iccid", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptIccid()
        {
            return ExceptField("iccid");
        }

        public GatewaySimInfoQueryBuilder WithSigningCertificate(GatewaySimCertificateQueryBuilder gatewaySimCertificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signingCertificate", alias, gatewaySimCertificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptSigningCertificate()
        {
            return ExceptField("signingCertificate");
        }

        public GatewaySimInfoQueryBuilder WithSimType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("simType", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySimInfoQueryBuilder ExceptSimType()
        {
            return ExceptField("simType");
        }
    }

    public class GatewayShippingDetailsQueryBuilder : GraphQlQueryBuilder<GatewayShippingDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "courier" },
                new FieldMetadata { Name = "shipTime", IsComplex = true },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "statusTime", IsComplex = true },
                new FieldMetadata { Name = "trackingNumber" }
            };

        protected override string TypeName { get { return "GatewayShippingDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayShippingDetailsQueryBuilder WithCourier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("courier", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptCourier()
        {
            return ExceptField("courier");
        }

        public GatewayShippingDetailsQueryBuilder WithShipTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shipTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptShipTime()
        {
            return ExceptField("shipTime");
        }

        public GatewayShippingDetailsQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public GatewayShippingDetailsQueryBuilder WithStatusTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptStatusTime()
        {
            return ExceptField("statusTime");
        }

        public GatewayShippingDetailsQueryBuilder WithTrackingNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackingNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayShippingDetailsQueryBuilder ExceptTrackingNumber()
        {
            return ExceptField("trackingNumber");
        }
    }

    public class GatewaySuspendResponseQueryBuilder : GraphQlQueryBuilder<GatewaySuspendResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GatewaySuspendResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySuspendResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspendResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GatewaySuspensionDetailsQueryBuilder : GraphQlQueryBuilder<GatewaySuspensionDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new FieldMetadata { Name = "reason" },
                new FieldMetadata { Name = "suspensionTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewaySuspensionDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySuspensionDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewaySuspensionDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewaySuspensionDetailsQueryBuilder WithSuspensionTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("suspensionTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySuspensionDetailsQueryBuilder ExceptSuspensionTime()
        {
            return ExceptField("suspensionTime");
        }
    }

    public class GatewaySystemTypeFilterExpressionQueryBuilder : GraphQlQueryBuilder<GatewaySystemTypeFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewaySystemTypeFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewaySystemTypeFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySystemTypeFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public GatewaySystemTypeFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewaySystemTypeFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class GatewayTerminationDetailsQueryBuilder : GraphQlQueryBuilder<GatewayTerminationDetailsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "notesCustomer", IsComplex = true, QueryBuilderType = typeof(GatewayNoteQueryBuilder) },
                new FieldMetadata { Name = "reason" },
                new FieldMetadata { Name = "terminationTime", IsComplex = true }
            };

        protected override string TypeName { get { return "GatewayTerminationDetails"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GatewayTerminationDetailsQueryBuilder WithNotesCustomer(GatewayNoteQueryBuilder gatewayNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("notesCustomer", alias, gatewayNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptNotesCustomer()
        {
            return ExceptField("notesCustomer");
        }

        public GatewayTerminationDetailsQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GatewayTerminationDetailsQueryBuilder WithTerminationTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("terminationTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GatewayTerminationDetailsQueryBuilder ExceptTerminationTime()
        {
            return ExceptField("terminationTime");
        }
    }

    public class GenericPlaceQueryBuilder : GraphQlQueryBuilder<GenericPlaceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "GenericPlace"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GenericPlaceQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public GenericPlaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public GenericPlaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public GenericPlaceQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public GenericPlaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public GenericPlaceQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public GenericPlaceQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public GenericPlaceQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public GenericPlaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public GenericPlaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public GenericPlaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GenericPlaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public GenericPlaceQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public GenericPlaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public GenericPlaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GenericPlaceQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public GenericPlaceQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public GenericPlaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GenericPlaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public GenericPlaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public GenericPlaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class GeoPointQueryBuilder : GraphQlQueryBuilder<GeoPointQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "coordinates", IsComplex = true },
                new FieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "GeoPoint"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GeoPointQueryBuilder WithCoordinates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coordinates", alias, new GraphQlDirective[] { include, skip });
        }

        public GeoPointQueryBuilder ExceptCoordinates()
        {
            return ExceptField("coordinates");
        }

        public GeoPointQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public GeoPointQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class GrantQueryBuilder : GraphQlQueryBuilder<GrantQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "approvalTime", IsComplex = true },
                new FieldMetadata { Name = "grantedPlacesAndTypes", IsComplex = true, QueryBuilderType = typeof(GrantPlacesAndTypesQueryBuilder) },
                new FieldMetadata { Name = "granteeUserId" },
                new FieldMetadata { Name = "grantorNotes", IsComplex = true, QueryBuilderType = typeof(GrantNoteQueryBuilder) },
                new FieldMetadata { Name = "grantorUserId" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "requestTime", IsComplex = true },
                new FieldMetadata { Name = "requests", IsComplex = true, QueryBuilderType = typeof(GrantRequestQueryBuilder) },
                new FieldMetadata { Name = "state" },
                new FieldMetadata { Name = "updateTime", IsComplex = true }
            };

        protected override string TypeName { get { return "Grant"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantQueryBuilder WithApprovalTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("approvalTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptApprovalTime()
        {
            return ExceptField("approvalTime");
        }

        public GrantQueryBuilder WithGrantedPlacesAndTypes(GrantPlacesAndTypesQueryBuilder grantPlacesAndTypesQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantedPlacesAndTypes", alias, grantPlacesAndTypesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantedPlacesAndTypes()
        {
            return ExceptField("grantedPlacesAndTypes");
        }

        public GrantQueryBuilder WithGranteeUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("granteeUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGranteeUserId()
        {
            return ExceptField("granteeUserId");
        }

        public GrantQueryBuilder WithGrantorNotes(GrantNoteQueryBuilder grantNoteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantorNotes", alias, grantNoteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantorNotes()
        {
            return ExceptField("grantorNotes");
        }

        public GrantQueryBuilder WithGrantorUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantorUserId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptGrantorUserId()
        {
            return ExceptField("grantorUserId");
        }

        public GrantQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GrantQueryBuilder WithRequestTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptRequestTime()
        {
            return ExceptField("requestTime");
        }

        public GrantQueryBuilder WithRequests(GrantRequestQueryBuilder grantRequestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("requests", alias, grantRequestQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptRequests()
        {
            return ExceptField("requests");
        }

        public GrantQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public GrantQueryBuilder WithUpdateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantQueryBuilder ExceptUpdateTime()
        {
            return ExceptField("updateTime");
        }
    }

    public class GrantCreateResponseQueryBuilder : GraphQlQueryBuilder<GrantCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "id" }
            };

        protected override string TypeName { get { return "GrantCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantCreateResponseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantCreateResponseQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class GrantDeleteResponseQueryBuilder : GraphQlQueryBuilder<GrantDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GrantDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class GrantFilterQueryBuilder : GraphQlQueryBuilder<GrantFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(GrantFilterQueryBuilder) },
                new FieldMetadata { Name = "grantedIds", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "grantedTypes", IsComplex = true, QueryBuilderType = typeof(SystemTypeFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "granteeUserId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "grantorUserId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "id", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(GrantFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(GrantFilterQueryBuilder) },
                new FieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(GrantGrantStateFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "GrantFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantFilterQueryBuilder WithAnd(GrantFilterQueryBuilder grantFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, grantFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public GrantFilterQueryBuilder WithGrantedIds(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantedIds", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptGrantedIds()
        {
            return ExceptField("grantedIds");
        }

        public GrantFilterQueryBuilder WithGrantedTypes(SystemTypeFilterExpressionQueryBuilder systemTypeFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantedTypes", alias, systemTypeFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptGrantedTypes()
        {
            return ExceptField("grantedTypes");
        }

        public GrantFilterQueryBuilder WithGranteeUserId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("granteeUserId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptGranteeUserId()
        {
            return ExceptField("granteeUserId");
        }

        public GrantFilterQueryBuilder WithGrantorUserId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grantorUserId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptGrantorUserId()
        {
            return ExceptField("grantorUserId");
        }

        public GrantFilterQueryBuilder WithId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("id", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GrantFilterQueryBuilder WithNot(GrantFilterQueryBuilder grantFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, grantFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public GrantFilterQueryBuilder WithOr(GrantFilterQueryBuilder grantFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, grantFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public GrantFilterQueryBuilder WithState(GrantGrantStateFilterExpressionQueryBuilder grantGrantStateFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("state", alias, grantGrantStateFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrantFilterQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }
    }

    public class GrantGrantStateFilterExpressionQueryBuilder : GraphQlQueryBuilder<GrantGrantStateFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantGrantStateFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantGrantStateFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantGrantStateFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public GrantGrantStateFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantGrantStateFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class GrantNoteQueryBuilder : GraphQlQueryBuilder<GrantNoteQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "note" },
                new FieldMetadata { Name = "time", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantNote"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantNoteQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("note", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantNoteQueryBuilder ExceptNote()
        {
            return ExceptField("note");
        }

        public GrantNoteQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantNoteQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }
    }

    public class GrantPlacesAndTypesQueryBuilder : GraphQlQueryBuilder<GrantPlacesAndTypesQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "grantedIds", IsComplex = true },
                new FieldMetadata { Name = "grantedSystemTypes", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantPlacesAndTypes"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantPlacesAndTypesQueryBuilder WithGrantedIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantedIds", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantPlacesAndTypesQueryBuilder ExceptGrantedIds()
        {
            return ExceptField("grantedIds");
        }

        public GrantPlacesAndTypesQueryBuilder WithGrantedSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("grantedSystemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantPlacesAndTypesQueryBuilder ExceptGrantedSystemTypes()
        {
            return ExceptField("grantedSystemTypes");
        }
    }

    public class GrantRequestQueryBuilder : GraphQlQueryBuilder<GrantRequestQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "requestNote" },
                new FieldMetadata { Name = "requestType" },
                new FieldMetadata { Name = "systemTypes", IsComplex = true }
            };

        protected override string TypeName { get { return "GrantRequest"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantRequestQueryBuilder WithRequestNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestNote", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptRequestNote()
        {
            return ExceptField("requestNote");
        }

        public GrantRequestQueryBuilder WithRequestType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requestType", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptRequestType()
        {
            return ExceptField("requestType");
        }

        public GrantRequestQueryBuilder WithSystemTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantRequestQueryBuilder ExceptSystemTypes()
        {
            return ExceptField("systemTypes");
        }
    }

    public class GrantUpdateResponseQueryBuilder : GraphQlQueryBuilder<GrantUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "GrantUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public GrantUpdateResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public GrantUpdateResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class IdFilterExpressionQueryBuilder : GraphQlQueryBuilder<IdFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "IDFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IdFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public IdFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public IdFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public IdFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class IpAllowlistMatchQueryBuilder : GraphQlQueryBuilder<IpAllowlistMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "allowedIps", IsComplex = true }
            };

        protected override string TypeName { get { return "IPAllowlistMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IpAllowlistMatchQueryBuilder WithAllowedIps(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allowedIps", alias, new GraphQlDirective[] { include, skip });
        }

        public IpAllowlistMatchQueryBuilder ExceptAllowedIps()
        {
            return ExceptField("allowedIps");
        }
    }

    public class InviteQueryBuilder : GraphQlQueryBuilder<InviteQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "email" },
                new FieldMetadata { Name = "expiration", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "roles", IsComplex = true },
                new FieldMetadata { Name = "status" }
            };

        protected override string TypeName { get { return "Invite"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public InviteQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public InviteQueryBuilder WithExpiration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expiration", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptExpiration()
        {
            return ExceptField("expiration");
        }

        public InviteQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public InviteQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public InviteQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public InviteQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }
    }

    public class InviteCreateResponseQueryBuilder : GraphQlQueryBuilder<InviteCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "invite", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) }
            };

        protected override string TypeName { get { return "InviteCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteCreateResponseQueryBuilder WithInvite(InviteQueryBuilder inviteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("invite", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteCreateResponseQueryBuilder ExceptInvite()
        {
            return ExceptField("invite");
        }
    }

    public class InviteDeleteResponseQueryBuilder : GraphQlQueryBuilder<InviteDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "InviteDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class InviteFilterQueryBuilder : GraphQlQueryBuilder<InviteFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(InviteFilterQueryBuilder) },
                new FieldMetadata { Name = "email", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "inviteId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(InviteFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(InviteFilterQueryBuilder) },
                new FieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(InviteInviteStatusFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "InviteFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteFilterQueryBuilder WithAnd(InviteFilterQueryBuilder inviteFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, inviteFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public InviteFilterQueryBuilder WithEmail(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("email", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public InviteFilterQueryBuilder WithInviteId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("inviteId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptInviteId()
        {
            return ExceptField("inviteId");
        }

        public InviteFilterQueryBuilder WithNot(InviteFilterQueryBuilder inviteFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, inviteFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public InviteFilterQueryBuilder WithOr(InviteFilterQueryBuilder inviteFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, inviteFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public InviteFilterQueryBuilder WithState(InviteInviteStatusFilterExpressionQueryBuilder inviteInviteStatusFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("state", alias, inviteInviteStatusFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteFilterQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }
    }

    public class InviteInviteStatusFilterExpressionQueryBuilder : GraphQlQueryBuilder<InviteInviteStatusFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "InviteInviteStatusFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteInviteStatusFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteInviteStatusFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public InviteInviteStatusFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public InviteInviteStatusFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class InviteUpdateResponseQueryBuilder : GraphQlQueryBuilder<InviteUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "invite", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) }
            };

        protected override string TypeName { get { return "InviteUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public InviteUpdateResponseQueryBuilder WithInvite(InviteQueryBuilder inviteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("invite", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InviteUpdateResponseQueryBuilder ExceptInvite()
        {
            return ExceptField("invite");
        }
    }

    public class IsPointOfUnionQueryBuilder : GraphQlQueryBuilder<IsPointOfUnionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "IsPointOfUnion"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public IsPointOfUnionQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IsPointOfUnionQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MtlsMatchQueryBuilder : GraphQlQueryBuilder<MtlsMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "clientCert", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new FieldMetadata { Name = "issuerCert", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new FieldMetadata { Name = "mappedCert" },
                new FieldMetadata { Name = "matchCert", IsComplex = true, QueryBuilderType = typeof(CertMatchQueryBuilder) }
            };

        protected override string TypeName { get { return "MTLSMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MtlsMatchQueryBuilder WithClientCert(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("clientCert", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptClientCert()
        {
            return ExceptField("clientCert");
        }

        public MtlsMatchQueryBuilder WithIssuerCert(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("issuerCert", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptIssuerCert()
        {
            return ExceptField("issuerCert");
        }

        public MtlsMatchQueryBuilder WithMappedCert(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedCert", alias, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptMappedCert()
        {
            return ExceptField("mappedCert");
        }

        public MtlsMatchQueryBuilder WithMatchCert(CertMatchQueryBuilder certMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchCert", alias, certMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MtlsMatchQueryBuilder ExceptMatchCert()
        {
            return ExceptField("matchCert");
        }
    }

    public class MatchQueryBuilder : GraphQlQueryBuilder<MatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "ipAllowlist", IsComplex = true, QueryBuilderType = typeof(IpAllowlistMatchQueryBuilder) },
                new FieldMetadata { Name = "mtls", IsComplex = true, QueryBuilderType = typeof(MtlsMatchQueryBuilder) },
                new FieldMetadata { Name = "noAuth" },
                new FieldMetadata { Name = "regex", IsComplex = true, QueryBuilderType = typeof(RegexMatchQueryBuilder) },
                new FieldMetadata { Name = "signature", IsComplex = true, QueryBuilderType = typeof(SignatureMatchQueryBuilder) },
                new FieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(ValueMatchQueryBuilder) }
            };

        protected override string TypeName { get { return "Match"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MatchQueryBuilder WithIpAllowlist(IpAllowlistMatchQueryBuilder ipAllowlistMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ipAllowlist", alias, ipAllowlistMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptIpAllowlist()
        {
            return ExceptField("ipAllowlist");
        }

        public MatchQueryBuilder WithMtls(MtlsMatchQueryBuilder mtlsMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mtls", alias, mtlsMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptMtls()
        {
            return ExceptField("mtls");
        }

        public MatchQueryBuilder WithNoAuth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("noAuth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptNoAuth()
        {
            return ExceptField("noAuth");
        }

        public MatchQueryBuilder WithRegex(RegexMatchQueryBuilder regexMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("regex", alias, regexMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptRegex()
        {
            return ExceptField("regex");
        }

        public MatchQueryBuilder WithSignature(SignatureMatchQueryBuilder signatureMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signature", alias, signatureMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptSignature()
        {
            return ExceptField("signature");
        }

        public MatchQueryBuilder WithValue(ValueMatchQueryBuilder valueMatchQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, valueMatchQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MetadataEntryQueryBuilder : GraphQlQueryBuilder<MetadataEntryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "key" },
                new FieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "MetadataEntry"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MetadataEntryQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataEntryQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MetadataEntryQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MetadataEntryQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "assignGateway", IsComplex = true, QueryBuilderType = typeof(GatewayAssignResponseQueryBuilder) },
                new FieldMetadata { Name = "assignRole", IsComplex = true, QueryBuilderType = typeof(UserAssignRoleResponseQueryBuilder) },
                new FieldMetadata { Name = "createBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createFloor", IsComplex = true, QueryBuilderType = typeof(FloorCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createGrant", IsComplex = true, QueryBuilderType = typeof(GrantCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createInvite", IsComplex = true, QueryBuilderType = typeof(InviteCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createPersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createRequest", IsComplex = true, QueryBuilderType = typeof(ConnectorRequestsCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createSite", IsComplex = true, QueryBuilderType = typeof(SiteCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createSpace", IsComplex = true, QueryBuilderType = typeof(SpaceCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createUser", IsComplex = true, QueryBuilderType = typeof(UserCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "createWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCreateResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteFloor", IsComplex = true, QueryBuilderType = typeof(FloorDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteGrant", IsComplex = true, QueryBuilderType = typeof(GrantDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteInvite", IsComplex = true, QueryBuilderType = typeof(InviteDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deletePersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteSite", IsComplex = true, QueryBuilderType = typeof(SiteDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteSpace", IsComplex = true, QueryBuilderType = typeof(SpaceDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteUser", IsComplex = true, QueryBuilderType = typeof(UserDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetDeleteResponseQueryBuilder) },
                new FieldMetadata { Name = "generateContainerSIDs", IsComplex = true, QueryBuilderType = typeof(GatewayGenerateContainerSiDsResponseQueryBuilder) },
                new FieldMetadata { Name = "getOrgMembershipsUser", IsComplex = true, QueryBuilderType = typeof(UserGetOrgMembershipsResponseQueryBuilder) },
                new FieldMetadata { Name = "registerGatewayContainer", IsComplex = true, QueryBuilderType = typeof(GatewayRegisterContainerResponseQueryBuilder) },
                new FieldMetadata { Name = "removeOrgMembershipUser", IsComplex = true, QueryBuilderType = typeof(UserRemoveOrgMembershipResponseQueryBuilder) },
                new FieldMetadata { Name = "removeRole", IsComplex = true, QueryBuilderType = typeof(UserRemoveRoleResponseQueryBuilder) },
                new FieldMetadata { Name = "suspendGateway", IsComplex = true, QueryBuilderType = typeof(GatewaySuspendResponseQueryBuilder) },
                new FieldMetadata { Name = "updateBuilding", IsComplex = true, QueryBuilderType = typeof(BuildingUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateConnectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateFloor", IsComplex = true, QueryBuilderType = typeof(FloorUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateGrant", IsComplex = true, QueryBuilderType = typeof(GrantUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateInvite", IsComplex = true, QueryBuilderType = typeof(InviteUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateOrganization", IsComplex = true, QueryBuilderType = typeof(OrgUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updatePersonalAccessToken", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateSite", IsComplex = true, QueryBuilderType = typeof(SiteUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateSpace", IsComplex = true, QueryBuilderType = typeof(SpaceUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateUser", IsComplex = true, QueryBuilderType = typeof(UserUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "updateWebhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetUpdateResponseQueryBuilder) },
                new FieldMetadata { Name = "upsertConfigConnector", IsComplex = true, QueryBuilderType = typeof(ConnectorUpsertConfigResponseQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithAssignGateway(GatewayAssignResponseQueryBuilder gatewayAssignResponseQueryBuilder, QueryBuilderParameter<GatewayAssignRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("assignGateway", alias, gatewayAssignResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptAssignGateway()
        {
            return ExceptField("assignGateway");
        }

        public MutationQueryBuilder WithAssignRole(UserAssignRoleResponseQueryBuilder userAssignRoleResponseQueryBuilder, QueryBuilderParameter<UserAssignRoleRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("assignRole", alias, userAssignRoleResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptAssignRole()
        {
            return ExceptField("assignRole");
        }

        public MutationQueryBuilder WithCreateBuilding(BuildingCreateResponseQueryBuilder buildingCreateResponseQueryBuilder, QueryBuilderParameter<BuildingCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createBuilding", alias, buildingCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateBuilding()
        {
            return ExceptField("createBuilding");
        }

        public MutationQueryBuilder WithCreateConnector(ConnectorCreateResponseQueryBuilder connectorCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createConnector", alias, connectorCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateConnector()
        {
            return ExceptField("createConnector");
        }

        public MutationQueryBuilder WithCreateConnectorAuth(ConnectorAuthCreateResponseQueryBuilder connectorAuthCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createConnectorAuth", alias, connectorAuthCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateConnectorAuth()
        {
            return ExceptField("createConnectorAuth");
        }

        public MutationQueryBuilder WithCreateFloor(FloorCreateResponseQueryBuilder floorCreateResponseQueryBuilder, QueryBuilderParameter<FloorCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createFloor", alias, floorCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateFloor()
        {
            return ExceptField("createFloor");
        }

        public MutationQueryBuilder WithCreateGrant(GrantCreateResponseQueryBuilder grantCreateResponseQueryBuilder, QueryBuilderParameter<GrantCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createGrant", alias, grantCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateGrant()
        {
            return ExceptField("createGrant");
        }

        public MutationQueryBuilder WithCreateInvite(InviteCreateResponseQueryBuilder inviteCreateResponseQueryBuilder, QueryBuilderParameter<InviteCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createInvite", alias, inviteCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateInvite()
        {
            return ExceptField("createInvite");
        }

        public MutationQueryBuilder WithCreatePersonalAccessToken(PersonalAccessTokenCreateResponseQueryBuilder personalAccessTokenCreateResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createPersonalAccessToken", alias, personalAccessTokenCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreatePersonalAccessToken()
        {
            return ExceptField("createPersonalAccessToken");
        }

        public MutationQueryBuilder WithCreateRequest(ConnectorRequestsCreateResponseQueryBuilder connectorRequestsCreateResponseQueryBuilder, QueryBuilderParameter<ConnectorRequestsCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createRequest", alias, connectorRequestsCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateRequest()
        {
            return ExceptField("createRequest");
        }

        public MutationQueryBuilder WithCreateSite(SiteCreateResponseQueryBuilder siteCreateResponseQueryBuilder, QueryBuilderParameter<SiteCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createSite", alias, siteCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSite()
        {
            return ExceptField("createSite");
        }

        public MutationQueryBuilder WithCreateSpace(SpaceCreateResponseQueryBuilder spaceCreateResponseQueryBuilder, QueryBuilderParameter<SpaceCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createSpace", alias, spaceCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSpace()
        {
            return ExceptField("createSpace");
        }

        public MutationQueryBuilder WithCreateUser(UserCreateResponseQueryBuilder userCreateResponseQueryBuilder, QueryBuilderParameter<UserCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createUser", alias, userCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateUser()
        {
            return ExceptField("createUser");
        }

        public MutationQueryBuilder WithCreateWebhookTarget(WebhookTargetCreateResponseQueryBuilder webhookTargetCreateResponseQueryBuilder, QueryBuilderParameter<WebhookTargetCreateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("createWebhookTarget", alias, webhookTargetCreateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateWebhookTarget()
        {
            return ExceptField("createWebhookTarget");
        }

        public MutationQueryBuilder WithDeleteBuilding(BuildingDeleteResponseQueryBuilder buildingDeleteResponseQueryBuilder, QueryBuilderParameter<BuildingDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteBuilding", alias, buildingDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteBuilding()
        {
            return ExceptField("deleteBuilding");
        }

        public MutationQueryBuilder WithDeleteConnector(ConnectorDeleteResponseQueryBuilder connectorDeleteResponseQueryBuilder, QueryBuilderParameter<ConnectorDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteConnector", alias, connectorDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteConnector()
        {
            return ExceptField("deleteConnector");
        }

        public MutationQueryBuilder WithDeleteConnectorAuth(ConnectorAuthDeleteResponseQueryBuilder connectorAuthDeleteResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteConnectorAuth", alias, connectorAuthDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteConnectorAuth()
        {
            return ExceptField("deleteConnectorAuth");
        }

        public MutationQueryBuilder WithDeleteFloor(FloorDeleteResponseQueryBuilder floorDeleteResponseQueryBuilder, QueryBuilderParameter<FloorDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteFloor", alias, floorDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteFloor()
        {
            return ExceptField("deleteFloor");
        }

        public MutationQueryBuilder WithDeleteGrant(GrantDeleteResponseQueryBuilder grantDeleteResponseQueryBuilder, QueryBuilderParameter<GrantDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteGrant", alias, grantDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteGrant()
        {
            return ExceptField("deleteGrant");
        }

        public MutationQueryBuilder WithDeleteInvite(InviteDeleteResponseQueryBuilder inviteDeleteResponseQueryBuilder, QueryBuilderParameter<InviteDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteInvite", alias, inviteDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteInvite()
        {
            return ExceptField("deleteInvite");
        }

        public MutationQueryBuilder WithDeletePersonalAccessToken(PersonalAccessTokenDeleteResponseQueryBuilder personalAccessTokenDeleteResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deletePersonalAccessToken", alias, personalAccessTokenDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeletePersonalAccessToken()
        {
            return ExceptField("deletePersonalAccessToken");
        }

        public MutationQueryBuilder WithDeleteSite(SiteDeleteResponseQueryBuilder siteDeleteResponseQueryBuilder, QueryBuilderParameter<SiteDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteSite", alias, siteDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSite()
        {
            return ExceptField("deleteSite");
        }

        public MutationQueryBuilder WithDeleteSpace(SpaceDeleteResponseQueryBuilder spaceDeleteResponseQueryBuilder, QueryBuilderParameter<SpaceDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteSpace", alias, spaceDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSpace()
        {
            return ExceptField("deleteSpace");
        }

        public MutationQueryBuilder WithDeleteUser(UserDeleteResponseQueryBuilder userDeleteResponseQueryBuilder, QueryBuilderParameter<UserDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteUser", alias, userDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteUser()
        {
            return ExceptField("deleteUser");
        }

        public MutationQueryBuilder WithDeleteWebhookTarget(WebhookTargetDeleteResponseQueryBuilder webhookTargetDeleteResponseQueryBuilder, QueryBuilderParameter<WebhookTargetDeleteRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("deleteWebhookTarget", alias, webhookTargetDeleteResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteWebhookTarget()
        {
            return ExceptField("deleteWebhookTarget");
        }

        public MutationQueryBuilder WithGenerateContainerSiDs(GatewayGenerateContainerSiDsResponseQueryBuilder gatewayGenerateContainerSiDsResponseQueryBuilder, QueryBuilderParameter<GatewayGenerateContainerSiDsRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("generateContainerSIDs", alias, gatewayGenerateContainerSiDsResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptGenerateContainerSiDs()
        {
            return ExceptField("generateContainerSIDs");
        }

        public MutationQueryBuilder WithGetOrgMembershipsUser(UserGetOrgMembershipsResponseQueryBuilder userGetOrgMembershipsResponseQueryBuilder, QueryBuilderParameter<UserGetOrgMembershipsRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("getOrgMembershipsUser", alias, userGetOrgMembershipsResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptGetOrgMembershipsUser()
        {
            return ExceptField("getOrgMembershipsUser");
        }

        public MutationQueryBuilder WithRegisterGatewayContainer(GatewayRegisterContainerResponseQueryBuilder gatewayRegisterContainerResponseQueryBuilder, QueryBuilderParameter<GatewayRegisterContainerRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("registerGatewayContainer", alias, gatewayRegisterContainerResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRegisterGatewayContainer()
        {
            return ExceptField("registerGatewayContainer");
        }

        public MutationQueryBuilder WithRemoveOrgMembershipUser(UserRemoveOrgMembershipResponseQueryBuilder userRemoveOrgMembershipResponseQueryBuilder, QueryBuilderParameter<UserRemoveOrgMembershipRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("removeOrgMembershipUser", alias, userRemoveOrgMembershipResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRemoveOrgMembershipUser()
        {
            return ExceptField("removeOrgMembershipUser");
        }

        public MutationQueryBuilder WithRemoveRole(UserRemoveRoleResponseQueryBuilder userRemoveRoleResponseQueryBuilder, QueryBuilderParameter<UserRemoveRoleRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("removeRole", alias, userRemoveRoleResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRemoveRole()
        {
            return ExceptField("removeRole");
        }

        public MutationQueryBuilder WithSuspendGateway(GatewaySuspendResponseQueryBuilder gatewaySuspendResponseQueryBuilder, QueryBuilderParameter<GatewaySuspendRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("suspendGateway", alias, gatewaySuspendResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSuspendGateway()
        {
            return ExceptField("suspendGateway");
        }

        public MutationQueryBuilder WithUpdateBuilding(BuildingUpdateResponseQueryBuilder buildingUpdateResponseQueryBuilder, QueryBuilderParameter<BuildingUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateBuilding", alias, buildingUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateBuilding()
        {
            return ExceptField("updateBuilding");
        }

        public MutationQueryBuilder WithUpdateConnector(ConnectorUpdateResponseQueryBuilder connectorUpdateResponseQueryBuilder, QueryBuilderParameter<ConnectorUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateConnector", alias, connectorUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateConnector()
        {
            return ExceptField("updateConnector");
        }

        public MutationQueryBuilder WithUpdateConnectorAuth(ConnectorAuthUpdateResponseQueryBuilder connectorAuthUpdateResponseQueryBuilder, QueryBuilderParameter<ConnectorAuthUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateConnectorAuth", alias, connectorAuthUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateConnectorAuth()
        {
            return ExceptField("updateConnectorAuth");
        }

        public MutationQueryBuilder WithUpdateFloor(FloorUpdateResponseQueryBuilder floorUpdateResponseQueryBuilder, QueryBuilderParameter<FloorUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateFloor", alias, floorUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateFloor()
        {
            return ExceptField("updateFloor");
        }

        public MutationQueryBuilder WithUpdateGrant(GrantUpdateResponseQueryBuilder grantUpdateResponseQueryBuilder, QueryBuilderParameter<GrantUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateGrant", alias, grantUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateGrant()
        {
            return ExceptField("updateGrant");
        }

        public MutationQueryBuilder WithUpdateInvite(InviteUpdateResponseQueryBuilder inviteUpdateResponseQueryBuilder, QueryBuilderParameter<InviteUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateInvite", alias, inviteUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateInvite()
        {
            return ExceptField("updateInvite");
        }

        public MutationQueryBuilder WithUpdateOrganization(OrgUpdateResponseQueryBuilder orgUpdateResponseQueryBuilder, QueryBuilderParameter<OrgUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateOrganization", alias, orgUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOrganization()
        {
            return ExceptField("updateOrganization");
        }

        public MutationQueryBuilder WithUpdatePersonalAccessToken(PersonalAccessTokenUpdateResponseQueryBuilder personalAccessTokenUpdateResponseQueryBuilder, QueryBuilderParameter<PersonalAccessTokenUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updatePersonalAccessToken", alias, personalAccessTokenUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePersonalAccessToken()
        {
            return ExceptField("updatePersonalAccessToken");
        }

        public MutationQueryBuilder WithUpdateSite(SiteUpdateResponseQueryBuilder siteUpdateResponseQueryBuilder, QueryBuilderParameter<SiteUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateSite", alias, siteUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSite()
        {
            return ExceptField("updateSite");
        }

        public MutationQueryBuilder WithUpdateSpace(SpaceUpdateResponseQueryBuilder spaceUpdateResponseQueryBuilder, QueryBuilderParameter<SpaceUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateSpace", alias, spaceUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSpace()
        {
            return ExceptField("updateSpace");
        }

        public MutationQueryBuilder WithUpdateUser(UserUpdateResponseQueryBuilder userUpdateResponseQueryBuilder, QueryBuilderParameter<UserUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateUser", alias, userUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUser()
        {
            return ExceptField("updateUser");
        }

        public MutationQueryBuilder WithUpdateWebhookTarget(WebhookTargetUpdateResponseQueryBuilder webhookTargetUpdateResponseQueryBuilder, QueryBuilderParameter<WebhookTargetUpdateRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("updateWebhookTarget", alias, webhookTargetUpdateResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateWebhookTarget()
        {
            return ExceptField("updateWebhookTarget");
        }

        public MutationQueryBuilder WithUpsertConfigConnector(ConnectorUpsertConfigResponseQueryBuilder connectorUpsertConfigResponseQueryBuilder, QueryBuilderParameter<ConnectorUpsertConfigRequestInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input });

            return WithObjectField("upsertConfigConnector", alias, connectorUpsertConfigResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpsertConfigConnector()
        {
            return ExceptField("upsertConfigConnector");
        }
    }

    public class OneTimePriceItemQueryBuilder : GraphQlQueryBuilder<OneTimePriceItemQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "priceId" },
                new FieldMetadata { Name = "tier", IsComplex = true, QueryBuilderType = typeof(TierQueryBuilder) }
            };

        protected override string TypeName { get { return "OneTimePriceItem"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OneTimePriceItemQueryBuilder WithPriceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priceId", alias, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemQueryBuilder ExceptPriceId()
        {
            return ExceptField("priceId");
        }

        public OneTimePriceItemQueryBuilder WithTier(TierQueryBuilder tierQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tier", alias, tierQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemQueryBuilder ExceptTier()
        {
            return ExceptField("tier");
        }
    }

    public class OneTimePriceItemsQueryBuilder : GraphQlQueryBuilder<OneTimePriceItemsQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(OneTimePriceItemQueryBuilder) }
            };

        protected override string TypeName { get { return "OneTimePriceItems"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OneTimePriceItemsQueryBuilder WithItems(OneTimePriceItemQueryBuilder oneTimePriceItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, oneTimePriceItemQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OneTimePriceItemsQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }
    }

    public class OrgQueryBuilder : GraphQlQueryBuilder<OrgQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "adminContact", IsComplex = true, QueryBuilderType = typeof(OrgContactQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "gateways", IsComplex = true, QueryBuilderType = typeof(GatewayQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lastUpdatedBy" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new FieldMetadata { Name = "state" },
                new FieldMetadata { Name = "stripeCustomerId" },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "updated", IsComplex = true },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "Org"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgQueryBuilder WithAdminContact(OrgContactQueryBuilder orgContactQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("adminContact", alias, orgContactQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptAdminContact()
        {
            return ExceptField("adminContact");
        }

        public OrgQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public OrgQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public OrgQueryBuilder WithGateways(GatewayQueryBuilder gatewayQueryBuilder, QueryBuilderParameter<GatewayFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("gateways", alias, gatewayQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptGateways()
        {
            return ExceptField("gateways");
        }

        public OrgQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public OrgQueryBuilder WithLastUpdatedBy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdatedBy", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptLastUpdatedBy()
        {
            return ExceptField("lastUpdatedBy");
        }

        public OrgQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public OrgQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public OrgQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public OrgQueryBuilder WithStripeCustomerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stripeCustomerId", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptStripeCustomerId()
        {
            return ExceptField("stripeCustomerId");
        }

        public OrgQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public OrgQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public OrgQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<UserFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public OrgQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }
    }

    public class OrgContactQueryBuilder : GraphQlQueryBuilder<OrgContactQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "email" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "OrgContact"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgContactQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgContactQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public OrgContactQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgContactQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class OrgFilterQueryBuilder : GraphQlQueryBuilder<OrgFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(OrgFilterQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(OrgFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(OrgFilterQueryBuilder) },
                new FieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(OrgStateFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgFilterQueryBuilder WithAnd(OrgFilterQueryBuilder orgFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, orgFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public OrgFilterQueryBuilder WithNot(OrgFilterQueryBuilder orgFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, orgFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public OrgFilterQueryBuilder WithOr(OrgFilterQueryBuilder orgFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, orgFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public OrgFilterQueryBuilder WithState(OrgStateFilterExpressionQueryBuilder orgStateFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("state", alias, orgStateFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgFilterQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }
    }

    public class OrgStateFilterExpressionQueryBuilder : GraphQlQueryBuilder<OrgStateFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "OrgStateFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgStateFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgStateFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public OrgStateFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public OrgStateFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class OrgUpdateResponseQueryBuilder : GraphQlQueryBuilder<OrgUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "org", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) }
            };

        protected override string TypeName { get { return "OrgUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public OrgUpdateResponseQueryBuilder WithOrg(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("org", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OrgUpdateResponseQueryBuilder ExceptOrg()
        {
            return ExceptField("org");
        }
    }

    public class PermissionFilterExpressionQueryBuilder : GraphQlQueryBuilder<PermissionFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "PermissionFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PermissionFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public PermissionFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public PermissionFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public PermissionFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class PersonQueryBuilder : GraphQlQueryBuilder<PersonQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "additionalName" },
                new FieldMetadata { Name = "emails", IsComplex = true, QueryBuilderType = typeof(EmailAddressQueryBuilder) },
                new FieldMetadata { Name = "familyName" },
                new FieldMetadata { Name = "givenName" },
                new FieldMetadata { Name = "hasCalendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "hasCalendarInvitations", IsComplex = true, QueryBuilderType = typeof(CalendarInvitationQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Person"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonQueryBuilder WithAdditionalName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("additionalName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptAdditionalName()
        {
            return ExceptField("additionalName");
        }

        public PersonQueryBuilder WithEmails(EmailAddressQueryBuilder emailAddressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("emails", alias, emailAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptEmails()
        {
            return ExceptField("emails");
        }

        public PersonQueryBuilder WithFamilyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("familyName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptFamilyName()
        {
            return ExceptField("familyName");
        }

        public PersonQueryBuilder WithGivenName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("givenName", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptGivenName()
        {
            return ExceptField("givenName");
        }

        public PersonQueryBuilder WithHasCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasCalendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptHasCalendarEvents()
        {
            return ExceptField("hasCalendarEvents");
        }

        public PersonQueryBuilder WithHasCalendarInvitations(CalendarInvitationQueryBuilder calendarInvitationQueryBuilder, QueryBuilderParameter<CalendarInvitationFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("hasCalendarInvitations", alias, calendarInvitationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PersonQueryBuilder ExceptHasCalendarInvitations()
        {
            return ExceptField("hasCalendarInvitations");
        }

        public PersonQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PersonQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class PersonalAccessTokenQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lastExchanged", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "permissions", IsComplex = true },
                new FieldMetadata { Name = "updated", IsComplex = true },
                new FieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "PersonalAccessToken"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public PersonalAccessTokenQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PersonalAccessTokenQueryBuilder WithLastExchanged(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastExchanged", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptLastExchanged()
        {
            return ExceptField("lastExchanged");
        }

        public PersonalAccessTokenQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PersonalAccessTokenQueryBuilder WithPermissions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("permissions", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public PersonalAccessTokenQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public PersonalAccessTokenQueryBuilder WithUserId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class PersonalAccessTokenCreateResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "pat", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new FieldMetadata { Name = "token" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenCreateResponseQueryBuilder WithPat(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pat", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenCreateResponseQueryBuilder ExceptPat()
        {
            return ExceptField("pat");
        }

        public PersonalAccessTokenCreateResponseQueryBuilder WithToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenCreateResponseQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }
    }

    public class PersonalAccessTokenDeleteResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class PersonalAccessTokenFilterQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenFilterQueryBuilder) },
                new FieldMetadata { Name = "id", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenFilterQueryBuilder) },
                new FieldMetadata { Name = "permissions", IsComplex = true, QueryBuilderType = typeof(PermissionFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "userId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "PersonalAccessTokenFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenFilterQueryBuilder WithAnd(PersonalAccessTokenFilterQueryBuilder personalAccessTokenFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, personalAccessTokenFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public PersonalAccessTokenFilterQueryBuilder WithId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("id", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PersonalAccessTokenFilterQueryBuilder WithName(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PersonalAccessTokenFilterQueryBuilder WithNot(PersonalAccessTokenFilterQueryBuilder personalAccessTokenFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, personalAccessTokenFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public PersonalAccessTokenFilterQueryBuilder WithOr(PersonalAccessTokenFilterQueryBuilder personalAccessTokenFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, personalAccessTokenFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public PersonalAccessTokenFilterQueryBuilder WithPermissions(PermissionFilterExpressionQueryBuilder permissionFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("permissions", alias, permissionFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public PersonalAccessTokenFilterQueryBuilder WithUserId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenFilterQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class PersonalAccessTokenUpdateResponseQueryBuilder : GraphQlQueryBuilder<PersonalAccessTokenUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "pat", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new FieldMetadata { Name = "token" }
            };

        protected override string TypeName { get { return "PersonalAccessTokenUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PersonalAccessTokenUpdateResponseQueryBuilder WithPat(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pat", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder ExceptPat()
        {
            return ExceptField("pat");
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder WithToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { include, skip });
        }

        public PersonalAccessTokenUpdateResponseQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }
    }

    public class PlaceQueryBuilder : GraphQlQueryBuilder<PlaceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Place"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PlaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public PlaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public PlaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PlaceQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public PlaceQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public PlaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public PlaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public PlaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public PlaceQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public PlaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public PlaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PlaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public PlaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public PlaceQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlaceQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PointQueryBuilder : GraphQlQueryBuilder<PointQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "aggregation", IsComplex = true, QueryBuilderType = typeof(TimeseriesAggregateRowQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isPointOf", IsComplex = true, QueryBuilderType = typeof(IsPointOfUnionQueryBuilder) },
                new FieldMetadata { Name = "mappingKey" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(TimeseriesRowQueryBuilder) },
                new FieldMetadata { Name = "stateTexts", IsComplex = true },
                new FieldMetadata { Name = "type", IsComplex = true },
                new FieldMetadata { Name = "unit", IsComplex = true, QueryBuilderType = typeof(UnitQueryBuilder) }
            };

        protected override string TypeName { get { return "Point"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public PointQueryBuilder WithAggregation(TimeseriesAggregateRowQueryBuilder timeseriesAggregateRowQueryBuilder, QueryBuilderParameter<object> endTime = null, QueryBuilderParameter<TimeseriesAggPeriodInput?> period = null, QueryBuilderParameter<int?> periodIncrement = null, QueryBuilderParameter<object> startTime = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (endTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endTime", ArgumentValue = endTime });

            if (period != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "period", ArgumentValue = period });

            if (periodIncrement != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "periodIncrement", ArgumentValue = periodIncrement });

            if (startTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startTime", ArgumentValue = startTime });

            return WithObjectField("aggregation", alias, timeseriesAggregateRowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptAggregation()
        {
            return ExceptField("aggregation");
        }

        public PointQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PointQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public PointQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PointQueryBuilder WithIsPointOf(IsPointOfUnionQueryBuilder isPointOfUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPointOf", alias, isPointOfUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptIsPointOf()
        {
            return ExceptField("isPointOf");
        }

        public PointQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public PointQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public PointQueryBuilder WithSeries(TimeseriesRowQueryBuilder timeseriesRowQueryBuilder, QueryBuilderParameter<object> endTime = null, QueryBuilderParameter<bool?> latest = null, QueryBuilderParameter<object> startTime = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (endTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "endTime", ArgumentValue = endTime });

            if (latest != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "latest", ArgumentValue = latest });

            if (startTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startTime", ArgumentValue = startTime });

            return WithObjectField("series", alias, timeseriesRowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PointQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public PointQueryBuilder WithStateTexts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateTexts", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptStateTexts()
        {
            return ExceptField("stateTexts");
        }

        public PointQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public PointQueryBuilder WithUnit(UnitQueryBuilder unitQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("unit", alias, unitQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PointQueryBuilder ExceptUnit()
        {
            return ExceptField("unit");
        }
    }

    public class ProductBundleResponseQueryBuilder : GraphQlQueryBuilder<ProductBundleResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "interval" },
                new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ProductPriceItemResponseQueryBuilder) },
                new FieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataEntryQueryBuilder) },
                new FieldMetadata { Name = "productType" },
                new FieldMetadata { Name = "sku" },
                new FieldMetadata { Name = "slug" },
                new FieldMetadata { Name = "title" }
            };

        protected override string TypeName { get { return "ProductBundleResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductBundleResponseQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ProductBundleResponseQueryBuilder WithInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("interval", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptInterval()
        {
            return ExceptField("interval");
        }

        public ProductBundleResponseQueryBuilder WithItems(ProductPriceItemResponseQueryBuilder productPriceItemResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, productPriceItemResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ProductBundleResponseQueryBuilder WithMetadata(MetadataEntryQueryBuilder metadataEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public ProductBundleResponseQueryBuilder WithProductType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("productType", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptProductType()
        {
            return ExceptField("productType");
        }

        public ProductBundleResponseQueryBuilder WithSku(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sku", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptSku()
        {
            return ExceptField("sku");
        }

        public ProductBundleResponseQueryBuilder WithSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slug", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptSlug()
        {
            return ExceptField("slug");
        }

        public ProductBundleResponseQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductBundleResponseQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }
    }

    public class ProductPriceItemResponseQueryBuilder : GraphQlQueryBuilder<ProductPriceItemResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "lookupKey" },
                new FieldMetadata { Name = "metadata", IsComplex = true, QueryBuilderType = typeof(MetadataEntryQueryBuilder) },
                new FieldMetadata { Name = "oneTimePriceItems", IsComplex = true, QueryBuilderType = typeof(OneTimePriceItemsQueryBuilder) },
                new FieldMetadata { Name = "priceId" },
                new FieldMetadata { Name = "quantityEnabled" },
                new FieldMetadata { Name = "quantityRange", IsComplex = true, QueryBuilderType = typeof(QuantityRangeQueryBuilder) },
                new FieldMetadata { Name = "slug" },
                new FieldMetadata { Name = "tiers", IsComplex = true, QueryBuilderType = typeof(TierQueryBuilder) },
                new FieldMetadata { Name = "tiersMode" },
                new FieldMetadata { Name = "type" },
                new FieldMetadata { Name = "unitAmount" },
                new FieldMetadata { Name = "unitAmountDecimal" }
            };

        protected override string TypeName { get { return "ProductPriceItemResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ProductPriceItemResponseQueryBuilder WithLookupKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lookupKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptLookupKey()
        {
            return ExceptField("lookupKey");
        }

        public ProductPriceItemResponseQueryBuilder WithMetadata(MetadataEntryQueryBuilder metadataEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("metadata", alias, metadataEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptMetadata()
        {
            return ExceptField("metadata");
        }

        public ProductPriceItemResponseQueryBuilder WithOneTimePriceItems(OneTimePriceItemsQueryBuilder oneTimePriceItemsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("oneTimePriceItems", alias, oneTimePriceItemsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptOneTimePriceItems()
        {
            return ExceptField("oneTimePriceItems");
        }

        public ProductPriceItemResponseQueryBuilder WithPriceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("priceId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptPriceId()
        {
            return ExceptField("priceId");
        }

        public ProductPriceItemResponseQueryBuilder WithQuantityEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quantityEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptQuantityEnabled()
        {
            return ExceptField("quantityEnabled");
        }

        public ProductPriceItemResponseQueryBuilder WithQuantityRange(QuantityRangeQueryBuilder quantityRangeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("quantityRange", alias, quantityRangeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptQuantityRange()
        {
            return ExceptField("quantityRange");
        }

        public ProductPriceItemResponseQueryBuilder WithSlug(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slug", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptSlug()
        {
            return ExceptField("slug");
        }

        public ProductPriceItemResponseQueryBuilder WithTiers(TierQueryBuilder tierQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tiers", alias, tierQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptTiers()
        {
            return ExceptField("tiers");
        }

        public ProductPriceItemResponseQueryBuilder WithTiersMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tiersMode", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptTiersMode()
        {
            return ExceptField("tiersMode");
        }

        public ProductPriceItemResponseQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public ProductPriceItemResponseQueryBuilder WithUnitAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptUnitAmount()
        {
            return ExceptField("unitAmount");
        }

        public ProductPriceItemResponseQueryBuilder WithUnitAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public ProductPriceItemResponseQueryBuilder ExceptUnitAmountDecimal()
        {
            return ExceptField("unitAmountDecimal");
        }
    }

    public class QuantityRangeQueryBuilder : GraphQlQueryBuilder<QuantityRangeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "max" },
                new FieldMetadata { Name = "min" }
            };

        protected override string TypeName { get { return "QuantityRange"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public QuantityRangeQueryBuilder WithMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("max", alias, new GraphQlDirective[] { include, skip });
        }

        public QuantityRangeQueryBuilder ExceptMax()
        {
            return ExceptField("max");
        }

        public QuantityRangeQueryBuilder WithMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("min", alias, new GraphQlDirective[] { include, skip });
        }

        public QuantityRangeQueryBuilder ExceptMin()
        {
            return ExceptField("min");
        }
    }

    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "availableConnectorTypes", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new FieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectorAuth", IsComplex = true, QueryBuilderType = typeof(ConnectorAuthQueryBuilder) },
                new FieldMetadata { Name = "connectorTypes", IsComplex = true, QueryBuilderType = typeof(ConnectorTypeQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "floors", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new FieldMetadata { Name = "gateway", IsComplex = true, QueryBuilderType = typeof(GatewayQueryBuilder) },
                new FieldMetadata { Name = "gateways", IsComplex = true, QueryBuilderType = typeof(GatewayQueryBuilder) },
                new FieldMetadata { Name = "grant", IsComplex = true, QueryBuilderType = typeof(GrantQueryBuilder) },
                new FieldMetadata { Name = "grants", IsComplex = true, QueryBuilderType = typeof(GrantQueryBuilder) },
                new FieldMetadata { Name = "invite", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) },
                new FieldMetadata { Name = "invites", IsComplex = true, QueryBuilderType = typeof(InviteQueryBuilder) },
                new FieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "people", IsComplex = true, QueryBuilderType = typeof(PersonQueryBuilder) },
                new FieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "productBundleSubscriptions", IsComplex = true, QueryBuilderType = typeof(BillingProductBundleSubscriptionResponseQueryBuilder) },
                new FieldMetadata { Name = "sites", IsComplex = true, QueryBuilderType = typeof(SiteQueryBuilder) },
                new FieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "tokens", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new FieldMetadata { Name = "units", IsComplex = true, QueryBuilderType = typeof(UnitQueryBuilder) },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "webhookTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) },
                new FieldMetadata { Name = "webhookTargets", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithAvailableConnectorTypes(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, QueryBuilderParameter<ConnectorTypeFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("availableConnectorTypes", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAvailableConnectorTypes()
        {
            return ExceptField("availableConnectorTypes");
        }

        public QueryQueryBuilder WithBuildings(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("buildings", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public QueryQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public QueryQueryBuilder WithConnectorAuth(ConnectorAuthQueryBuilder connectorAuthQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });

            return WithObjectField("connectorAuth", alias, connectorAuthQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectorAuth()
        {
            return ExceptField("connectorAuth");
        }

        public QueryQueryBuilder WithConnectorTypes(ConnectorTypeQueryBuilder connectorTypeQueryBuilder, QueryBuilderParameter<ConnectorTypeFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectorTypes", alias, connectorTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectorTypes()
        {
            return ExceptField("connectorTypes");
        }

        public QueryQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public QueryQueryBuilder WithFloors(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floors", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFloors()
        {
            return ExceptField("floors");
        }

        public QueryQueryBuilder WithGateway(GatewayQueryBuilder gatewayQueryBuilder, QueryBuilderParameter<string> gatewayId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gatewayId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gatewayId", ArgumentValue = gatewayId });

            return WithObjectField("gateway", alias, gatewayQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGateway()
        {
            return ExceptField("gateway");
        }

        public QueryQueryBuilder WithGateways(GatewayQueryBuilder gatewayQueryBuilder, QueryBuilderParameter<GatewayFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("gateways", alias, gatewayQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGateways()
        {
            return ExceptField("gateways");
        }

        public QueryQueryBuilder WithGrant(GrantQueryBuilder grantQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });

            return WithObjectField("grant", alias, grantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrant()
        {
            return ExceptField("grant");
        }

        public QueryQueryBuilder WithGrants(GrantQueryBuilder grantQueryBuilder, QueryBuilderParameter<GrantFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("grants", alias, grantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrants()
        {
            return ExceptField("grants");
        }

        public QueryQueryBuilder WithInvite(InviteQueryBuilder inviteQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });

            return WithObjectField("invite", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvite()
        {
            return ExceptField("invite");
        }

        public QueryQueryBuilder WithInvites(InviteQueryBuilder inviteQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("invites", alias, inviteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptInvites()
        {
            return ExceptField("invites");
        }

        public QueryQueryBuilder WithMe(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("me", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptMe()
        {
            return ExceptField("me");
        }

        public QueryQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public QueryQueryBuilder WithPeople(PersonQueryBuilder personQueryBuilder, QueryBuilderParameter<PersonFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("people", alias, personQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPeople()
        {
            return ExceptField("people");
        }

        public QueryQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public QueryQueryBuilder WithProductBundleSubscriptions(BillingProductBundleSubscriptionResponseQueryBuilder billingProductBundleSubscriptionResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("productBundleSubscriptions", alias, billingProductBundleSubscriptionResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptProductBundleSubscriptions()
        {
            return ExceptField("productBundleSubscriptions");
        }

        public QueryQueryBuilder WithSites(SiteQueryBuilder siteQueryBuilder, QueryBuilderParameter<SiteFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("sites", alias, siteQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSites()
        {
            return ExceptField("sites");
        }

        public QueryQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public QueryQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public QueryQueryBuilder WithTokens(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, QueryBuilderParameter<PersonalAccessTokenFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("tokens", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTokens()
        {
            return ExceptField("tokens");
        }

        public QueryQueryBuilder WithUnits(UnitQueryBuilder unitQueryBuilder, QueryBuilderParameter<UnitFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("units", alias, unitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUnits()
        {
            return ExceptField("units");
        }

        public QueryQueryBuilder WithUsers(UserQueryBuilder userQueryBuilder, QueryBuilderParameter<UserFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("users", alias, userQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public QueryQueryBuilder WithWebhookTarget(WebhookTargetQueryBuilder webhookTargetQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id });

            return WithObjectField("webhookTarget", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptWebhookTarget()
        {
            return ExceptField("webhookTarget");
        }

        public QueryQueryBuilder WithWebhookTargets(WebhookTargetQueryBuilder webhookTargetQueryBuilder, QueryBuilderParameter<WebhookTargetFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("webhookTargets", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptWebhookTargets()
        {
            return ExceptField("webhookTargets");
        }
    }

    public class RegexMatchQueryBuilder : GraphQlQueryBuilder<RegexMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new FieldMetadata { Name = "regex" }
            };

        protected override string TypeName { get { return "RegexMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public RegexMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RegexMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public RegexMatchQueryBuilder WithRegex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regex", alias, new GraphQlDirective[] { include, skip });
        }

        public RegexMatchQueryBuilder ExceptRegex()
        {
            return ExceptField("regex");
        }
    }

    public class SignatureMatchQueryBuilder : GraphQlQueryBuilder<SignatureMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "asymmetricKey", IsComplex = true, QueryBuilderType = typeof(CertificateQueryBuilder) },
                new FieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new FieldMetadata { Name = "symmetricKey" },
                new FieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "SignatureMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SignatureMatchQueryBuilder WithAsymmetricKey(CertificateQueryBuilder certificateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("asymmetricKey", alias, certificateQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptAsymmetricKey()
        {
            return ExceptField("asymmetricKey");
        }

        public SignatureMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public SignatureMatchQueryBuilder WithSymmetricKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("symmetricKey", alias, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptSymmetricKey()
        {
            return ExceptField("symmetricKey");
        }

        public SignatureMatchQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SignatureMatchQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SiteQueryBuilder : GraphQlQueryBuilder<SiteQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(BuildingQueryBuilder) },
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Site"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteQueryBuilder WithBuildings(BuildingQueryBuilder buildingQueryBuilder, QueryBuilderParameter<BuildingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("buildings", alias, buildingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public SiteQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public SiteQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public SiteQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SiteQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SiteQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SiteQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public SiteQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public SiteQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public SiteQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SiteQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public SiteQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public SiteQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public SiteQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SiteQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public SiteQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SiteQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public SiteQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SiteCreateResponseQueryBuilder : GraphQlQueryBuilder<SiteCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "site", IsComplex = true, QueryBuilderType = typeof(SiteMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteCreateResponseQueryBuilder WithSite(SiteMutationQueryBuilder siteMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("site", alias, siteMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteCreateResponseQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class SiteDeleteResponseQueryBuilder : GraphQlQueryBuilder<SiteDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "SiteDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class SiteMutationQueryBuilder : GraphQlQueryBuilder<SiteMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "SiteMutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SiteMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SiteMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SiteMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class SiteUpdateResponseQueryBuilder : GraphQlQueryBuilder<SiteUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "site", IsComplex = true, QueryBuilderType = typeof(SiteMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SiteUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SiteUpdateResponseQueryBuilder WithSite(SiteMutationQueryBuilder siteMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("site", alias, siteMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SiteUpdateResponseQueryBuilder ExceptSite()
        {
            return ExceptField("site");
        }
    }

    public class SpaceQueryBuilder : GraphQlQueryBuilder<SpaceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "floor", IsComplex = true, QueryBuilderType = typeof(FloorQueryBuilder) },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "parentSpaceId" },
                new FieldMetadata { Name = "spaces", IsComplex = true, QueryBuilderType = typeof(SpaceQueryBuilder) },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Space"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public SpaceQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public SpaceQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public SpaceQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SpaceQueryBuilder WithFloor(FloorQueryBuilder floorQueryBuilder, QueryBuilderParameter<FloorFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("floor", alias, floorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptFloor()
        {
            return ExceptField("floor");
        }

        public SpaceQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SpaceQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public SpaceQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public SpaceQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public SpaceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public SpaceQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public SpaceQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public SpaceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SpaceQueryBuilder WithParentSpaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentSpaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptParentSpaceId()
        {
            return ExceptField("parentSpaceId");
        }

        public SpaceQueryBuilder WithSpaces(SpaceQueryBuilder spaceQueryBuilder, QueryBuilderParameter<int?> childDepth = null, QueryBuilderParameter<SpaceFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (childDepth != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "childDepth", ArgumentValue = childDepth });

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("spaces", alias, spaceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptSpaces()
        {
            return ExceptField("spaces");
        }

        public SpaceQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public SpaceQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public SpaceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class SpaceCreateResponseQueryBuilder : GraphQlQueryBuilder<SpaceCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "space", IsComplex = true, QueryBuilderType = typeof(SpaceMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceCreateResponseQueryBuilder WithSpace(SpaceMutationQueryBuilder spaceMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("space", alias, spaceMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceCreateResponseQueryBuilder ExceptSpace()
        {
            return ExceptField("space");
        }
    }

    public class SpaceDeleteResponseQueryBuilder : GraphQlQueryBuilder<SpaceDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "SpaceDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class SpaceMutationQueryBuilder : GraphQlQueryBuilder<SpaceMutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "exactType", IsComplex = true },
                new FieldMetadata { Name = "floorId" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "parentSpaceId" }
            };

        protected override string TypeName { get { return "SpaceMutation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceMutationQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public SpaceMutationQueryBuilder WithFloorId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("floorId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptFloorId()
        {
            return ExceptField("floorId");
        }

        public SpaceMutationQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public SpaceMutationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SpaceMutationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SpaceMutationQueryBuilder WithParentSpaceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentSpaceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpaceMutationQueryBuilder ExceptParentSpaceId()
        {
            return ExceptField("parentSpaceId");
        }
    }

    public class SpaceUpdateResponseQueryBuilder : GraphQlQueryBuilder<SpaceUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "space", IsComplex = true, QueryBuilderType = typeof(SpaceMutationQueryBuilder) }
            };

        protected override string TypeName { get { return "SpaceUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SpaceUpdateResponseQueryBuilder WithSpace(SpaceMutationQueryBuilder spaceMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("space", alias, spaceMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpaceUpdateResponseQueryBuilder ExceptSpace()
        {
            return ExceptField("space");
        }
    }

    public class StringArrayFilterExpressionQueryBuilder : GraphQlQueryBuilder<StringArrayFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "StringArrayFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public StringArrayFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public StringArrayFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public StringArrayFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public StringArrayFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class StringFilterExpressionQueryBuilder : GraphQlQueryBuilder<StringFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "contains" },
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "StringFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public StringFilterExpressionQueryBuilder WithContains(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contains", alias, new GraphQlDirective[] { include, skip });
        }

        public StringFilterExpressionQueryBuilder ExceptContains()
        {
            return ExceptField("contains");
        }

        public StringFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public StringFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public StringFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public StringFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class SystemTypeFilterExpressionQueryBuilder : GraphQlQueryBuilder<SystemTypeFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq" },
                new FieldMetadata { Name = "in", IsComplex = true }
            };

        protected override string TypeName { get { return "SystemTypeFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public SystemTypeFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemTypeFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public SystemTypeFilterExpressionQueryBuilder WithIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("in", alias, new GraphQlDirective[] { include, skip });
        }

        public SystemTypeFilterExpressionQueryBuilder ExceptIn()
        {
            return ExceptField("in");
        }
    }

    public class ThingQueryBuilder : GraphQlQueryBuilder<ThingQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "feeds", IsComplex = true, QueryBuilderType = typeof(FeedsUnionQueryBuilder) },
                new FieldMetadata { Name = "firmwareVersion" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasLocation", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "mappingKey" },
                new FieldMetadata { Name = "model", IsComplex = true, QueryBuilderType = typeof(DeviceModelQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "places", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "points", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Thing"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ThingQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public ThingQueryBuilder WithFeeds(FeedsUnionQueryBuilder feedsUnionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feeds", alias, feedsUnionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptFeeds()
        {
            return ExceptField("feeds");
        }

        public ThingQueryBuilder WithFirmwareVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firmwareVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptFirmwareVersion()
        {
            return ExceptField("firmwareVersion");
        }

        public ThingQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public ThingQueryBuilder WithHasLocation(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasLocation", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasLocation()
        {
            return ExceptField("hasLocation");
        }

        public ThingQueryBuilder WithHasPart(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public ThingQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public ThingQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ThingQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public ThingQueryBuilder WithIsPartOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public ThingQueryBuilder WithMappingKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappingKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptMappingKey()
        {
            return ExceptField("mappingKey");
        }

        public ThingQueryBuilder WithModel(DeviceModelQueryBuilder deviceModelQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("model", alias, deviceModelQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptModel()
        {
            return ExceptField("model");
        }

        public ThingQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ThingQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public ThingQueryBuilder WithPlaces(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("places", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptPlaces()
        {
            return ExceptField("places");
        }

        public ThingQueryBuilder WithPoints(PointQueryBuilder pointQueryBuilder, QueryBuilderParameter<PointFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("points", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public ThingQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ThingQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public class ThingContainerQueryBuilder : GraphQlQueryBuilder<ThingContainerQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) }
            };

        protected override string TypeName { get { return "ThingContainer"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingContainerQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ThingContainerQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ThingContainerQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithGenericPlaceFragment(GenericPlaceQueryBuilder genericPlaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(genericPlaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingContainerQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class ThingFeedQueryBuilder : GraphQlQueryBuilder<ThingFeedQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata = new FieldMetadata[0];

        protected override string TypeName { get { return "ThingFeed"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ThingFeedQueryBuilder WithBuildingFragment(BuildingQueryBuilder buildingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buildingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingFeedQueryBuilder WithFloorFragment(FloorQueryBuilder floorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(floorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingFeedQueryBuilder WithSiteFragment(SiteQueryBuilder siteQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(siteQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingFeedQueryBuilder WithSpaceFragment(SpaceQueryBuilder spaceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(spaceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingFeedQueryBuilder WithThingFragment(ThingQueryBuilder thingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ThingFeedQueryBuilder WithZoneFragment(ZoneQueryBuilder zoneQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(zoneQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class TierQueryBuilder : GraphQlQueryBuilder<TierQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "flatAmount" },
                new FieldMetadata { Name = "flatAmountDecimal" },
                new FieldMetadata { Name = "unitAmount" },
                new FieldMetadata { Name = "unitAmountDecimal" },
                new FieldMetadata { Name = "upTo" }
            };

        protected override string TypeName { get { return "Tier"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TierQueryBuilder WithFlatAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flatAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptFlatAmount()
        {
            return ExceptField("flatAmount");
        }

        public TierQueryBuilder WithFlatAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flatAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptFlatAmountDecimal()
        {
            return ExceptField("flatAmountDecimal");
        }

        public TierQueryBuilder WithUnitAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUnitAmount()
        {
            return ExceptField("unitAmount");
        }

        public TierQueryBuilder WithUnitAmountDecimal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitAmountDecimal", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUnitAmountDecimal()
        {
            return ExceptField("unitAmountDecimal");
        }

        public TierQueryBuilder WithUpTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("upTo", alias, new GraphQlDirective[] { include, skip });
        }

        public TierQueryBuilder ExceptUpTo()
        {
            return ExceptField("upTo");
        }
    }

    public class TimeseriesAggregateRowQueryBuilder : GraphQlQueryBuilder<TimeseriesAggregateRowQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "avg" },
                new FieldMetadata { Name = "count" },
                new FieldMetadata { Name = "max" },
                new FieldMetadata { Name = "min" },
                new FieldMetadata { Name = "sum" },
                new FieldMetadata { Name = "timestamp" }
            };

        protected override string TypeName { get { return "TimeseriesAggregateRow"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesAggregateRowQueryBuilder WithAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avg", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptAvg()
        {
            return ExceptField("avg");
        }

        public TimeseriesAggregateRowQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public TimeseriesAggregateRowQueryBuilder WithMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("max", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptMax()
        {
            return ExceptField("max");
        }

        public TimeseriesAggregateRowQueryBuilder WithMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("min", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptMin()
        {
            return ExceptField("min");
        }

        public TimeseriesAggregateRowQueryBuilder WithSum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sum", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptSum()
        {
            return ExceptField("sum");
        }

        public TimeseriesAggregateRowQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesAggregateRowQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }
    }

    public class TimeseriesRowQueryBuilder : GraphQlQueryBuilder<TimeseriesRowQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "timestamp" },
                new FieldMetadata { Name = "value", IsComplex = true, QueryBuilderType = typeof(TimeseriesRowValueQueryBuilder) }
            };

        protected override string TypeName { get { return "TimeseriesRow"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesRowQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }

        public TimeseriesRowQueryBuilder WithValue(TimeseriesRowValueQueryBuilder timeseriesRowValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("value", alias, timeseriesRowValueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class TimeseriesRowValueQueryBuilder : GraphQlQueryBuilder<TimeseriesRowValueQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "boolValue" },
                new FieldMetadata { Name = "byteArrayValue" },
                new FieldMetadata { Name = "float32Value" },
                new FieldMetadata { Name = "float64Value" },
                new FieldMetadata { Name = "geopointValue", IsComplex = true, QueryBuilderType = typeof(GeoPointQueryBuilder) },
                new FieldMetadata { Name = "int32Value" },
                new FieldMetadata { Name = "int64Value" },
                new FieldMetadata { Name = "stringValue" },
                new FieldMetadata { Name = "uint32Value" },
                new FieldMetadata { Name = "uint64Value" }
            };

        protected override string TypeName { get { return "TimeseriesRowValue"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimeseriesRowValueQueryBuilder WithBoolValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("boolValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptBoolValue()
        {
            return ExceptField("boolValue");
        }

        public TimeseriesRowValueQueryBuilder WithByteArrayValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byteArrayValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptByteArrayValue()
        {
            return ExceptField("byteArrayValue");
        }

        public TimeseriesRowValueQueryBuilder WithFloat32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("float32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptFloat32Value()
        {
            return ExceptField("float32Value");
        }

        public TimeseriesRowValueQueryBuilder WithFloat64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("float64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptFloat64Value()
        {
            return ExceptField("float64Value");
        }

        public TimeseriesRowValueQueryBuilder WithGeopointValue(GeoPointQueryBuilder geoPointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("geopointValue", alias, geoPointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptGeopointValue()
        {
            return ExceptField("geopointValue");
        }

        public TimeseriesRowValueQueryBuilder WithInt32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("int32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptInt32Value()
        {
            return ExceptField("int32Value");
        }

        public TimeseriesRowValueQueryBuilder WithInt64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("int64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptInt64Value()
        {
            return ExceptField("int64Value");
        }

        public TimeseriesRowValueQueryBuilder WithStringValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stringValue", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptStringValue()
        {
            return ExceptField("stringValue");
        }

        public TimeseriesRowValueQueryBuilder WithUint32Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uint32Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptUint32Value()
        {
            return ExceptField("uint32Value");
        }

        public TimeseriesRowValueQueryBuilder WithUint64Value(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uint64Value", alias, new GraphQlDirective[] { include, skip });
        }

        public TimeseriesRowValueQueryBuilder ExceptUint64Value()
        {
            return ExceptField("uint64Value");
        }
    }

    public class TimestampFilterExpressionQueryBuilder : GraphQlQueryBuilder<TimestampFilterExpressionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "eq", IsComplex = true },
                new FieldMetadata { Name = "gt", IsComplex = true },
                new FieldMetadata { Name = "gte", IsComplex = true },
                new FieldMetadata { Name = "lt", IsComplex = true },
                new FieldMetadata { Name = "lte", IsComplex = true }
            };

        protected override string TypeName { get { return "TimestampFilterExpression"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public TimestampFilterExpressionQueryBuilder WithEq(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eq", alias, new GraphQlDirective[] { include, skip });
        }

        public TimestampFilterExpressionQueryBuilder ExceptEq()
        {
            return ExceptField("eq");
        }

        public TimestampFilterExpressionQueryBuilder WithGt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gt", alias, new GraphQlDirective[] { include, skip });
        }

        public TimestampFilterExpressionQueryBuilder ExceptGt()
        {
            return ExceptField("gt");
        }

        public TimestampFilterExpressionQueryBuilder WithGte(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gte", alias, new GraphQlDirective[] { include, skip });
        }

        public TimestampFilterExpressionQueryBuilder ExceptGte()
        {
            return ExceptField("gte");
        }

        public TimestampFilterExpressionQueryBuilder WithLt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lt", alias, new GraphQlDirective[] { include, skip });
        }

        public TimestampFilterExpressionQueryBuilder ExceptLt()
        {
            return ExceptField("lt");
        }

        public TimestampFilterExpressionQueryBuilder WithLte(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lte", alias, new GraphQlDirective[] { include, skip });
        }

        public TimestampFilterExpressionQueryBuilder ExceptLte()
        {
            return ExceptField("lte");
        }
    }

    public class UnitQueryBuilder : GraphQlQueryBuilder<UnitQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "Unit"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UnitQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public UnitQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UnitQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UnitQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class UnitFilterQueryBuilder : GraphQlQueryBuilder<UnitFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "id", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "UnitFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UnitFilterQueryBuilder WithId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("id", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UnitFilterQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public class UserQueryBuilder : GraphQlQueryBuilder<UserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "email" },
                new FieldMetadata { Name = "emailVerified" },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lastUpdatedBy" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "nickname" },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "roles", IsComplex = true },
                new FieldMetadata { Name = "tokens", IsComplex = true, QueryBuilderType = typeof(PersonalAccessTokenQueryBuilder) },
                new FieldMetadata { Name = "updated", IsComplex = true }
            };

        protected override string TypeName { get { return "User"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public UserQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public UserQueryBuilder WithEmailVerified(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailVerified", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptEmailVerified()
        {
            return ExceptField("emailVerified");
        }

        public UserQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UserQueryBuilder WithLastUpdatedBy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdatedBy", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptLastUpdatedBy()
        {
            return ExceptField("lastUpdatedBy");
        }

        public UserQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UserQueryBuilder WithNickname(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nickname", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptNickname()
        {
            return ExceptField("nickname");
        }

        public UserQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public UserQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public UserQueryBuilder WithTokens(PersonalAccessTokenQueryBuilder personalAccessTokenQueryBuilder, QueryBuilderParameter<PersonalAccessTokenFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("tokens", alias, personalAccessTokenQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryBuilder ExceptTokens()
        {
            return ExceptField("tokens");
        }

        public UserQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public UserQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }
    }

    public class UserAssignRoleResponseQueryBuilder : GraphQlQueryBuilder<UserAssignRoleResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserAssignRoleResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserAssignRoleResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserAssignRoleResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserCreateResponseQueryBuilder : GraphQlQueryBuilder<UserCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserCreateResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserCreateResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserDeleteResponseQueryBuilder : GraphQlQueryBuilder<UserDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "UserDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public UserDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class UserFilterQueryBuilder : GraphQlQueryBuilder<UserFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "email", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "userId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "UserFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserFilterQueryBuilder WithEmail(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("email", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserFilterQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public UserFilterQueryBuilder WithName(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UserFilterQueryBuilder WithUserId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserFilterQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class UserGetOrgMembershipsResponseQueryBuilder : GraphQlQueryBuilder<UserGetOrgMembershipsResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "orgIds", IsComplex = true }
            };

        protected override string TypeName { get { return "UserGetOrgMembershipsResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserGetOrgMembershipsResponseQueryBuilder WithOrgIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("orgIds", alias, new GraphQlDirective[] { include, skip });
        }

        public UserGetOrgMembershipsResponseQueryBuilder ExceptOrgIds()
        {
            return ExceptField("orgIds");
        }
    }

    public class UserRemoveOrgMembershipResponseQueryBuilder : GraphQlQueryBuilder<UserRemoveOrgMembershipResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "UserRemoveOrgMembershipResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserRemoveOrgMembershipResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public UserRemoveOrgMembershipResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class UserRemoveRoleResponseQueryBuilder : GraphQlQueryBuilder<UserRemoveRoleResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserRemoveRoleResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserRemoveRoleResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserRemoveRoleResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class UserUpdateResponseQueryBuilder : GraphQlQueryBuilder<UserUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) }
            };

        protected override string TypeName { get { return "UserUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public UserUpdateResponseQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserUpdateResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ValueLocationQueryBuilder : GraphQlQueryBuilder<ValueLocationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "encoding" },
                new FieldMetadata { Name = "form", IsComplex = true, QueryBuilderType = typeof(BodyValueLocationQueryBuilder) },
                new FieldMetadata { Name = "header" },
                new FieldMetadata { Name = "json", IsComplex = true, QueryBuilderType = typeof(BodyValueLocationQueryBuilder) },
                new FieldMetadata { Name = "mappedDefault" },
                new FieldMetadata { Name = "queryParameter" }
            };

        protected override string TypeName { get { return "ValueLocation"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ValueLocationQueryBuilder WithEncoding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("encoding", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptEncoding()
        {
            return ExceptField("encoding");
        }

        public ValueLocationQueryBuilder WithForm(BodyValueLocationQueryBuilder bodyValueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("form", alias, bodyValueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptForm()
        {
            return ExceptField("form");
        }

        public ValueLocationQueryBuilder WithHeader(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("header", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptHeader()
        {
            return ExceptField("header");
        }

        public ValueLocationQueryBuilder WithJson(BodyValueLocationQueryBuilder bodyValueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("json", alias, bodyValueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptJson()
        {
            return ExceptField("json");
        }

        public ValueLocationQueryBuilder WithMappedDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mappedDefault", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptMappedDefault()
        {
            return ExceptField("mappedDefault");
        }

        public ValueLocationQueryBuilder WithQueryParameter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queryParameter", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueLocationQueryBuilder ExceptQueryParameter()
        {
            return ExceptField("queryParameter");
        }
    }

    public class ValueMatchQueryBuilder : GraphQlQueryBuilder<ValueMatchQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "location", IsComplex = true, QueryBuilderType = typeof(ValueLocationQueryBuilder) },
                new FieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "ValueMatch"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ValueMatchQueryBuilder WithLocation(ValueLocationQueryBuilder valueLocationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("location", alias, valueLocationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValueMatchQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public ValueMatchQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ValueMatchQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class WebhookTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "amqpTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetAmqpTargetQueryBuilder) },
                new FieldMetadata { Name = "auth", IsComplex = true, QueryBuilderType = typeof(AuthQueryBuilder) },
                new FieldMetadata { Name = "created", IsComplex = true },
                new FieldMetadata { Name = "durable" },
                new FieldMetadata { Name = "eventFilters", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new FieldMetadata { Name = "httpTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetHttpTargetQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "jsonPathExpressions", IsComplex = true },
                new FieldMetadata { Name = "kafkaTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetKafkaTargetQueryBuilder) },
                new FieldMetadata { Name = "maxRetry" },
                new FieldMetadata { Name = "mqttTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetMqttTargetQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "natsTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetNatsTargetQueryBuilder) },
                new FieldMetadata { Name = "organization", IsComplex = true, QueryBuilderType = typeof(OrgQueryBuilder) },
                new FieldMetadata { Name = "targetType" },
                new FieldMetadata { Name = "updated", IsComplex = true },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryBuilder) },
                new FieldMetadata { Name = "wsTarget", IsComplex = true, QueryBuilderType = typeof(WebhookTargetWsTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetQueryBuilder WithAmqpTarget(WebhookTargetAmqpTargetQueryBuilder webhookTargetAmqpTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("amqpTarget", alias, webhookTargetAmqpTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptAmqpTarget()
        {
            return ExceptField("amqpTarget");
        }

        public WebhookTargetQueryBuilder WithAuth(AuthQueryBuilder authQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("auth", alias, authQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptAuth()
        {
            return ExceptField("auth");
        }

        public WebhookTargetQueryBuilder WithCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("created", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptCreated()
        {
            return ExceptField("created");
        }

        public WebhookTargetQueryBuilder WithDurable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durable", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptDurable()
        {
            return ExceptField("durable");
        }

        public WebhookTargetQueryBuilder WithEventFilters(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("eventFilters", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptEventFilters()
        {
            return ExceptField("eventFilters");
        }

        public WebhookTargetQueryBuilder WithHttpTarget(WebhookTargetHttpTargetQueryBuilder webhookTargetHttpTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("httpTarget", alias, webhookTargetHttpTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptHttpTarget()
        {
            return ExceptField("httpTarget");
        }

        public WebhookTargetQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public WebhookTargetQueryBuilder WithJsonPathExpressions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jsonPathExpressions", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptJsonPathExpressions()
        {
            return ExceptField("jsonPathExpressions");
        }

        public WebhookTargetQueryBuilder WithKafkaTarget(WebhookTargetKafkaTargetQueryBuilder webhookTargetKafkaTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("kafkaTarget", alias, webhookTargetKafkaTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptKafkaTarget()
        {
            return ExceptField("kafkaTarget");
        }

        public WebhookTargetQueryBuilder WithMaxRetry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxRetry", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptMaxRetry()
        {
            return ExceptField("maxRetry");
        }

        public WebhookTargetQueryBuilder WithMqttTarget(WebhookTargetMqttTargetQueryBuilder webhookTargetMqttTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mqttTarget", alias, webhookTargetMqttTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptMqttTarget()
        {
            return ExceptField("mqttTarget");
        }

        public WebhookTargetQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WebhookTargetQueryBuilder WithNatsTarget(WebhookTargetNatsTargetQueryBuilder webhookTargetNatsTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("natsTarget", alias, webhookTargetNatsTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptNatsTarget()
        {
            return ExceptField("natsTarget");
        }

        public WebhookTargetQueryBuilder WithOrganization(OrgQueryBuilder orgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("organization", alias, orgQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptOrganization()
        {
            return ExceptField("organization");
        }

        public WebhookTargetQueryBuilder WithTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetType", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptTargetType()
        {
            return ExceptField("targetType");
        }

        public WebhookTargetQueryBuilder WithUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updated", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptUpdated()
        {
            return ExceptField("updated");
        }

        public WebhookTargetQueryBuilder WithUser(UserQueryBuilder userQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public WebhookTargetQueryBuilder WithWsTarget(WebhookTargetWsTargetQueryBuilder webhookTargetWsTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("wsTarget", alias, webhookTargetWsTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetQueryBuilder ExceptWsTarget()
        {
            return ExceptField("wsTarget");
        }
    }

    public class WebhookTargetAmqpTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetAmqpTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetAMQPTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetAmqpTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetAmqpTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class WebhookTargetApiKeyQueryBuilder : GraphQlQueryBuilder<WebhookTargetApiKeyQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "apiKey" },
                new FieldMetadata { Name = "keyName" },
                new FieldMetadata { Name = "passedAs" }
            };

        protected override string TypeName { get { return "WebhookTargetAPIKey"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetApiKeyQueryBuilder WithApiKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apiKey", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetApiKeyQueryBuilder ExceptApiKey()
        {
            return ExceptField("apiKey");
        }

        public WebhookTargetApiKeyQueryBuilder WithKeyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("keyName", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetApiKeyQueryBuilder ExceptKeyName()
        {
            return ExceptField("keyName");
        }

        public WebhookTargetApiKeyQueryBuilder WithPassedAs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("passedAs", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetApiKeyQueryBuilder ExceptPassedAs()
        {
            return ExceptField("passedAs");
        }
    }

    public class WebhookTargetBasicAuthQueryBuilder : GraphQlQueryBuilder<WebhookTargetBasicAuthQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "password" },
                new FieldMetadata { Name = "username" }
            };

        protected override string TypeName { get { return "WebhookTargetBasicAuth"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetBasicAuthQueryBuilder WithPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("password", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetBasicAuthQueryBuilder ExceptPassword()
        {
            return ExceptField("password");
        }

        public WebhookTargetBasicAuthQueryBuilder WithUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("username", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetBasicAuthQueryBuilder ExceptUsername()
        {
            return ExceptField("username");
        }
    }

    public class WebhookTargetCloudEventFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetCloudEventFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(WebhookTargetCloudEventFilterQueryBuilder) },
                new FieldMetadata { Name = "sources", IsComplex = true },
                new FieldMetadata { Name = "types", IsComplex = true }
            };

        protected override string TypeName { get { return "WebhookTargetCloudEventFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetCloudEventFilterQueryBuilder WithAnd(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithNot(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithOr(WebhookTargetCloudEventFilterQueryBuilder webhookTargetCloudEventFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, webhookTargetCloudEventFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithSources(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sources", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptSources()
        {
            return ExceptField("sources");
        }

        public WebhookTargetCloudEventFilterQueryBuilder WithTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("types", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCloudEventFilterQueryBuilder ExceptTypes()
        {
            return ExceptField("types");
        }
    }

    public class WebhookTargetCreateResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetCreateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "target", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetCreateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetCreateResponseQueryBuilder WithTarget(WebhookTargetQueryBuilder webhookTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("target", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetCreateResponseQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class WebhookTargetDeleteResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetDeleteResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "WebhookTargetDeleteResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetDeleteResponseQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetDeleteResponseQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class WebhookTargetFilterQueryBuilder : GraphQlQueryBuilder<WebhookTargetFilterQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "and", IsComplex = true, QueryBuilderType = typeof(WebhookTargetFilterQueryBuilder) },
                new FieldMetadata { Name = "name", IsComplex = true, QueryBuilderType = typeof(StringFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "not", IsComplex = true, QueryBuilderType = typeof(WebhookTargetFilterQueryBuilder) },
                new FieldMetadata { Name = "or", IsComplex = true, QueryBuilderType = typeof(WebhookTargetFilterQueryBuilder) },
                new FieldMetadata { Name = "targetId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) },
                new FieldMetadata { Name = "userId", IsComplex = true, QueryBuilderType = typeof(IdFilterExpressionQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetFilter"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetFilterQueryBuilder WithAnd(WebhookTargetFilterQueryBuilder webhookTargetFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("and", alias, webhookTargetFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptAnd()
        {
            return ExceptField("and");
        }

        public WebhookTargetFilterQueryBuilder WithName(StringFilterExpressionQueryBuilder stringFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("name", alias, stringFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public WebhookTargetFilterQueryBuilder WithNot(WebhookTargetFilterQueryBuilder webhookTargetFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("not", alias, webhookTargetFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptNot()
        {
            return ExceptField("not");
        }

        public WebhookTargetFilterQueryBuilder WithOr(WebhookTargetFilterQueryBuilder webhookTargetFilterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("or", alias, webhookTargetFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptOr()
        {
            return ExceptField("or");
        }

        public WebhookTargetFilterQueryBuilder WithTargetId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("targetId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptTargetId()
        {
            return ExceptField("targetId");
        }

        public WebhookTargetFilterQueryBuilder WithUserId(IdFilterExpressionQueryBuilder idFilterExpressionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("userId", alias, idFilterExpressionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetFilterQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class WebhookTargetHttpTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetHttpTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "apiKey", IsComplex = true, QueryBuilderType = typeof(WebhookTargetApiKeyQueryBuilder) },
                new FieldMetadata { Name = "basicAuth", IsComplex = true, QueryBuilderType = typeof(WebhookTargetBasicAuthQueryBuilder) },
                new FieldMetadata { Name = "method" },
                new FieldMetadata { Name = "noAuth", IsComplex = true, QueryBuilderType = typeof(WebhookTargetNoAuthQueryBuilder) },
                new FieldMetadata { Name = "oauth2ClientCredentialsFlow", IsComplex = true, QueryBuilderType = typeof(WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder) },
                new FieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetHTTPTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetHttpTargetQueryBuilder WithApiKey(WebhookTargetApiKeyQueryBuilder webhookTargetApiKeyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("apiKey", alias, webhookTargetApiKeyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptApiKey()
        {
            return ExceptField("apiKey");
        }

        public WebhookTargetHttpTargetQueryBuilder WithBasicAuth(WebhookTargetBasicAuthQueryBuilder webhookTargetBasicAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("basicAuth", alias, webhookTargetBasicAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptBasicAuth()
        {
            return ExceptField("basicAuth");
        }

        public WebhookTargetHttpTargetQueryBuilder WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("method", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptMethod()
        {
            return ExceptField("method");
        }

        public WebhookTargetHttpTargetQueryBuilder WithNoAuth(WebhookTargetNoAuthQueryBuilder webhookTargetNoAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("noAuth", alias, webhookTargetNoAuthQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptNoAuth()
        {
            return ExceptField("noAuth");
        }

        public WebhookTargetHttpTargetQueryBuilder WithOauth2ClientCredentialsFlow(WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder webhookTargetOAuth2ClientCredentialsFlowQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("oauth2ClientCredentialsFlow", alias, webhookTargetOAuth2ClientCredentialsFlowQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptOauth2ClientCredentialsFlow()
        {
            return ExceptField("oauth2ClientCredentialsFlow");
        }

        public WebhookTargetHttpTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetHttpTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class WebhookTargetKafkaTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetKafkaTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "targetBroker" }
            };

        protected override string TypeName { get { return "WebhookTargetKafkaTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetKafkaTargetQueryBuilder WithTargetBroker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetBroker", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetKafkaTargetQueryBuilder ExceptTargetBroker()
        {
            return ExceptField("targetBroker");
        }
    }

    public class WebhookTargetMqttTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetMqttTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetMQTTTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetMqttTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetMqttTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class WebhookTargetNatsTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetNatsTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetNATSTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetNatsTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetNatsTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class WebhookTargetNoAuthQueryBuilder : GraphQlQueryBuilder<WebhookTargetNoAuthQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "_" }
            };

        protected override string TypeName { get { return "WebhookTargetNoAuth"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetNoAuthQueryBuilder With_(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("_", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetNoAuthQueryBuilder Except_()
        {
            return ExceptField("_");
        }
    }

    public class WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder : GraphQlQueryBuilder<WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "clientId" },
                new FieldMetadata { Name = "clientSecret" },
                new FieldMetadata { Name = "headerPrefix" },
                new FieldMetadata { Name = "scope" },
                new FieldMetadata { Name = "tokenEndpoint" }
            };

        protected override string TypeName { get { return "WebhookTargetOAuth2ClientCredentialsFlow"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder WithClientId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder ExceptClientId()
        {
            return ExceptField("clientId");
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder WithClientSecret(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientSecret", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder ExceptClientSecret()
        {
            return ExceptField("clientSecret");
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder WithHeaderPrefix(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("headerPrefix", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder ExceptHeaderPrefix()
        {
            return ExceptField("headerPrefix");
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder WithScope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scope", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder ExceptScope()
        {
            return ExceptField("scope");
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder WithTokenEndpoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tokenEndpoint", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetOAuth2ClientCredentialsFlowQueryBuilder ExceptTokenEndpoint()
        {
            return ExceptField("tokenEndpoint");
        }
    }

    public class WebhookTargetUpdateResponseQueryBuilder : GraphQlQueryBuilder<WebhookTargetUpdateResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "target", IsComplex = true, QueryBuilderType = typeof(WebhookTargetQueryBuilder) }
            };

        protected override string TypeName { get { return "WebhookTargetUpdateResponse"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetUpdateResponseQueryBuilder WithTarget(WebhookTargetQueryBuilder webhookTargetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("target", alias, webhookTargetQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetUpdateResponseQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public class WebhookTargetWsTargetQueryBuilder : GraphQlQueryBuilder<WebhookTargetWsTargetQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "targetUri" }
            };

        protected override string TypeName { get { return "WebhookTargetWSTarget"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public WebhookTargetWsTargetQueryBuilder WithTargetUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetUri", alias, new GraphQlDirective[] { include, skip });
        }

        public WebhookTargetWsTargetQueryBuilder ExceptTargetUri()
        {
            return ExceptField("targetUri");
        }
    }

    public class ZoneQueryBuilder : GraphQlQueryBuilder<ZoneQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new[]
            {
                new FieldMetadata { Name = "calendarEvents", IsComplex = true, QueryBuilderType = typeof(CalendarEventQueryBuilder) },
                new FieldMetadata { Name = "connectors", IsComplex = true, QueryBuilderType = typeof(ConnectorQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "exactType" },
                new FieldMetadata { Name = "geoshape", IsComplex = true },
                new FieldMetadata { Name = "hasAddress", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
                new FieldMetadata { Name = "hasPart", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "hasPoint", IsComplex = true, QueryBuilderType = typeof(PointQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "isFedBy", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isLocationOf", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "isPartOf", IsComplex = true, QueryBuilderType = typeof(PlaceQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "things", IsComplex = true, QueryBuilderType = typeof(ThingQueryBuilder) },
                new FieldMetadata { Name = "type", IsComplex = true }
            };

        protected override string TypeName { get { return "Zone"; } }

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } }

        public ZoneQueryBuilder WithCalendarEvents(CalendarEventQueryBuilder calendarEventQueryBuilder, QueryBuilderParameter<CalendarEventFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("calendarEvents", alias, calendarEventQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptCalendarEvents()
        {
            return ExceptField("calendarEvents");
        }

        public ZoneQueryBuilder WithConnectors(ConnectorQueryBuilder connectorQueryBuilder, QueryBuilderParameter<ConnectorFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("connectors", alias, connectorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptConnectors()
        {
            return ExceptField("connectors");
        }

        public ZoneQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ZoneQueryBuilder WithExactType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exactType", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptExactType()
        {
            return ExceptField("exactType");
        }

        public ZoneQueryBuilder WithGeoshape(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("geoshape", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptGeoshape()
        {
            return ExceptField("geoshape");
        }

        public ZoneQueryBuilder WithHasAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasAddress", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptHasAddress()
        {
            return ExceptField("hasAddress");
        }

        public ZoneQueryBuilder WithHasPart(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPart", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptHasPart()
        {
            return ExceptField("hasPart");
        }

        public ZoneQueryBuilder WithHasPoint(PointQueryBuilder pointQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hasPoint", alias, pointQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptHasPoint()
        {
            return ExceptField("hasPoint");
        }

        public ZoneQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ZoneQueryBuilder WithIsFedBy(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isFedBy", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsFedBy()
        {
            return ExceptField("isFedBy");
        }

        public ZoneQueryBuilder WithIsLocationOf(ThingQueryBuilder thingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isLocationOf", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsLocationOf()
        {
            return ExceptField("isLocationOf");
        }

        public ZoneQueryBuilder WithIsPartOf(PlaceQueryBuilder placeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isPartOf", alias, placeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptIsPartOf()
        {
            return ExceptField("isPartOf");
        }

        public ZoneQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ZoneQueryBuilder WithThings(ThingQueryBuilder thingQueryBuilder, QueryBuilderParameter<ThingFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter });

            return WithObjectField("things", alias, thingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ZoneQueryBuilder ExceptThings()
        {
            return ExceptField("things");
        }

        public ZoneQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public ZoneQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }
    #endregion

    #region input classes
    public class AddressFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AddressFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AddressFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<AddressFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AddressFilter>))]
#endif
        public QueryBuilderParameter<AddressFilter> Not
        {
            get { return (QueryBuilderParameter<AddressFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AddressFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<AddressFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AddressFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class AddressMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _countryName;
        private InputPropertyInfo _id;
        private InputPropertyInfo _locality;
        private InputPropertyInfo _postalCode;
        private InputPropertyInfo _region;
        private InputPropertyInfo _streetAddress;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> CountryName
        {
            get { return (QueryBuilderParameter<string>)_countryName.Value; }
            set { _countryName = new InputPropertyInfo { Name = "countryName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Locality
        {
            get { return (QueryBuilderParameter<string>)_locality.Value; }
            set { _locality = new InputPropertyInfo { Name = "locality", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PostalCode
        {
            get { return (QueryBuilderParameter<string>)_postalCode.Value; }
            set { _postalCode = new InputPropertyInfo { Name = "postalCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Region
        {
            get { return (QueryBuilderParameter<string>)_region.Value; }
            set { _region = new InputPropertyInfo { Name = "region", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StreetAddress
        {
            get { return (QueryBuilderParameter<string>)_streetAddress.Value; }
            set { _streetAddress = new InputPropertyInfo { Name = "streetAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Type
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_countryName.Name != null) yield return _countryName;
            if (_id.Name != null) yield return _id;
            if (_locality.Name != null) yield return _locality;
            if (_postalCode.Name != null) yield return _postalCode;
            if (_region.Name != null) yield return _region;
            if (_streetAddress.Name != null) yield return _streetAddress;
            if (_type.Name != null) yield return _type;
        }
    }

    public class AuthContextMapper : IGraphQlInputObject
    {
        private InputPropertyInfo _claimName;
        private InputPropertyInfo _targetField;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ClaimName
        {
            get { return (QueryBuilderParameter<string>)_claimName.Value; }
            set { _claimName = new InputPropertyInfo { Name = "claimName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetField
        {
            get { return (QueryBuilderParameter<string>)_targetField.Value; }
            set { _targetField = new InputPropertyInfo { Name = "targetField", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_claimName.Name != null) yield return _claimName;
            if (_targetField.Name != null) yield return _targetField;
        }
    }

    public class AuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _matches;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MatchInput>> Matches
        {
            get { return (QueryBuilderParameter<ICollection<MatchInput>>)_matches.Value; }
            set { _matches = new InputPropertyInfo { Name = "matches", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthInput>>))]
#endif
        public QueryBuilderParameter<ICollection<AuthInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_matches.Name != null) yield return _matches;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class BillingCalculatedProductBundleResponseInput : IGraphQlInputObject
    {
        private InputPropertyInfo _calculation;
        private InputPropertyInfo _code;
        private InputPropertyInfo _productBundle;
        private InputPropertyInfo _productSlug;
        private InputPropertyInfo _statusMessage;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BillingCalculationResponseInput>))]
#endif
        public QueryBuilderParameter<BillingCalculationResponseInput> Calculation
        {
            get { return (QueryBuilderParameter<BillingCalculationResponseInput>)_calculation.Value; }
            set { _calculation = new InputPropertyInfo { Name = "calculation", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Code
        {
            get { return (QueryBuilderParameter<int?>)_code.Value; }
            set { _code = new InputPropertyInfo { Name = "code", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ProductBundleResponseInput>))]
#endif
        public QueryBuilderParameter<ProductBundleResponseInput> ProductBundle
        {
            get { return (QueryBuilderParameter<ProductBundleResponseInput>)_productBundle.Value; }
            set { _productBundle = new InputPropertyInfo { Name = "productBundle", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ProductSlug
        {
            get { return (QueryBuilderParameter<string>)_productSlug.Value; }
            set { _productSlug = new InputPropertyInfo { Name = "productSlug", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StatusMessage
        {
            get { return (QueryBuilderParameter<string>)_statusMessage.Value; }
            set { _statusMessage = new InputPropertyInfo { Name = "statusMessage", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_calculation.Name != null) yield return _calculation;
            if (_code.Name != null) yield return _code;
            if (_productBundle.Name != null) yield return _productBundle;
            if (_productSlug.Name != null) yield return _productSlug;
            if (_statusMessage.Name != null) yield return _statusMessage;
        }
    }

    public class BillingCalculationResponseInput : IGraphQlInputObject
    {
        private InputPropertyInfo _fixedPrice;
        private InputPropertyInfo _itemSlug;
        private InputPropertyInfo _overagePrice;
        private InputPropertyInfo _productPriceItem;
        private InputPropertyInfo _quantity;
        private InputPropertyInfo _unitPrice;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> FixedPrice
        {
            get { return (QueryBuilderParameter<int?>)_fixedPrice.Value; }
            set { _fixedPrice = new InputPropertyInfo { Name = "fixedPrice", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ItemSlug
        {
            get { return (QueryBuilderParameter<string>)_itemSlug.Value; }
            set { _itemSlug = new InputPropertyInfo { Name = "itemSlug", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> OveragePrice
        {
            get { return (QueryBuilderParameter<int?>)_overagePrice.Value; }
            set { _overagePrice = new InputPropertyInfo { Name = "overagePrice", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ProductPriceItemResponseInput>))]
#endif
        public QueryBuilderParameter<ProductPriceItemResponseInput> ProductPriceItem
        {
            get { return (QueryBuilderParameter<ProductPriceItemResponseInput>)_productPriceItem.Value; }
            set { _productPriceItem = new InputPropertyInfo { Name = "productPriceItem", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Quantity
        {
            get { return (QueryBuilderParameter<int?>)_quantity.Value; }
            set { _quantity = new InputPropertyInfo { Name = "quantity", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> UnitPrice
        {
            get { return (QueryBuilderParameter<int?>)_unitPrice.Value; }
            set { _unitPrice = new InputPropertyInfo { Name = "unitPrice", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_fixedPrice.Name != null) yield return _fixedPrice;
            if (_itemSlug.Name != null) yield return _itemSlug;
            if (_overagePrice.Name != null) yield return _overagePrice;
            if (_productPriceItem.Name != null) yield return _productPriceItem;
            if (_quantity.Name != null) yield return _quantity;
            if (_unitPrice.Name != null) yield return _unitPrice;
        }
    }

    public class BillingPriceTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _productPriceType;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PriceTypeInput?>))]
#endif
        public QueryBuilderParameter<PriceTypeInput?> ProductPriceType
        {
            get { return (QueryBuilderParameter<PriceTypeInput?>)_productPriceType.Value; }
            set { _productPriceType = new InputPropertyInfo { Name = "productPriceType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_productPriceType.Name != null) yield return _productPriceType;
        }
    }

    public class BillingProductBundleFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _productPriceType;
        private InputPropertyInfo _sku;
        private InputPropertyInfo _slug;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BillingProductBundleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BillingProductBundleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BillingProductBundleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<BillingProductBundleFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BillingPriceTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<BillingPriceTypeFilterExpressionInput> ProductPriceType
        {
            get { return (QueryBuilderParameter<BillingPriceTypeFilterExpressionInput>)_productPriceType.Value; }
            set { _productPriceType = new InputPropertyInfo { Name = "productPriceType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Sku
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_sku.Value; }
            set { _sku = new InputPropertyInfo { Name = "sku", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Slug
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_slug.Value; }
            set { _slug = new InputPropertyInfo { Name = "slug", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_productPriceType.Name != null) yield return _productPriceType;
            if (_sku.Name != null) yield return _sku;
            if (_slug.Name != null) yield return _slug;
        }
    }

    public class BillingProductBundleSubscriptionResponseInput : IGraphQlInputObject
    {
        private InputPropertyInfo _productBundle;
        private InputPropertyInfo _subscriptionId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BillingCalculatedProductBundleResponseInput>))]
#endif
        public QueryBuilderParameter<BillingCalculatedProductBundleResponseInput> ProductBundle
        {
            get { return (QueryBuilderParameter<BillingCalculatedProductBundleResponseInput>)_productBundle.Value; }
            set { _productBundle = new InputPropertyInfo { Name = "productBundle", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SubscriptionId
        {
            get { return (QueryBuilderParameter<string>)_subscriptionId.Value; }
            set { _subscriptionId = new InputPropertyInfo { Name = "subscriptionId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_productBundle.Name != null) yield return _productBundle;
            if (_subscriptionId.Name != null) yield return _subscriptionId;
        }
    }

    public class BodyValueLocationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _bodySource;
        private InputPropertyInfo _field;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BodySource
        {
            get { return (QueryBuilderParameter<string>)_bodySource.Value; }
            set { _bodySource = new InputPropertyInfo { Name = "bodySource", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Field
        {
            get { return (QueryBuilderParameter<string>)_field.Value; }
            set { _field = new InputPropertyInfo { Name = "field", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_bodySource.Name != null) yield return _bodySource;
            if (_field.Name != null) yield return _field;
        }
    }

    public class BuildingCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _building;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingMutationInput>))]
#endif
        public QueryBuilderParameter<BuildingMutationInput> Building
        {
            get { return (QueryBuilderParameter<BuildingMutationInput>)_building.Value; }
            set { _building = new InputPropertyInfo { Name = "building", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_building.Name != null) yield return _building;
        }
    }

    public class BuildingDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class BuildingFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuildingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<BuildingFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<BuildingFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingFilter>))]
#endif
        public QueryBuilderParameter<BuildingFilter> Not
        {
            get { return (QueryBuilderParameter<BuildingFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuildingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<BuildingFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<BuildingFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class BuildingMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _address;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _siteId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AddressMutationInput>))]
#endif
        public QueryBuilderParameter<AddressMutationInput> Address
        {
            get { return (QueryBuilderParameter<AddressMutationInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "address", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SiteId
        {
            get { return (QueryBuilderParameter<string>)_siteId.Value; }
            set { _siteId = new InputPropertyInfo { Name = "siteId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_address.Name != null) yield return _address;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_siteId.Name != null) yield return _siteId;
        }
    }

    public class BuildingUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _building;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuildingMutationInput>))]
#endif
        public QueryBuilderParameter<BuildingMutationInput> Building
        {
            get { return (QueryBuilderParameter<BuildingMutationInput>)_building.Value; }
            set { _building = new InputPropertyInfo { Name = "building", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_building.Name != null) yield return _building;
        }
    }

    public class CalendarEventFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _hasInviteeEmail;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _startTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarEventFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarEventFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<CalendarEventFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<DateTimeFilterExpressionInput> EndTime
        {
            get { return (QueryBuilderParameter<DateTimeFilterExpressionInput>)_endTime.Value; }
            set { _endTime = new InputPropertyInfo { Name = "endTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> HasInviteeEmail
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_hasInviteeEmail.Value; }
            set { _hasInviteeEmail = new InputPropertyInfo { Name = "hasInviteeEmail", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarEventFilter>))]
#endif
        public QueryBuilderParameter<CalendarEventFilter> Not
        {
            get { return (QueryBuilderParameter<CalendarEventFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarEventFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarEventFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CalendarEventFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<DateTimeFilterExpressionInput> StartTime
        {
            get { return (QueryBuilderParameter<DateTimeFilterExpressionInput>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_endTime.Name != null) yield return _endTime;
            if (_hasInviteeEmail.Name != null) yield return _hasInviteeEmail;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public class CalendarInvitationFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _response;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationFilter>))]
#endif
        public QueryBuilderParameter<CalendarInvitationFilter> Not
        {
            get { return (QueryBuilderParameter<CalendarInvitationFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationResponseFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<CalendarInvitationResponseFilterExpressionInput> Response
        {
            get { return (QueryBuilderParameter<CalendarInvitationResponseFilterExpressionInput>)_response.Value; }
            set { _response = new InputPropertyInfo { Name = "response", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_response.Name != null) yield return _response;
        }
    }

    public class CalendarInvitationResponseFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CalendarInvitationResponse?>))]
#endif
        public QueryBuilderParameter<CalendarInvitationResponse?> Eq
        {
            get { return (QueryBuilderParameter<CalendarInvitationResponse?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CalendarInvitationResponse>>))]
#endif
        public QueryBuilderParameter<ICollection<CalendarInvitationResponse>> In
        {
            get { return (QueryBuilderParameter<ICollection<CalendarInvitationResponse>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class CertMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _caCerts;
        private InputPropertyInfo _dnsName;
        private InputPropertyInfo _serialNumber;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateAuthorityBundleInput>))]
#endif
        public QueryBuilderParameter<CertificateAuthorityBundleInput> CaCerts
        {
            get { return (QueryBuilderParameter<CertificateAuthorityBundleInput>)_caCerts.Value; }
            set { _caCerts = new InputPropertyInfo { Name = "caCerts", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> DnsName
        {
            get { return (QueryBuilderParameter<string>)_dnsName.Value; }
            set { _dnsName = new InputPropertyInfo { Name = "dnsName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SerialNumber
        {
            get { return (QueryBuilderParameter<string>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_caCerts.Name != null) yield return _caCerts;
            if (_dnsName.Name != null) yield return _dnsName;
            if (_serialNumber.Name != null) yield return _serialNumber;
        }
    }

    public class CertificateAuthorityBundleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _caCertificates;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CertificateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<CertificateInput>> CaCertificates
        {
            get { return (QueryBuilderParameter<ICollection<CertificateInput>>)_caCertificates.Value; }
            set { _caCertificates = new InputPropertyInfo { Name = "caCertificates", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_caCertificates.Name != null) yield return _caCertificates;
        }
    }

    public class CertificateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _certificate;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Certificate
        {
            get { return (QueryBuilderParameter<string>)_certificate.Value; }
            set { _certificate = new InputPropertyInfo { Name = "certificate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateTypeInput?>))]
#endif
        public QueryBuilderParameter<CertificateTypeInput?> Type
        {
            get { return (QueryBuilderParameter<CertificateTypeInput?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_certificate.Name != null) yield return _certificate;
            if (_type.Name != null) yield return _type;
        }
    }

    public class ConnectorAuthCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _secret;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthRequestSecretInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthRequestSecretInput> Secret
        {
            get { return (QueryBuilderParameter<ConnectorAuthRequestSecretInput>)_secret.Value; }
            set { _secret = new InputPropertyInfo { Name = "secret", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_secret.Name != null) yield return _secret;
        }
    }

    public class ConnectorAuthDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastAccessed;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastAccessed
        {
            get { return (QueryBuilderParameter<object>)_lastAccessed.Value; }
            set { _lastAccessed = new InputPropertyInfo { Name = "lastAccessed", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_lastAccessed.Name != null) yield return _lastAccessed;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class ConnectorAuthRequestSecretInput : IGraphQlInputObject
    {
        private InputPropertyInfo _refreshToken;
        private InputPropertyInfo _staticToken;
        private InputPropertyInfo _usernamePassword;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorServicesRefreshTokenInput>))]
#endif
        public QueryBuilderParameter<ConnectorServicesRefreshTokenInput> RefreshToken
        {
            get { return (QueryBuilderParameter<ConnectorServicesRefreshTokenInput>)_refreshToken.Value; }
            set { _refreshToken = new InputPropertyInfo { Name = "refreshToken", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthStaticTokenInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthStaticTokenInput> StaticToken
        {
            get { return (QueryBuilderParameter<ConnectorAuthStaticTokenInput>)_staticToken.Value; }
            set { _staticToken = new InputPropertyInfo { Name = "staticToken", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthUsernamePasswordInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthUsernamePasswordInput> UsernamePassword
        {
            get { return (QueryBuilderParameter<ConnectorAuthUsernamePasswordInput>)_usernamePassword.Value; }
            set { _usernamePassword = new InputPropertyInfo { Name = "usernamePassword", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_refreshToken.Name != null) yield return _refreshToken;
            if (_staticToken.Name != null) yield return _staticToken;
            if (_usernamePassword.Name != null) yield return _usernamePassword;
        }
    }

    public class ConnectorAuthStaticTokenInput : IGraphQlInputObject
    {
        private InputPropertyInfo _token;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Token
        {
            get { return (QueryBuilderParameter<string>)_token.Value; }
            set { _token = new InputPropertyInfo { Name = "token", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_token.Name != null) yield return _token;
        }
    }

    public class ConnectorAuthUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorAuth;
        private InputPropertyInfo _secret;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthInput> ConnectorAuth
        {
            get { return (QueryBuilderParameter<ConnectorAuthInput>)_connectorAuth.Value; }
            set { _connectorAuth = new InputPropertyInfo { Name = "connectorAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorAuthRequestSecretInput>))]
#endif
        public QueryBuilderParameter<ConnectorAuthRequestSecretInput> Secret
        {
            get { return (QueryBuilderParameter<ConnectorAuthRequestSecretInput>)_secret.Value; }
            set { _secret = new InputPropertyInfo { Name = "secret", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorAuth.Name != null) yield return _connectorAuth;
            if (_secret.Name != null) yield return _secret;
        }
    }

    public class ConnectorAuthUsernamePasswordInput : IGraphQlInputObject
    {
        private InputPropertyInfo _password;
        private InputPropertyInfo _username;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_password.Name != null) yield return _password;
            if (_username.Name != null) yield return _username;
        }
    }

    public class ConnectorCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connector;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorInput>))]
#endif
        public QueryBuilderParameter<ConnectorInput> Connector
        {
            get { return (QueryBuilderParameter<ConnectorInput>)_connector.Value; }
            set { _connector = new InputPropertyInfo { Name = "connector", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connector.Name != null) yield return _connector;
        }
    }

    public class ConnectorDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorInput : IGraphQlInputObject
    {
        private InputPropertyInfo _config;
        private InputPropertyInfo _configHash;
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastSeen;
        private InputPropertyInfo _lastUpdatedBy;
        private InputPropertyInfo _name;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stateDetails;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _workflowId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Config
        {
            get { return (QueryBuilderParameter<object>)_config.Value; }
            set { _config = new InputPropertyInfo { Name = "config", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConfigHash
        {
            get { return (QueryBuilderParameter<string>)_configHash.Value; }
            set { _configHash = new InputPropertyInfo { Name = "configHash", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<string>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastSeen
        {
            get { return (QueryBuilderParameter<object>)_lastSeen.Value; }
            set { _lastSeen = new InputPropertyInfo { Name = "lastSeen", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LastUpdatedBy
        {
            get { return (QueryBuilderParameter<string>)_lastUpdatedBy.Value; }
            set { _lastUpdatedBy = new InputPropertyInfo { Name = "lastUpdatedBy", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorStateInput?>))]
#endif
        public QueryBuilderParameter<ConnectorStateInput?> State
        {
            get { return (QueryBuilderParameter<ConnectorStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StateDetails
        {
            get { return (QueryBuilderParameter<string>)_stateDetails.Value; }
            set { _stateDetails = new InputPropertyInfo { Name = "stateDetails", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> WorkflowId
        {
            get { return (QueryBuilderParameter<string>)_workflowId.Value; }
            set { _workflowId = new InputPropertyInfo { Name = "workflowId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_config.Name != null) yield return _config;
            if (_configHash.Name != null) yield return _configHash;
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_lastSeen.Name != null) yield return _lastSeen;
            if (_lastUpdatedBy.Name != null) yield return _lastUpdatedBy;
            if (_name.Name != null) yield return _name;
            if (_state.Name != null) yield return _state;
            if (_stateDetails.Name != null) yield return _stateDetails;
            if (_updated.Name != null) yield return _updated;
            if (_workflowId.Name != null) yield return _workflowId;
        }
    }

    public class ConnectorRequestsConnectorRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<string>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class ConnectorRequestsCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<string>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
        }
    }

    public class ConnectorRequestsFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
        }
    }

    public class ConnectorServicesRefreshTokenInput : IGraphQlInputObject
    {
        private InputPropertyInfo _refreshToken;
        private InputPropertyInfo _serviceName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RefreshToken
        {
            get { return (QueryBuilderParameter<string>)_refreshToken.Value; }
            set { _refreshToken = new InputPropertyInfo { Name = "refreshToken", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ServiceName
        {
            get { return (QueryBuilderParameter<string>)_serviceName.Value; }
            set { _serviceName = new InputPropertyInfo { Name = "serviceName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_refreshToken.Name != null) yield return _refreshToken;
            if (_serviceName.Name != null) yield return _serviceName;
        }
    }

    public class ConnectorTypeFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connectorTypeId;
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _version;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> ConnectorTypeId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_connectorTypeId.Value; }
            set { _connectorTypeId = new InputPropertyInfo { Name = "connectorTypeId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Description
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Version
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_version.Value; }
            set { _version = new InputPropertyInfo { Name = "version", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connectorTypeId.Name != null) yield return _connectorTypeId;
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_version.Name != null) yield return _version;
        }
    }

    public class ConnectorTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _configSchema;
        private InputPropertyInfo _description;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _taskQueue;
        private InputPropertyInfo _version;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> ConfigSchema
        {
            get { return (QueryBuilderParameter<object>)_configSchema.Value; }
            set { _configSchema = new InputPropertyInfo { Name = "configSchema", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TaskQueue
        {
            get { return (QueryBuilderParameter<string>)_taskQueue.Value; }
            set { _taskQueue = new InputPropertyInfo { Name = "taskQueue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Version
        {
            get { return (QueryBuilderParameter<string>)_version.Value; }
            set { _version = new InputPropertyInfo { Name = "version", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_configSchema.Name != null) yield return _configSchema;
            if (_description.Name != null) yield return _description;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_taskQueue.Name != null) yield return _taskQueue;
            if (_version.Name != null) yield return _version;
        }
    }

    public class ConnectorUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _connector;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ConnectorInput>))]
#endif
        public QueryBuilderParameter<ConnectorInput> Connector
        {
            get { return (QueryBuilderParameter<ConnectorInput>)_connector.Value; }
            set { _connector = new InputPropertyInfo { Name = "connector", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_connector.Name != null) yield return _connector;
        }
    }

    public class ConnectorUpsertConfigRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _config;
        private InputPropertyInfo _configHash;
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Config
        {
            get { return (QueryBuilderParameter<object>)_config.Value; }
            set { _config = new InputPropertyInfo { Name = "config", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ConfigHash
        {
            get { return (QueryBuilderParameter<string>)_configHash.Value; }
            set { _configHash = new InputPropertyInfo { Name = "configHash", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_config.Name != null) yield return _config;
            if (_configHash.Name != null) yield return _configHash;
            if (_id.Name != null) yield return _id;
        }
    }

    public class DateTimeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _in;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Eq
        {
            get { return (QueryBuilderParameter<object>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gt
        {
            get { return (QueryBuilderParameter<object>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gte
        {
            get { return (QueryBuilderParameter<object>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
#endif
        public QueryBuilderParameter<ICollection<object>> In
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lt
        {
            get { return (QueryBuilderParameter<object>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lte
        {
            get { return (QueryBuilderParameter<object>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_in.Name != null) yield return _in;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
        }
    }

    public class DeviceManufacturerInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _id;
        private InputPropertyInfo _logoUrl;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LogoUrl
        {
            get { return (QueryBuilderParameter<string>)_logoUrl.Value; }
            set { _logoUrl = new InputPropertyInfo { Name = "logoUrl", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_id.Name != null) yield return _id;
            if (_logoUrl.Name != null) yield return _logoUrl;
            if (_name.Name != null) yield return _name;
        }
    }

    public class DeviceModelInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _id;
        private InputPropertyInfo _imageUrl;
        private InputPropertyInfo _manufacturerId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _seeAlsoUrls;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ImageUrl
        {
            get { return (QueryBuilderParameter<string>)_imageUrl.Value; }
            set { _imageUrl = new InputPropertyInfo { Name = "imageUrl", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ManufacturerId
        {
            get { return (QueryBuilderParameter<string>)_manufacturerId.Value; }
            set { _manufacturerId = new InputPropertyInfo { Name = "manufacturerId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> SeeAlsoUrls
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_seeAlsoUrls.Value; }
            set { _seeAlsoUrls = new InputPropertyInfo { Name = "seeAlsoUrls", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_id.Name != null) yield return _id;
            if (_imageUrl.Name != null) yield return _imageUrl;
            if (_manufacturerId.Name != null) yield return _manufacturerId;
            if (_name.Name != null) yield return _name;
            if (_seeAlsoUrls.Name != null) yield return _seeAlsoUrls;
        }
    }

    public class ExampleFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _color;
        private InputPropertyInfo _make;
        private InputPropertyInfo _model;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _vin;
        private InputPropertyInfo _year;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ExampleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ExampleFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ExampleFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "color", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Make
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_make.Value; }
            set { _make = new InputPropertyInfo { Name = "make", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Model
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_model.Value; }
            set { _model = new InputPropertyInfo { Name = "model", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ExampleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ExampleFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<ExampleFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ExampleFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ExampleFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ExampleFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Vin
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_vin.Value; }
            set { _vin = new InputPropertyInfo { Name = "vin", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Year
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_year.Value; }
            set { _year = new InputPropertyInfo { Name = "year", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_color.Name != null) yield return _color;
            if (_make.Name != null) yield return _make;
            if (_model.Name != null) yield return _model;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_vin.Name != null) yield return _vin;
            if (_year.Name != null) yield return _year;
        }
    }

    public class FloorCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _floor;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorMutationInput>))]
#endif
        public QueryBuilderParameter<FloorMutationInput> Floor
        {
            get { return (QueryBuilderParameter<FloorMutationInput>)_floor.Value; }
            set { _floor = new InputPropertyInfo { Name = "floor", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_floor.Name != null) yield return _floor;
        }
    }

    public class FloorDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class FloorFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<FloorFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<FloorFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<FloorFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorFilter>))]
#endif
        public QueryBuilderParameter<FloorFilter> Not
        {
            get { return (QueryBuilderParameter<FloorFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<FloorFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<FloorFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<FloorFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class FloorMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _buildingId;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _level;
        private InputPropertyInfo _name;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> BuildingId
        {
            get { return (QueryBuilderParameter<string>)_buildingId.Value; }
            set { _buildingId = new InputPropertyInfo { Name = "buildingId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Level
        {
            get { return (QueryBuilderParameter<int?>)_level.Value; }
            set { _level = new InputPropertyInfo { Name = "level", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Type
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_buildingId.Name != null) yield return _buildingId;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_level.Name != null) yield return _level;
            if (_name.Name != null) yield return _name;
            if (_type.Name != null) yield return _type;
        }
    }

    public class FloorUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _floor;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloorMutationInput>))]
#endif
        public QueryBuilderParameter<FloorMutationInput> Floor
        {
            get { return (QueryBuilderParameter<FloorMutationInput>)_floor.Value; }
            set { _floor = new InputPropertyInfo { Name = "floor", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_floor.Name != null) yield return _floor;
        }
    }

    public class GrpcRequestOptions : IGraphQlInputObject
    {
        private InputPropertyInfo _requestTimeout;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> RequestTimeout
        {
            get { return (QueryBuilderParameter<int?>)_requestTimeout.Value; }
            set { _requestTimeout = new InputPropertyInfo { Name = "requestTimeout", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestTimeout.Name != null) yield return _requestTimeout;
        }
    }

    public class GatewayActiveDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _lastSeenTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastSeenTime
        {
            get { return (QueryBuilderParameter<object>)_lastSeenTime.Value; }
            set { _lastSeenTime = new InputPropertyInfo { Name = "lastSeenTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_lastSeenTime.Name != null) yield return _lastSeenTime;
        }
    }

    public class GatewayAssignRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _assignment;
        private InputPropertyInfo _gatewayId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayAssignmentDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayAssignmentDetailsInput> Assignment
        {
            get { return (QueryBuilderParameter<GatewayAssignmentDetailsInput>)_assignment.Value; }
            set { _assignment = new InputPropertyInfo { Name = "assignment", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GatewayId
        {
            get { return (QueryBuilderParameter<string>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_assignment.Name != null) yield return _assignment;
            if (_gatewayId.Name != null) yield return _gatewayId;
        }
    }

    public class GatewayAssignmentDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _assignmentTime;
        private InputPropertyInfo _physicalPlaceId;
        private InputPropertyInfo _preciseGeoLocation;
        private InputPropertyInfo _servesPlaceIds;
        private InputPropertyInfo _servesSystemTypes;
        private InputPropertyInfo _uniqueName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> AssignmentTime
        {
            get { return (QueryBuilderParameter<object>)_assignmentTime.Value; }
            set { _assignmentTime = new InputPropertyInfo { Name = "assignmentTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PhysicalPlaceId
        {
            get { return (QueryBuilderParameter<string>)_physicalPlaceId.Value; }
            set { _physicalPlaceId = new InputPropertyInfo { Name = "physicalPlaceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> PreciseGeoLocation
        {
            get { return (QueryBuilderParameter<object>)_preciseGeoLocation.Value; }
            set { _preciseGeoLocation = new InputPropertyInfo { Name = "preciseGeoLocation", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> ServesPlaceIds
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_servesPlaceIds.Value; }
            set { _servesPlaceIds = new InputPropertyInfo { Name = "servesPlaceIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> ServesSystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_servesSystemTypes.Value; }
            set { _servesSystemTypes = new InputPropertyInfo { Name = "servesSystemTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UniqueName
        {
            get { return (QueryBuilderParameter<string>)_uniqueName.Value; }
            set { _uniqueName = new InputPropertyInfo { Name = "uniqueName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_assignmentTime.Name != null) yield return _assignmentTime;
            if (_physicalPlaceId.Name != null) yield return _physicalPlaceId;
            if (_preciseGeoLocation.Name != null) yield return _preciseGeoLocation;
            if (_servesPlaceIds.Name != null) yield return _servesPlaceIds;
            if (_servesSystemTypes.Name != null) yield return _servesSystemTypes;
            if (_uniqueName.Name != null) yield return _uniqueName;
        }
    }

    public class GatewayFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _deviceId;
        private InputPropertyInfo _gatewayId;
        private InputPropertyInfo _iccid;
        private InputPropertyInfo _imei;
        private InputPropertyInfo _lanMac;
        private InputPropertyInfo _mappedModel;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _physicalPlaceId;
        private InputPropertyInfo _serialNumber;
        private InputPropertyInfo _servesPlaceIds;
        private InputPropertyInfo _servesSystemTypes;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stateTime;
        private InputPropertyInfo _uniqueName;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> DeviceId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_deviceId.Value; }
            set { _deviceId = new InputPropertyInfo { Name = "deviceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GatewayId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Iccid
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_iccid.Value; }
            set { _iccid = new InputPropertyInfo { Name = "iccid", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Imei
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_imei.Value; }
            set { _imei = new InputPropertyInfo { Name = "imei", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> LanMac
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_lanMac.Value; }
            set { _lanMac = new InputPropertyInfo { Name = "lanMac", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayModelFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewayModelFilterExpressionInput> MappedModel
        {
            get { return (QueryBuilderParameter<GatewayModelFilterExpressionInput>)_mappedModel.Value; }
            set { _mappedModel = new InputPropertyInfo { Name = "mappedModel", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GatewayFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> PhysicalPlaceId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_physicalPlaceId.Value; }
            set { _physicalPlaceId = new InputPropertyInfo { Name = "physicalPlaceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> SerialNumber
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> ServesPlaceIds
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_servesPlaceIds.Value; }
            set { _servesPlaceIds = new InputPropertyInfo { Name = "servesPlaceIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySystemTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewaySystemTypeFilterExpressionInput> ServesSystemTypes
        {
            get { return (QueryBuilderParameter<GatewaySystemTypeFilterExpressionInput>)_servesSystemTypes.Value; }
            set { _servesSystemTypes = new InputPropertyInfo { Name = "servesSystemTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayLifecycleStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GatewayLifecycleStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<GatewayLifecycleStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimestampFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<TimestampFilterExpressionInput> StateTime
        {
            get { return (QueryBuilderParameter<TimestampFilterExpressionInput>)_stateTime.Value; }
            set { _stateTime = new InputPropertyInfo { Name = "stateTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> UniqueName
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_uniqueName.Value; }
            set { _uniqueName = new InputPropertyInfo { Name = "uniqueName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_deviceId.Name != null) yield return _deviceId;
            if (_gatewayId.Name != null) yield return _gatewayId;
            if (_iccid.Name != null) yield return _iccid;
            if (_imei.Name != null) yield return _imei;
            if (_lanMac.Name != null) yield return _lanMac;
            if (_mappedModel.Name != null) yield return _mappedModel;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_physicalPlaceId.Name != null) yield return _physicalPlaceId;
            if (_serialNumber.Name != null) yield return _serialNumber;
            if (_servesPlaceIds.Name != null) yield return _servesPlaceIds;
            if (_servesSystemTypes.Name != null) yield return _servesSystemTypes;
            if (_state.Name != null) yield return _state;
            if (_stateTime.Name != null) yield return _stateTime;
            if (_uniqueName.Name != null) yield return _uniqueName;
        }
    }

    public class GatewayFirstBootDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _bootTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> BootTime
        {
            get { return (QueryBuilderParameter<object>)_bootTime.Value; }
            set { _bootTime = new InputPropertyInfo { Name = "bootTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_bootTime.Name != null) yield return _bootTime;
        }
    }

    public class GatewayGenerateContainerSiDsRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo __;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> _
        {
            get { return (QueryBuilderParameter<string>)__.Value; }
            set { __ = new InputPropertyInfo { Name = "_", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (__.Name != null) yield return __;
        }
    }

    public class GatewayInput : IGraphQlInputObject
    {
        private InputPropertyInfo _active;
        private InputPropertyInfo _assignment;
        private InputPropertyInfo _firstBoot;
        private InputPropertyInfo _gatewayId;
        private InputPropertyInfo _provisioning;
        private InputPropertyInfo _registration;
        private InputPropertyInfo _rma;
        private InputPropertyInfo _shipping;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stateTime;
        private InputPropertyInfo _suspension;
        private InputPropertyInfo _termination;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayActiveDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayActiveDetailsInput> Active
        {
            get { return (QueryBuilderParameter<GatewayActiveDetailsInput>)_active.Value; }
            set { _active = new InputPropertyInfo { Name = "active", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayAssignmentDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayAssignmentDetailsInput> Assignment
        {
            get { return (QueryBuilderParameter<GatewayAssignmentDetailsInput>)_assignment.Value; }
            set { _assignment = new InputPropertyInfo { Name = "assignment", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayFirstBootDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayFirstBootDetailsInput> FirstBoot
        {
            get { return (QueryBuilderParameter<GatewayFirstBootDetailsInput>)_firstBoot.Value; }
            set { _firstBoot = new InputPropertyInfo { Name = "firstBoot", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GatewayId
        {
            get { return (QueryBuilderParameter<string>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayProvisioningDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayProvisioningDetailsInput> Provisioning
        {
            get { return (QueryBuilderParameter<GatewayProvisioningDetailsInput>)_provisioning.Value; }
            set { _provisioning = new InputPropertyInfo { Name = "provisioning", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayRegistrationDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayRegistrationDetailsInput> Registration
        {
            get { return (QueryBuilderParameter<GatewayRegistrationDetailsInput>)_registration.Value; }
            set { _registration = new InputPropertyInfo { Name = "registration", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayRmaDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayRmaDetailsInput> Rma
        {
            get { return (QueryBuilderParameter<GatewayRmaDetailsInput>)_rma.Value; }
            set { _rma = new InputPropertyInfo { Name = "rma", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayShippingDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayShippingDetailsInput> Shipping
        {
            get { return (QueryBuilderParameter<GatewayShippingDetailsInput>)_shipping.Value; }
            set { _shipping = new InputPropertyInfo { Name = "shipping", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayLifecycleStateInput?>))]
#endif
        public QueryBuilderParameter<GatewayLifecycleStateInput?> State
        {
            get { return (QueryBuilderParameter<GatewayLifecycleStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> StateTime
        {
            get { return (QueryBuilderParameter<object>)_stateTime.Value; }
            set { _stateTime = new InputPropertyInfo { Name = "stateTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySuspensionDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewaySuspensionDetailsInput> Suspension
        {
            get { return (QueryBuilderParameter<GatewaySuspensionDetailsInput>)_suspension.Value; }
            set { _suspension = new InputPropertyInfo { Name = "suspension", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayTerminationDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewayTerminationDetailsInput> Termination
        {
            get { return (QueryBuilderParameter<GatewayTerminationDetailsInput>)_termination.Value; }
            set { _termination = new InputPropertyInfo { Name = "termination", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_active.Name != null) yield return _active;
            if (_assignment.Name != null) yield return _assignment;
            if (_firstBoot.Name != null) yield return _firstBoot;
            if (_gatewayId.Name != null) yield return _gatewayId;
            if (_provisioning.Name != null) yield return _provisioning;
            if (_registration.Name != null) yield return _registration;
            if (_rma.Name != null) yield return _rma;
            if (_shipping.Name != null) yield return _shipping;
            if (_state.Name != null) yield return _state;
            if (_stateTime.Name != null) yield return _stateTime;
            if (_suspension.Name != null) yield return _suspension;
            if (_termination.Name != null) yield return _termination;
        }
    }

    public class GatewayLifecycleStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayLifecycleStateInput?>))]
#endif
        public QueryBuilderParameter<GatewayLifecycleStateInput?> Eq
        {
            get { return (QueryBuilderParameter<GatewayLifecycleStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayLifecycleStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayLifecycleStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GatewayLifecycleStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GatewayModelFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayModelInput?>))]
#endif
        public QueryBuilderParameter<GatewayModelInput?> Eq
        {
            get { return (QueryBuilderParameter<GatewayModelInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayModelInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayModelInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GatewayModelInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GatewayNoteInput : IGraphQlInputObject
    {
        private InputPropertyInfo _note;
        private InputPropertyInfo _time;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Time
        {
            get { return (QueryBuilderParameter<object>)_time.Value; }
            set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_note.Name != null) yield return _note;
            if (_time.Name != null) yield return _time;
        }
    }

    public class GatewayProvisioningDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _provisionTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> ProvisionTime
        {
            get { return (QueryBuilderParameter<object>)_provisionTime.Value; }
            set { _provisionTime = new InputPropertyInfo { Name = "provisionTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_provisionTime.Name != null) yield return _provisionTime;
        }
    }

    public class GatewayRmaDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _notesCustomer;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _rmaTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayNoteInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayNoteInput>> NotesCustomer
        {
            get { return (QueryBuilderParameter<ICollection<GatewayNoteInput>>)_notesCustomer.Value; }
            set { _notesCustomer = new InputPropertyInfo { Name = "notesCustomer", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayRmaReasonInput?>))]
#endif
        public QueryBuilderParameter<GatewayRmaReasonInput?> Reason
        {
            get { return (QueryBuilderParameter<GatewayRmaReasonInput?>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "reason", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> RmaTime
        {
            get { return (QueryBuilderParameter<object>)_rmaTime.Value; }
            set { _rmaTime = new InputPropertyInfo { Name = "rmaTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_notesCustomer.Name != null) yield return _notesCustomer;
            if (_reason.Name != null) yield return _reason;
            if (_rmaTime.Name != null) yield return _rmaTime;
        }
    }

    public class GatewayRegisterContainerRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _availableCertificatePem;
        private InputPropertyInfo _signingCertificatePem;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> AvailableCertificatePem
        {
            get { return (QueryBuilderParameter<string>)_availableCertificatePem.Value; }
            set { _availableCertificatePem = new InputPropertyInfo { Name = "availableCertificatePem", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SigningCertificatePem
        {
            get { return (QueryBuilderParameter<string>)_signingCertificatePem.Value; }
            set { _signingCertificatePem = new InputPropertyInfo { Name = "signingCertificatePem", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_availableCertificatePem.Name != null) yield return _availableCertificatePem;
            if (_signingCertificatePem.Name != null) yield return _signingCertificatePem;
        }
    }

    public class GatewayRegistrationDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _imei;
        private InputPropertyInfo _lanMac;
        private InputPropertyInfo _mappedModel;
        private InputPropertyInfo _serialNumber;
        private InputPropertyInfo _sim;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Imei
        {
            get { return (QueryBuilderParameter<string>)_imei.Value; }
            set { _imei = new InputPropertyInfo { Name = "imei", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LanMac
        {
            get { return (QueryBuilderParameter<string>)_lanMac.Value; }
            set { _lanMac = new InputPropertyInfo { Name = "lanMac", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayModelInput?>))]
#endif
        public QueryBuilderParameter<GatewayModelInput?> MappedModel
        {
            get { return (QueryBuilderParameter<GatewayModelInput?>)_mappedModel.Value; }
            set { _mappedModel = new InputPropertyInfo { Name = "mappedModel", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SerialNumber
        {
            get { return (QueryBuilderParameter<string>)_serialNumber.Value; }
            set { _serialNumber = new InputPropertyInfo { Name = "serialNumber", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySimInfoInput>))]
#endif
        public QueryBuilderParameter<GatewaySimInfoInput> Sim
        {
            get { return (QueryBuilderParameter<GatewaySimInfoInput>)_sim.Value; }
            set { _sim = new InputPropertyInfo { Name = "sim", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_imei.Name != null) yield return _imei;
            if (_lanMac.Name != null) yield return _lanMac;
            if (_mappedModel.Name != null) yield return _mappedModel;
            if (_serialNumber.Name != null) yield return _serialNumber;
            if (_sim.Name != null) yield return _sim;
        }
    }

    public class GatewaySimCertificateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _pem;
        private InputPropertyInfo _subjectKeyId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Pem
        {
            get { return (QueryBuilderParameter<string>)_pem.Value; }
            set { _pem = new InputPropertyInfo { Name = "pem", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SubjectKeyId
        {
            get { return (QueryBuilderParameter<string>)_subjectKeyId.Value; }
            set { _subjectKeyId = new InputPropertyInfo { Name = "subjectKeyId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_pem.Name != null) yield return _pem;
            if (_subjectKeyId.Name != null) yield return _subjectKeyId;
        }
    }

    public class GatewaySimInfoInput : IGraphQlInputObject
    {
        private InputPropertyInfo _availableCertificate;
        private InputPropertyInfo _iccid;
        private InputPropertyInfo _signingCertificate;
        private InputPropertyInfo _simType;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySimCertificateInput>))]
#endif
        public QueryBuilderParameter<GatewaySimCertificateInput> AvailableCertificate
        {
            get { return (QueryBuilderParameter<GatewaySimCertificateInput>)_availableCertificate.Value; }
            set { _availableCertificate = new InputPropertyInfo { Name = "availableCertificate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Iccid
        {
            get { return (QueryBuilderParameter<string>)_iccid.Value; }
            set { _iccid = new InputPropertyInfo { Name = "iccid", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySimCertificateInput>))]
#endif
        public QueryBuilderParameter<GatewaySimCertificateInput> SigningCertificate
        {
            get { return (QueryBuilderParameter<GatewaySimCertificateInput>)_signingCertificate.Value; }
            set { _signingCertificate = new InputPropertyInfo { Name = "signingCertificate", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySimTypeInput?>))]
#endif
        public QueryBuilderParameter<GatewaySimTypeInput?> SimType
        {
            get { return (QueryBuilderParameter<GatewaySimTypeInput?>)_simType.Value; }
            set { _simType = new InputPropertyInfo { Name = "simType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_availableCertificate.Name != null) yield return _availableCertificate;
            if (_iccid.Name != null) yield return _iccid;
            if (_signingCertificate.Name != null) yield return _signingCertificate;
            if (_simType.Name != null) yield return _simType;
        }
    }

    public class GatewayShippingDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _courier;
        private InputPropertyInfo _shipTime;
        private InputPropertyInfo _status;
        private InputPropertyInfo _statusTime;
        private InputPropertyInfo _trackingNumber;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayCourierInput?>))]
#endif
        public QueryBuilderParameter<GatewayCourierInput?> Courier
        {
            get { return (QueryBuilderParameter<GatewayCourierInput?>)_courier.Value; }
            set { _courier = new InputPropertyInfo { Name = "courier", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> ShipTime
        {
            get { return (QueryBuilderParameter<object>)_shipTime.Value; }
            set { _shipTime = new InputPropertyInfo { Name = "shipTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayShippingStatusInput?>))]
#endif
        public QueryBuilderParameter<GatewayShippingStatusInput?> Status
        {
            get { return (QueryBuilderParameter<GatewayShippingStatusInput?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> StatusTime
        {
            get { return (QueryBuilderParameter<object>)_statusTime.Value; }
            set { _statusTime = new InputPropertyInfo { Name = "statusTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TrackingNumber
        {
            get { return (QueryBuilderParameter<string>)_trackingNumber.Value; }
            set { _trackingNumber = new InputPropertyInfo { Name = "trackingNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_courier.Name != null) yield return _courier;
            if (_shipTime.Name != null) yield return _shipTime;
            if (_status.Name != null) yield return _status;
            if (_statusTime.Name != null) yield return _statusTime;
            if (_trackingNumber.Name != null) yield return _trackingNumber;
        }
    }

    public class GatewaySuspendRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _details;
        private InputPropertyInfo _gatewayId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySuspensionDetailsInput>))]
#endif
        public QueryBuilderParameter<GatewaySuspensionDetailsInput> Details
        {
            get { return (QueryBuilderParameter<GatewaySuspensionDetailsInput>)_details.Value; }
            set { _details = new InputPropertyInfo { Name = "details", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GatewayId
        {
            get { return (QueryBuilderParameter<string>)_gatewayId.Value; }
            set { _gatewayId = new InputPropertyInfo { Name = "gatewayId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_details.Name != null) yield return _details;
            if (_gatewayId.Name != null) yield return _gatewayId;
        }
    }

    public class GatewaySuspensionDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _notesCustomer;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _suspensionTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayNoteInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayNoteInput>> NotesCustomer
        {
            get { return (QueryBuilderParameter<ICollection<GatewayNoteInput>>)_notesCustomer.Value; }
            set { _notesCustomer = new InputPropertyInfo { Name = "notesCustomer", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewaySuspensionReasonInput?>))]
#endif
        public QueryBuilderParameter<GatewaySuspensionReasonInput?> Reason
        {
            get { return (QueryBuilderParameter<GatewaySuspensionReasonInput?>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "reason", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> SuspensionTime
        {
            get { return (QueryBuilderParameter<object>)_suspensionTime.Value; }
            set { _suspensionTime = new InputPropertyInfo { Name = "suspensionTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_notesCustomer.Name != null) yield return _notesCustomer;
            if (_reason.Name != null) yield return _reason;
            if (_suspensionTime.Name != null) yield return _suspensionTime;
        }
    }

    public class GatewaySystemTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeKeyInput?>))]
#endif
        public QueryBuilderParameter<SystemTypeKeyInput?> Eq
        {
            get { return (QueryBuilderParameter<SystemTypeKeyInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GatewayTerminationDetailsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _notesCustomer;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _terminationTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GatewayNoteInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GatewayNoteInput>> NotesCustomer
        {
            get { return (QueryBuilderParameter<ICollection<GatewayNoteInput>>)_notesCustomer.Value; }
            set { _notesCustomer = new InputPropertyInfo { Name = "notesCustomer", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GatewayTerminationReasonInput?>))]
#endif
        public QueryBuilderParameter<GatewayTerminationReasonInput?> Reason
        {
            get { return (QueryBuilderParameter<GatewayTerminationReasonInput?>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "reason", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> TerminationTime
        {
            get { return (QueryBuilderParameter<object>)_terminationTime.Value; }
            set { _terminationTime = new InputPropertyInfo { Name = "terminationTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_notesCustomer.Name != null) yield return _notesCustomer;
            if (_reason.Name != null) yield return _reason;
            if (_terminationTime.Name != null) yield return _terminationTime;
        }
    }

    public class GeoPointInput : IGraphQlInputObject
    {
        private InputPropertyInfo _coordinates;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal>>))]
#endif
        public QueryBuilderParameter<ICollection<decimal>> Coordinates
        {
            get { return (QueryBuilderParameter<ICollection<decimal>>)_coordinates.Value; }
            set { _coordinates = new InputPropertyInfo { Name = "coordinates", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Type
        {
            get { return (QueryBuilderParameter<string>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_coordinates.Name != null) yield return _coordinates;
            if (_type.Name != null) yield return _type;
        }
    }

    public class GrantCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _requestedAddress;
        private InputPropertyInfo _requests;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PostalAddressInput>))]
#endif
        public QueryBuilderParameter<PostalAddressInput> RequestedAddress
        {
            get { return (QueryBuilderParameter<PostalAddressInput>)_requestedAddress.Value; }
            set { _requestedAddress = new InputPropertyInfo { Name = "requestedAddress", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantRequestInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantRequestInput>> Requests
        {
            get { return (QueryBuilderParameter<ICollection<GrantRequestInput>>)_requests.Value; }
            set { _requests = new InputPropertyInfo { Name = "requests", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestedAddress.Name != null) yield return _requestedAddress;
            if (_requests.Name != null) yield return _requests;
        }
    }

    public class GrantDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantorNote;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _maintainChain;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GrantorNote
        {
            get { return (QueryBuilderParameter<string>)_grantorNote.Value; }
            set { _grantorNote = new InputPropertyInfo { Name = "grantorNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MaintainChain
        {
            get { return (QueryBuilderParameter<bool?>)_maintainChain.Value; }
            set { _maintainChain = new InputPropertyInfo { Name = "maintainChain", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantorNote.Name != null) yield return _grantorNote;
            if (_ids.Name != null) yield return _ids;
            if (_maintainChain.Name != null) yield return _maintainChain;
        }
    }

    public class GrantFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _grantedIds;
        private InputPropertyInfo _grantedTypes;
        private InputPropertyInfo _granteeUserId;
        private InputPropertyInfo _grantorUserId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GrantedIds
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_grantedIds.Value; }
            set { _grantedIds = new InputPropertyInfo { Name = "grantedIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<SystemTypeFilterExpressionInput> GrantedTypes
        {
            get { return (QueryBuilderParameter<SystemTypeFilterExpressionInput>)_grantedTypes.Value; }
            set { _grantedTypes = new InputPropertyInfo { Name = "grantedTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GranteeUserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_granteeUserId.Value; }
            set { _granteeUserId = new InputPropertyInfo { Name = "granteeUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> GrantorUserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_grantorUserId.Value; }
            set { _grantorUserId = new InputPropertyInfo { Name = "grantorUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GrantFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantGrantStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<GrantGrantStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<GrantGrantStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_grantedIds.Name != null) yield return _grantedIds;
            if (_grantedTypes.Name != null) yield return _grantedTypes;
            if (_granteeUserId.Name != null) yield return _granteeUserId;
            if (_grantorUserId.Name != null) yield return _grantorUserId;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_state.Name != null) yield return _state;
        }
    }

    public class GrantGrantStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantGrantStateInput?>))]
#endif
        public QueryBuilderParameter<GrantGrantStateInput?> Eq
        {
            get { return (QueryBuilderParameter<GrantGrantStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantGrantStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantGrantStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<GrantGrantStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class GrantInput : IGraphQlInputObject
    {
        private InputPropertyInfo _approvalTime;
        private InputPropertyInfo _grantedPlacesAndTypes;
        private InputPropertyInfo _granteeUserId;
        private InputPropertyInfo _grantorNotes;
        private InputPropertyInfo _grantorUserId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _requestTime;
        private InputPropertyInfo _requests;
        private InputPropertyInfo _state;
        private InputPropertyInfo _updateTime;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> ApprovalTime
        {
            get { return (QueryBuilderParameter<object>)_approvalTime.Value; }
            set { _approvalTime = new InputPropertyInfo { Name = "approvalTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantPlacesAndTypesInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>> GrantedPlacesAndTypes
        {
            get { return (QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>>)_grantedPlacesAndTypes.Value; }
            set { _grantedPlacesAndTypes = new InputPropertyInfo { Name = "grantedPlacesAndTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GranteeUserId
        {
            get { return (QueryBuilderParameter<string>)_granteeUserId.Value; }
            set { _granteeUserId = new InputPropertyInfo { Name = "granteeUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantNoteInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantNoteInput>> GrantorNotes
        {
            get { return (QueryBuilderParameter<ICollection<GrantNoteInput>>)_grantorNotes.Value; }
            set { _grantorNotes = new InputPropertyInfo { Name = "grantorNotes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GrantorUserId
        {
            get { return (QueryBuilderParameter<string>)_grantorUserId.Value; }
            set { _grantorUserId = new InputPropertyInfo { Name = "grantorUserId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> RequestTime
        {
            get { return (QueryBuilderParameter<object>)_requestTime.Value; }
            set { _requestTime = new InputPropertyInfo { Name = "requestTime", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantRequestInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantRequestInput>> Requests
        {
            get { return (QueryBuilderParameter<ICollection<GrantRequestInput>>)_requests.Value; }
            set { _requests = new InputPropertyInfo { Name = "requests", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantGrantStateInput?>))]
#endif
        public QueryBuilderParameter<GrantGrantStateInput?> State
        {
            get { return (QueryBuilderParameter<GrantGrantStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> UpdateTime
        {
            get { return (QueryBuilderParameter<object>)_updateTime.Value; }
            set { _updateTime = new InputPropertyInfo { Name = "updateTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_approvalTime.Name != null) yield return _approvalTime;
            if (_grantedPlacesAndTypes.Name != null) yield return _grantedPlacesAndTypes;
            if (_granteeUserId.Name != null) yield return _granteeUserId;
            if (_grantorNotes.Name != null) yield return _grantorNotes;
            if (_grantorUserId.Name != null) yield return _grantorUserId;
            if (_id.Name != null) yield return _id;
            if (_requestTime.Name != null) yield return _requestTime;
            if (_requests.Name != null) yield return _requests;
            if (_state.Name != null) yield return _state;
            if (_updateTime.Name != null) yield return _updateTime;
        }
    }

    public class GrantNoteInput : IGraphQlInputObject
    {
        private InputPropertyInfo _note;
        private InputPropertyInfo _time;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "note", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Time
        {
            get { return (QueryBuilderParameter<object>)_time.Value; }
            set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_note.Name != null) yield return _note;
            if (_time.Name != null) yield return _time;
        }
    }

    public class GrantPlacesAndTypesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantedIds;
        private InputPropertyInfo _grantedSystemTypes;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> GrantedIds
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_grantedIds.Value; }
            set { _grantedIds = new InputPropertyInfo { Name = "grantedIds", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> GrantedSystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_grantedSystemTypes.Value; }
            set { _grantedSystemTypes = new InputPropertyInfo { Name = "grantedSystemTypes", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantedIds.Name != null) yield return _grantedIds;
            if (_grantedSystemTypes.Name != null) yield return _grantedSystemTypes;
        }
    }

    public class GrantRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _requestNote;
        private InputPropertyInfo _requestType;
        private InputPropertyInfo _systemTypes;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RequestNote
        {
            get { return (QueryBuilderParameter<string>)_requestNote.Value; }
            set { _requestNote = new InputPropertyInfo { Name = "requestNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantRequestTypeInput?>))]
#endif
        public QueryBuilderParameter<GrantRequestTypeInput?> RequestType
        {
            get { return (QueryBuilderParameter<GrantRequestTypeInput?>)_requestType.Value; }
            set { _requestType = new InputPropertyInfo { Name = "requestType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> SystemTypes
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_systemTypes.Value; }
            set { _systemTypes = new InputPropertyInfo { Name = "systemTypes", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_requestNote.Name != null) yield return _requestNote;
            if (_requestType.Name != null) yield return _requestType;
            if (_systemTypes.Name != null) yield return _systemTypes;
        }
    }

    public class GrantUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _grantedPlacesAndTypes;
        private InputPropertyInfo _grantorNote;
        private InputPropertyInfo _id;
        private InputPropertyInfo _requests;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantPlacesAndTypesInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>> GrantedPlacesAndTypes
        {
            get { return (QueryBuilderParameter<ICollection<GrantPlacesAndTypesInput>>)_grantedPlacesAndTypes.Value; }
            set { _grantedPlacesAndTypes = new InputPropertyInfo { Name = "grantedPlacesAndTypes", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> GrantorNote
        {
            get { return (QueryBuilderParameter<string>)_grantorNote.Value; }
            set { _grantorNote = new InputPropertyInfo { Name = "grantorNote", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrantRequestInput>>))]
#endif
        public QueryBuilderParameter<ICollection<GrantRequestInput>> Requests
        {
            get { return (QueryBuilderParameter<ICollection<GrantRequestInput>>)_requests.Value; }
            set { _requests = new InputPropertyInfo { Name = "requests", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrantGrantStateInput?>))]
#endif
        public QueryBuilderParameter<GrantGrantStateInput?> State
        {
            get { return (QueryBuilderParameter<GrantGrantStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_grantedPlacesAndTypes.Name != null) yield return _grantedPlacesAndTypes;
            if (_grantorNote.Name != null) yield return _grantorNote;
            if (_id.Name != null) yield return _id;
            if (_requests.Name != null) yield return _requests;
            if (_state.Name != null) yield return _state;
        }
    }

    public class IdFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class IpAllowlistMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _allowedIps;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AllowedIps
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_allowedIps.Value; }
            set { _allowedIps = new InputPropertyInfo { Name = "allowedIps", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_allowedIps.Name != null) yield return _allowedIps;
        }
    }

    public class InviteCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _invite;
        private InputPropertyInfo _skipSendEmail;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInput>))]
#endif
        public QueryBuilderParameter<InviteInput> Invite
        {
            get { return (QueryBuilderParameter<InviteInput>)_invite.Value; }
            set { _invite = new InputPropertyInfo { Name = "invite", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> SkipSendEmail
        {
            get { return (QueryBuilderParameter<bool?>)_skipSendEmail.Value; }
            set { _skipSendEmail = new InputPropertyInfo { Name = "skipSendEmail", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_invite.Name != null) yield return _invite;
            if (_skipSendEmail.Name != null) yield return _skipSendEmail;
        }
    }

    public class InviteDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class InviteFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _email;
        private InputPropertyInfo _inviteId;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> InviteId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_inviteId.Value; }
            set { _inviteId = new InputPropertyInfo { Name = "inviteId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<InviteFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInviteStatusFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<InviteInviteStatusFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<InviteInviteStatusFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_email.Name != null) yield return _email;
            if (_inviteId.Name != null) yield return _inviteId;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_state.Name != null) yield return _state;
        }
    }

    public class InviteInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _email;
        private InputPropertyInfo _expiration;
        private InputPropertyInfo _id;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _status;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Expiration
        {
            get { return (QueryBuilderParameter<object>)_expiration.Value; }
            set { _expiration = new InputPropertyInfo { Name = "expiration", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleInput>> Roles
        {
            get { return (QueryBuilderParameter<ICollection<RoleInput>>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInviteStatusInput?>))]
#endif
        public QueryBuilderParameter<InviteInviteStatusInput?> Status
        {
            get { return (QueryBuilderParameter<InviteInviteStatusInput?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_email.Name != null) yield return _email;
            if (_expiration.Name != null) yield return _expiration;
            if (_id.Name != null) yield return _id;
            if (_roles.Name != null) yield return _roles;
            if (_status.Name != null) yield return _status;
        }
    }

    public class InviteInviteStatusFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInviteStatusInput?>))]
#endif
        public QueryBuilderParameter<InviteInviteStatusInput?> Eq
        {
            get { return (QueryBuilderParameter<InviteInviteStatusInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InviteInviteStatusInput>>))]
#endif
        public QueryBuilderParameter<ICollection<InviteInviteStatusInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<InviteInviteStatusInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class InviteUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _invite;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InviteInput>))]
#endif
        public QueryBuilderParameter<InviteInput> Invite
        {
            get { return (QueryBuilderParameter<InviteInput>)_invite.Value; }
            set { _invite = new InputPropertyInfo { Name = "invite", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_invite.Name != null) yield return _invite;
        }
    }

    public class MtlsMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientCert;
        private InputPropertyInfo _issuerCert;
        private InputPropertyInfo _mappedCert;
        private InputPropertyInfo _matchCert;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> ClientCert
        {
            get { return (QueryBuilderParameter<CertificateInput>)_clientCert.Value; }
            set { _clientCert = new InputPropertyInfo { Name = "clientCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> IssuerCert
        {
            get { return (QueryBuilderParameter<CertificateInput>)_issuerCert.Value; }
            set { _issuerCert = new InputPropertyInfo { Name = "issuerCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MappedCert
        {
            get { return (QueryBuilderParameter<bool?>)_mappedCert.Value; }
            set { _mappedCert = new InputPropertyInfo { Name = "mappedCert", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertMatchInput>))]
#endif
        public QueryBuilderParameter<CertMatchInput> MatchCert
        {
            get { return (QueryBuilderParameter<CertMatchInput>)_matchCert.Value; }
            set { _matchCert = new InputPropertyInfo { Name = "matchCert", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientCert.Name != null) yield return _clientCert;
            if (_issuerCert.Name != null) yield return _issuerCert;
            if (_mappedCert.Name != null) yield return _mappedCert;
            if (_matchCert.Name != null) yield return _matchCert;
        }
    }

    public class MatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _ipAllowlist;
        private InputPropertyInfo _mtls;
        private InputPropertyInfo _noAuth;
        private InputPropertyInfo _regex;
        private InputPropertyInfo _signature;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IpAllowlistMatchInput>))]
#endif
        public QueryBuilderParameter<IpAllowlistMatchInput> IpAllowlist
        {
            get { return (QueryBuilderParameter<IpAllowlistMatchInput>)_ipAllowlist.Value; }
            set { _ipAllowlist = new InputPropertyInfo { Name = "ipAllowlist", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MtlsMatchInput>))]
#endif
        public QueryBuilderParameter<MtlsMatchInput> Mtls
        {
            get { return (QueryBuilderParameter<MtlsMatchInput>)_mtls.Value; }
            set { _mtls = new InputPropertyInfo { Name = "mtls", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> NoAuth
        {
            get { return (QueryBuilderParameter<bool?>)_noAuth.Value; }
            set { _noAuth = new InputPropertyInfo { Name = "noAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RegexMatchInput>))]
#endif
        public QueryBuilderParameter<RegexMatchInput> Regex
        {
            get { return (QueryBuilderParameter<RegexMatchInput>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "regex", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SignatureMatchInput>))]
#endif
        public QueryBuilderParameter<SignatureMatchInput> Signature
        {
            get { return (QueryBuilderParameter<SignatureMatchInput>)_signature.Value; }
            set { _signature = new InputPropertyInfo { Name = "signature", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueMatchInput>))]
#endif
        public QueryBuilderParameter<ValueMatchInput> Value
        {
            get { return (QueryBuilderParameter<ValueMatchInput>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_ipAllowlist.Name != null) yield return _ipAllowlist;
            if (_mtls.Name != null) yield return _mtls;
            if (_noAuth.Name != null) yield return _noAuth;
            if (_regex.Name != null) yield return _regex;
            if (_signature.Name != null) yield return _signature;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MetadataEntryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class OneTimePriceItemInput : IGraphQlInputObject
    {
        private InputPropertyInfo _priceId;
        private InputPropertyInfo _tier;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PriceId
        {
            get { return (QueryBuilderParameter<string>)_priceId.Value; }
            set { _priceId = new InputPropertyInfo { Name = "priceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TierInput>))]
#endif
        public QueryBuilderParameter<TierInput> Tier
        {
            get { return (QueryBuilderParameter<TierInput>)_tier.Value; }
            set { _tier = new InputPropertyInfo { Name = "tier", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_priceId.Name != null) yield return _priceId;
            if (_tier.Name != null) yield return _tier;
        }
    }

    public class OneTimePriceItemsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _items;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OneTimePriceItemInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OneTimePriceItemInput>> Items
        {
            get { return (QueryBuilderParameter<ICollection<OneTimePriceItemInput>>)_items.Value; }
            set { _items = new InputPropertyInfo { Name = "items", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_items.Name != null) yield return _items;
        }
    }

    public class OrgContactInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_name.Name != null) yield return _name;
        }
    }

    public class OrgFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _state;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<OrgFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<OrgFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OrgFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<OrgStateFilterExpressionInput> State
        {
            get { return (QueryBuilderParameter<OrgStateFilterExpressionInput>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_state.Name != null) yield return _state;
        }
    }

    public class OrgInput : IGraphQlInputObject
    {
        private InputPropertyInfo _adminContact;
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastUpdatedBy;
        private InputPropertyInfo _name;
        private InputPropertyInfo _state;
        private InputPropertyInfo _stripeCustomerId;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgContactInput>))]
#endif
        public QueryBuilderParameter<OrgContactInput> AdminContact
        {
            get { return (QueryBuilderParameter<OrgContactInput>)_adminContact.Value; }
            set { _adminContact = new InputPropertyInfo { Name = "adminContact", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LastUpdatedBy
        {
            get { return (QueryBuilderParameter<string>)_lastUpdatedBy.Value; }
            set { _lastUpdatedBy = new InputPropertyInfo { Name = "lastUpdatedBy", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateInput?>))]
#endif
        public QueryBuilderParameter<OrgStateInput?> State
        {
            get { return (QueryBuilderParameter<OrgStateInput?>)_state.Value; }
            set { _state = new InputPropertyInfo { Name = "state", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StripeCustomerId
        {
            get { return (QueryBuilderParameter<string>)_stripeCustomerId.Value; }
            set { _stripeCustomerId = new InputPropertyInfo { Name = "stripeCustomerId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_adminContact.Name != null) yield return _adminContact;
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_lastUpdatedBy.Name != null) yield return _lastUpdatedBy;
            if (_name.Name != null) yield return _name;
            if (_state.Name != null) yield return _state;
            if (_stripeCustomerId.Name != null) yield return _stripeCustomerId;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class OrgStateFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgStateInput?>))]
#endif
        public QueryBuilderParameter<OrgStateInput?> Eq
        {
            get { return (QueryBuilderParameter<OrgStateInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OrgStateInput>>))]
#endif
        public QueryBuilderParameter<ICollection<OrgStateInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<OrgStateInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class OrgUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _org;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OrgInput>))]
#endif
        public QueryBuilderParameter<OrgInput> Org
        {
            get { return (QueryBuilderParameter<OrgInput>)_org.Value; }
            set { _org = new InputPropertyInfo { Name = "org", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_org.Name != null) yield return _org;
        }
    }

    public class PermissionFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PermissionInput?>))]
#endif
        public QueryBuilderParameter<PermissionInput?> Eq
        {
            get { return (QueryBuilderParameter<PermissionInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PermissionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PermissionInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<PermissionInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class PersonFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _email;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PersonFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonFilter>))]
#endif
        public QueryBuilderParameter<PersonFilter> Not
        {
            get { return (QueryBuilderParameter<PersonFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PersonFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_email.Name != null) yield return _email;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class PersonalAccessTokenCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _pat;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonalAccessTokenInput>))]
#endif
        public QueryBuilderParameter<PersonalAccessTokenInput> Pat
        {
            get { return (QueryBuilderParameter<PersonalAccessTokenInput>)_pat.Value; }
            set { _pat = new InputPropertyInfo { Name = "pat", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_pat.Name != null) yield return _pat;
        }
    }

    public class PersonalAccessTokenDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class PersonalAccessTokenFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PersonalAccessTokenFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PersonalAccessTokenFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PermissionFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<PermissionFilterExpressionInput> Permissions
        {
            get { return (QueryBuilderParameter<PermissionFilterExpressionInput>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_permissions.Name != null) yield return _permissions;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class PersonalAccessTokenInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastExchanged;
        private InputPropertyInfo _name;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> LastExchanged
        {
            get { return (QueryBuilderParameter<object>)_lastExchanged.Value; }
            set { _lastExchanged = new InputPropertyInfo { Name = "lastExchanged", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PermissionInput>>))]
#endif
        public QueryBuilderParameter<ICollection<PermissionInput>> Permissions
        {
            get { return (QueryBuilderParameter<ICollection<PermissionInput>>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_id.Name != null) yield return _id;
            if (_lastExchanged.Name != null) yield return _lastExchanged;
            if (_name.Name != null) yield return _name;
            if (_permissions.Name != null) yield return _permissions;
            if (_updated.Name != null) yield return _updated;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class PersonalAccessTokenUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _pat;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PersonalAccessTokenInput>))]
#endif
        public QueryBuilderParameter<PersonalAccessTokenInput> Pat
        {
            get { return (QueryBuilderParameter<PersonalAccessTokenInput>)_pat.Value; }
            set { _pat = new InputPropertyInfo { Name = "pat", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_pat.Name != null) yield return _pat;
        }
    }

    public class PointFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PointFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PointFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<PointFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PointFilter>))]
#endif
        public QueryBuilderParameter<PointFilter> Not
        {
            get { return (QueryBuilderParameter<PointFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PointFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<PointFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PointFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class PostalAddressInput : IGraphQlInputObject
    {
        private InputPropertyInfo _addressLines;
        private InputPropertyInfo _administrativeArea;
        private InputPropertyInfo _languageCode;
        private InputPropertyInfo _locality;
        private InputPropertyInfo _organization;
        private InputPropertyInfo _postalCode;
        private InputPropertyInfo _recipients;
        private InputPropertyInfo _regionCode;
        private InputPropertyInfo _revision;
        private InputPropertyInfo _sortingCode;
        private InputPropertyInfo _sublocality;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> AddressLines
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_addressLines.Value; }
            set { _addressLines = new InputPropertyInfo { Name = "addressLines", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> AdministrativeArea
        {
            get { return (QueryBuilderParameter<string>)_administrativeArea.Value; }
            set { _administrativeArea = new InputPropertyInfo { Name = "administrativeArea", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LanguageCode
        {
            get { return (QueryBuilderParameter<string>)_languageCode.Value; }
            set { _languageCode = new InputPropertyInfo { Name = "languageCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Locality
        {
            get { return (QueryBuilderParameter<string>)_locality.Value; }
            set { _locality = new InputPropertyInfo { Name = "locality", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Organization
        {
            get { return (QueryBuilderParameter<string>)_organization.Value; }
            set { _organization = new InputPropertyInfo { Name = "organization", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PostalCode
        {
            get { return (QueryBuilderParameter<string>)_postalCode.Value; }
            set { _postalCode = new InputPropertyInfo { Name = "postalCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Recipients
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_recipients.Value; }
            set { _recipients = new InputPropertyInfo { Name = "recipients", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> RegionCode
        {
            get { return (QueryBuilderParameter<string>)_regionCode.Value; }
            set { _regionCode = new InputPropertyInfo { Name = "regionCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Revision
        {
            get { return (QueryBuilderParameter<int?>)_revision.Value; }
            set { _revision = new InputPropertyInfo { Name = "revision", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SortingCode
        {
            get { return (QueryBuilderParameter<string>)_sortingCode.Value; }
            set { _sortingCode = new InputPropertyInfo { Name = "sortingCode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Sublocality
        {
            get { return (QueryBuilderParameter<string>)_sublocality.Value; }
            set { _sublocality = new InputPropertyInfo { Name = "sublocality", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_addressLines.Name != null) yield return _addressLines;
            if (_administrativeArea.Name != null) yield return _administrativeArea;
            if (_languageCode.Name != null) yield return _languageCode;
            if (_locality.Name != null) yield return _locality;
            if (_organization.Name != null) yield return _organization;
            if (_postalCode.Name != null) yield return _postalCode;
            if (_recipients.Name != null) yield return _recipients;
            if (_regionCode.Name != null) yield return _regionCode;
            if (_revision.Name != null) yield return _revision;
            if (_sortingCode.Name != null) yield return _sortingCode;
            if (_sublocality.Name != null) yield return _sublocality;
        }
    }

    public class ProductBundleResponseInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _interval;
        private InputPropertyInfo _items;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _productType;
        private InputPropertyInfo _sku;
        private InputPropertyInfo _slug;
        private InputPropertyInfo _title;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntervalInput?>))]
#endif
        public QueryBuilderParameter<IntervalInput?> Interval
        {
            get { return (QueryBuilderParameter<IntervalInput?>)_interval.Value; }
            set { _interval = new InputPropertyInfo { Name = "interval", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ProductPriceItemResponseInput>>))]
#endif
        public QueryBuilderParameter<ICollection<ProductPriceItemResponseInput>> Items
        {
            get { return (QueryBuilderParameter<ICollection<ProductPriceItemResponseInput>>)_items.Value; }
            set { _items = new InputPropertyInfo { Name = "items", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetadataEntryInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MetadataEntryInput>> Metadata
        {
            get { return (QueryBuilderParameter<ICollection<MetadataEntryInput>>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ProductTypeInput?>))]
#endif
        public QueryBuilderParameter<ProductTypeInput?> ProductType
        {
            get { return (QueryBuilderParameter<ProductTypeInput?>)_productType.Value; }
            set { _productType = new InputPropertyInfo { Name = "productType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Sku
        {
            get { return (QueryBuilderParameter<string>)_sku.Value; }
            set { _sku = new InputPropertyInfo { Name = "sku", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Slug
        {
            get { return (QueryBuilderParameter<string>)_slug.Value; }
            set { _slug = new InputPropertyInfo { Name = "slug", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_interval.Name != null) yield return _interval;
            if (_items.Name != null) yield return _items;
            if (_metadata.Name != null) yield return _metadata;
            if (_productType.Name != null) yield return _productType;
            if (_sku.Name != null) yield return _sku;
            if (_slug.Name != null) yield return _slug;
            if (_title.Name != null) yield return _title;
        }
    }

    public class ProductPriceItemResponseInput : IGraphQlInputObject
    {
        private InputPropertyInfo _lookupKey;
        private InputPropertyInfo _metadata;
        private InputPropertyInfo _oneTimePriceItems;
        private InputPropertyInfo _priceId;
        private InputPropertyInfo _quantityEnabled;
        private InputPropertyInfo _quantityRange;
        private InputPropertyInfo _slug;
        private InputPropertyInfo _tiers;
        private InputPropertyInfo _tiersMode;
        private InputPropertyInfo _type;
        private InputPropertyInfo _unitAmount;
        private InputPropertyInfo _unitAmountDecimal;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LookupKey
        {
            get { return (QueryBuilderParameter<string>)_lookupKey.Value; }
            set { _lookupKey = new InputPropertyInfo { Name = "lookupKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetadataEntryInput>>))]
#endif
        public QueryBuilderParameter<ICollection<MetadataEntryInput>> Metadata
        {
            get { return (QueryBuilderParameter<ICollection<MetadataEntryInput>>)_metadata.Value; }
            set { _metadata = new InputPropertyInfo { Name = "metadata", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OneTimePriceItemsInput>))]
#endif
        public QueryBuilderParameter<OneTimePriceItemsInput> OneTimePriceItems
        {
            get { return (QueryBuilderParameter<OneTimePriceItemsInput>)_oneTimePriceItems.Value; }
            set { _oneTimePriceItems = new InputPropertyInfo { Name = "oneTimePriceItems", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PriceId
        {
            get { return (QueryBuilderParameter<string>)_priceId.Value; }
            set { _priceId = new InputPropertyInfo { Name = "priceId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> QuantityEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_quantityEnabled.Value; }
            set { _quantityEnabled = new InputPropertyInfo { Name = "quantityEnabled", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<QuantityRangeInput>))]
#endif
        public QueryBuilderParameter<QuantityRangeInput> QuantityRange
        {
            get { return (QueryBuilderParameter<QuantityRangeInput>)_quantityRange.Value; }
            set { _quantityRange = new InputPropertyInfo { Name = "quantityRange", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Slug
        {
            get { return (QueryBuilderParameter<string>)_slug.Value; }
            set { _slug = new InputPropertyInfo { Name = "slug", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TierInput>>))]
#endif
        public QueryBuilderParameter<ICollection<TierInput>> Tiers
        {
            get { return (QueryBuilderParameter<ICollection<TierInput>>)_tiers.Value; }
            set { _tiers = new InputPropertyInfo { Name = "tiers", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TiersMode
        {
            get { return (QueryBuilderParameter<string>)_tiersMode.Value; }
            set { _tiersMode = new InputPropertyInfo { Name = "tiersMode", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PriceTypeInput?>))]
#endif
        public QueryBuilderParameter<PriceTypeInput?> Type
        {
            get { return (QueryBuilderParameter<PriceTypeInput?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> UnitAmount
        {
            get { return (QueryBuilderParameter<int?>)_unitAmount.Value; }
            set { _unitAmount = new InputPropertyInfo { Name = "unitAmount", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UnitAmountDecimal
        {
            get { return (QueryBuilderParameter<string>)_unitAmountDecimal.Value; }
            set { _unitAmountDecimal = new InputPropertyInfo { Name = "unitAmountDecimal", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_lookupKey.Name != null) yield return _lookupKey;
            if (_metadata.Name != null) yield return _metadata;
            if (_oneTimePriceItems.Name != null) yield return _oneTimePriceItems;
            if (_priceId.Name != null) yield return _priceId;
            if (_quantityEnabled.Name != null) yield return _quantityEnabled;
            if (_quantityRange.Name != null) yield return _quantityRange;
            if (_slug.Name != null) yield return _slug;
            if (_tiers.Name != null) yield return _tiers;
            if (_tiersMode.Name != null) yield return _tiersMode;
            if (_type.Name != null) yield return _type;
            if (_unitAmount.Name != null) yield return _unitAmount;
            if (_unitAmountDecimal.Name != null) yield return _unitAmountDecimal;
        }
    }

    public class QuantityRangeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _max;
        private InputPropertyInfo _min;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Max
        {
            get { return (QueryBuilderParameter<int?>)_max.Value; }
            set { _max = new InputPropertyInfo { Name = "max", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Min
        {
            get { return (QueryBuilderParameter<int?>)_min.Value; }
            set { _min = new InputPropertyInfo { Name = "min", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_max.Name != null) yield return _max;
            if (_min.Name != null) yield return _min;
        }
    }

    public class RegexMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _location;
        private InputPropertyInfo _regex;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Regex
        {
            get { return (QueryBuilderParameter<string>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "regex", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_location.Name != null) yield return _location;
            if (_regex.Name != null) yield return _regex;
        }
    }

    public class RelationMatcher : IGraphQlInputObject
    {
        private InputPropertyInfo _childField;
        private InputPropertyInfo _parentField;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ChildField
        {
            get { return (QueryBuilderParameter<string>)_childField.Value; }
            set { _childField = new InputPropertyInfo { Name = "childField", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ParentField
        {
            get { return (QueryBuilderParameter<string>)_parentField.Value; }
            set { _parentField = new InputPropertyInfo { Name = "parentField", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_childField.Name != null) yield return _childField;
            if (_parentField.Name != null) yield return _parentField;
        }
    }

    public class SignatureMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _asymmetricKey;
        private InputPropertyInfo _location;
        private InputPropertyInfo _symmetricKey;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CertificateInput>))]
#endif
        public QueryBuilderParameter<CertificateInput> AsymmetricKey
        {
            get { return (QueryBuilderParameter<CertificateInput>)_asymmetricKey.Value; }
            set { _asymmetricKey = new InputPropertyInfo { Name = "asymmetricKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> SymmetricKey
        {
            get { return (QueryBuilderParameter<string>)_symmetricKey.Value; }
            set { _symmetricKey = new InputPropertyInfo { Name = "symmetricKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SignatureTypeInput?>))]
#endif
        public QueryBuilderParameter<SignatureTypeInput?> Type
        {
            get { return (QueryBuilderParameter<SignatureTypeInput?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_asymmetricKey.Name != null) yield return _asymmetricKey;
            if (_location.Name != null) yield return _location;
            if (_symmetricKey.Name != null) yield return _symmetricKey;
            if (_type.Name != null) yield return _type;
        }
    }

    public class SiteCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _site;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteMutationInput>))]
#endif
        public QueryBuilderParameter<SiteMutationInput> Site
        {
            get { return (QueryBuilderParameter<SiteMutationInput>)_site.Value; }
            set { _site = new InputPropertyInfo { Name = "site", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_site.Name != null) yield return _site;
        }
    }

    public class SiteDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class SiteFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SiteFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SiteFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<SiteFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteFilter>))]
#endif
        public QueryBuilderParameter<SiteFilter> Not
        {
            get { return (QueryBuilderParameter<SiteFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SiteFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SiteFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SiteFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class SiteMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
        }
    }

    public class SiteUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _site;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SiteMutationInput>))]
#endif
        public QueryBuilderParameter<SiteMutationInput> Site
        {
            get { return (QueryBuilderParameter<SiteMutationInput>)_site.Value; }
            set { _site = new InputPropertyInfo { Name = "site", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_site.Name != null) yield return _site;
        }
    }

    public class SpaceCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _space;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceMutationInput>))]
#endif
        public QueryBuilderParameter<SpaceMutationInput> Space
        {
            get { return (QueryBuilderParameter<SpaceMutationInput>)_space.Value; }
            set { _space = new InputPropertyInfo { Name = "space", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_space.Name != null) yield return _space;
        }
    }

    public class SpaceDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class SpaceFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<SpaceFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceFilter>))]
#endif
        public QueryBuilderParameter<SpaceFilter> Not
        {
            get { return (QueryBuilderParameter<SpaceFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SpaceFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<SpaceFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SpaceFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class SpaceMutationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _exactType;
        private InputPropertyInfo _floorId;
        private InputPropertyInfo _geoshape;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _parentSpaceId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> ExactType
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_exactType.Value; }
            set { _exactType = new InputPropertyInfo { Name = "exactType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> FloorId
        {
            get { return (QueryBuilderParameter<string>)_floorId.Value; }
            set { _floorId = new InputPropertyInfo { Name = "floorId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Geoshape
        {
            get { return (QueryBuilderParameter<object>)_geoshape.Value; }
            set { _geoshape = new InputPropertyInfo { Name = "geoshape", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ParentSpaceId
        {
            get { return (QueryBuilderParameter<string>)_parentSpaceId.Value; }
            set { _parentSpaceId = new InputPropertyInfo { Name = "parentSpaceId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_exactType.Name != null) yield return _exactType;
            if (_floorId.Name != null) yield return _floorId;
            if (_geoshape.Name != null) yield return _geoshape;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_parentSpaceId.Name != null) yield return _parentSpaceId;
        }
    }

    public class SpaceUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _space;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SpaceMutationInput>))]
#endif
        public QueryBuilderParameter<SpaceMutationInput> Space
        {
            get { return (QueryBuilderParameter<SpaceMutationInput>)_space.Value; }
            set { _space = new InputPropertyInfo { Name = "space", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_space.Name != null) yield return _space;
        }
    }

    public class StringArrayFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class StringFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contains;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Contains
        {
            get { return (QueryBuilderParameter<string>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contains.Name != null) yield return _contains;
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class SystemTypeFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _in;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SystemTypeKeyInput?>))]
#endif
        public QueryBuilderParameter<SystemTypeKeyInput?> Eq
        {
            get { return (QueryBuilderParameter<SystemTypeKeyInput?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SystemTypeKeyInput>>))]
#endif
        public QueryBuilderParameter<ICollection<SystemTypeKeyInput>> In
        {
            get { return (QueryBuilderParameter<ICollection<SystemTypeKeyInput>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_in.Name != null) yield return _in;
        }
    }

    public class ThingFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _mappingKey;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _type;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ThingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ThingFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<ThingFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> MappingKey
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_mappingKey.Value; }
            set { _mappingKey = new InputPropertyInfo { Name = "mappingKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ThingFilter>))]
#endif
        public QueryBuilderParameter<ThingFilter> Not
        {
            get { return (QueryBuilderParameter<ThingFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ThingFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ThingFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ThingFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringArrayFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringArrayFilterExpressionInput> Type
        {
            get { return (QueryBuilderParameter<StringArrayFilterExpressionInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_mappingKey.Name != null) yield return _mappingKey;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_type.Name != null) yield return _type;
        }
    }

    public class TierInput : IGraphQlInputObject
    {
        private InputPropertyInfo _flatAmount;
        private InputPropertyInfo _flatAmountDecimal;
        private InputPropertyInfo _unitAmount;
        private InputPropertyInfo _unitAmountDecimal;
        private InputPropertyInfo _upTo;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> FlatAmount
        {
            get { return (QueryBuilderParameter<int?>)_flatAmount.Value; }
            set { _flatAmount = new InputPropertyInfo { Name = "flatAmount", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> FlatAmountDecimal
        {
            get { return (QueryBuilderParameter<string>)_flatAmountDecimal.Value; }
            set { _flatAmountDecimal = new InputPropertyInfo { Name = "flatAmountDecimal", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> UnitAmount
        {
            get { return (QueryBuilderParameter<int?>)_unitAmount.Value; }
            set { _unitAmount = new InputPropertyInfo { Name = "unitAmount", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UnitAmountDecimal
        {
            get { return (QueryBuilderParameter<string>)_unitAmountDecimal.Value; }
            set { _unitAmountDecimal = new InputPropertyInfo { Name = "unitAmountDecimal", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> UpTo
        {
            get { return (QueryBuilderParameter<int?>)_upTo.Value; }
            set { _upTo = new InputPropertyInfo { Name = "upTo", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_flatAmount.Name != null) yield return _flatAmount;
            if (_flatAmountDecimal.Name != null) yield return _flatAmountDecimal;
            if (_unitAmount.Name != null) yield return _unitAmount;
            if (_unitAmountDecimal.Name != null) yield return _unitAmountDecimal;
            if (_upTo.Name != null) yield return _upTo;
        }
    }

    public class TimeseriesAggregateRowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _avg;
        private InputPropertyInfo _count;
        private InputPropertyInfo _max;
        private InputPropertyInfo _min;
        private InputPropertyInfo _sum;
        private InputPropertyInfo _timestamp;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Avg
        {
            get { return (QueryBuilderParameter<decimal?>)_avg.Value; }
            set { _avg = new InputPropertyInfo { Name = "avg", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Count
        {
            get { return (QueryBuilderParameter<int?>)_count.Value; }
            set { _count = new InputPropertyInfo { Name = "count", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Max
        {
            get { return (QueryBuilderParameter<decimal?>)_max.Value; }
            set { _max = new InputPropertyInfo { Name = "max", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Min
        {
            get { return (QueryBuilderParameter<decimal?>)_min.Value; }
            set { _min = new InputPropertyInfo { Name = "min", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Sum
        {
            get { return (QueryBuilderParameter<decimal?>)_sum.Value; }
            set { _sum = new InputPropertyInfo { Name = "sum", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeOffset?>))]
#endif
        public QueryBuilderParameter<DateTimeOffset?> Timestamp
        {
            get { return (QueryBuilderParameter<DateTimeOffset?>)_timestamp.Value; }
            set { _timestamp = new InputPropertyInfo { Name = "timestamp", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_avg.Name != null) yield return _avg;
            if (_count.Name != null) yield return _count;
            if (_max.Name != null) yield return _max;
            if (_min.Name != null) yield return _min;
            if (_sum.Name != null) yield return _sum;
            if (_timestamp.Name != null) yield return _timestamp;
        }
    }

    public class TimeseriesRowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _timestamp;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeOffset?>))]
#endif
        public QueryBuilderParameter<DateTimeOffset?> Timestamp
        {
            get { return (QueryBuilderParameter<DateTimeOffset?>)_timestamp.Value; }
            set { _timestamp = new InputPropertyInfo { Name = "timestamp", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TimeseriesRowValueInput>))]
#endif
        public QueryBuilderParameter<TimeseriesRowValueInput> Value
        {
            get { return (QueryBuilderParameter<TimeseriesRowValueInput>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_timestamp.Name != null) yield return _timestamp;
            if (_value.Name != null) yield return _value;
        }
    }

    public class TimeseriesRowValueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _boolValue;
        private InputPropertyInfo _byteArrayValue;
        private InputPropertyInfo _float32Value;
        private InputPropertyInfo _float64Value;
        private InputPropertyInfo _geopointValue;
        private InputPropertyInfo _int32Value;
        private InputPropertyInfo _int64Value;
        private InputPropertyInfo _stringValue;
        private InputPropertyInfo _uint32Value;
        private InputPropertyInfo _uint64Value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> BoolValue
        {
            get { return (QueryBuilderParameter<bool?>)_boolValue.Value; }
            set { _boolValue = new InputPropertyInfo { Name = "boolValue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ByteArrayValue
        {
            get { return (QueryBuilderParameter<string>)_byteArrayValue.Value; }
            set { _byteArrayValue = new InputPropertyInfo { Name = "byteArrayValue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Float32Value
        {
            get { return (QueryBuilderParameter<decimal?>)_float32Value.Value; }
            set { _float32Value = new InputPropertyInfo { Name = "float32Value", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
#endif
        public QueryBuilderParameter<decimal?> Float64Value
        {
            get { return (QueryBuilderParameter<decimal?>)_float64Value.Value; }
            set { _float64Value = new InputPropertyInfo { Name = "float64Value", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GeoPointInput>))]
#endif
        public QueryBuilderParameter<GeoPointInput> GeopointValue
        {
            get { return (QueryBuilderParameter<GeoPointInput>)_geopointValue.Value; }
            set { _geopointValue = new InputPropertyInfo { Name = "geopointValue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Int32Value
        {
            get { return (QueryBuilderParameter<int?>)_int32Value.Value; }
            set { _int32Value = new InputPropertyInfo { Name = "int32Value", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Int64Value
        {
            get { return (QueryBuilderParameter<int?>)_int64Value.Value; }
            set { _int64Value = new InputPropertyInfo { Name = "int64Value", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> StringValue
        {
            get { return (QueryBuilderParameter<string>)_stringValue.Value; }
            set { _stringValue = new InputPropertyInfo { Name = "stringValue", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Uint32Value
        {
            get { return (QueryBuilderParameter<int?>)_uint32Value.Value; }
            set { _uint32Value = new InputPropertyInfo { Name = "uint32Value", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> Uint64Value
        {
            get { return (QueryBuilderParameter<int?>)_uint64Value.Value; }
            set { _uint64Value = new InputPropertyInfo { Name = "uint64Value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_boolValue.Name != null) yield return _boolValue;
            if (_byteArrayValue.Name != null) yield return _byteArrayValue;
            if (_float32Value.Name != null) yield return _float32Value;
            if (_float64Value.Name != null) yield return _float64Value;
            if (_geopointValue.Name != null) yield return _geopointValue;
            if (_int32Value.Name != null) yield return _int32Value;
            if (_int64Value.Name != null) yield return _int64Value;
            if (_stringValue.Name != null) yield return _stringValue;
            if (_uint32Value.Name != null) yield return _uint32Value;
            if (_uint64Value.Name != null) yield return _uint64Value;
        }
    }

    public class TimestampFilterExpressionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _eq;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Eq
        {
            get { return (QueryBuilderParameter<object>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gt
        {
            get { return (QueryBuilderParameter<object>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Gte
        {
            get { return (QueryBuilderParameter<object>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lt
        {
            get { return (QueryBuilderParameter<object>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Lte
        {
            get { return (QueryBuilderParameter<object>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_eq.Name != null) yield return _eq;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
        }
    }

    public class UnitFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class UnitInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
        }
    }

    public class UserAssignRoleRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _role;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleInput?>))]
#endif
        public QueryBuilderParameter<RoleInput?> Role
        {
            get { return (QueryBuilderParameter<RoleInput?>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_role.Name != null) yield return _role;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _skipInviteEmail;
        private InputPropertyInfo _temporaryPassword;
        private InputPropertyInfo _user;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> SkipInviteEmail
        {
            get { return (QueryBuilderParameter<bool?>)_skipInviteEmail.Value; }
            set { _skipInviteEmail = new InputPropertyInfo { Name = "skipInviteEmail", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TemporaryPassword
        {
            get { return (QueryBuilderParameter<string>)_temporaryPassword.Value; }
            set { _temporaryPassword = new InputPropertyInfo { Name = "temporaryPassword", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserInput>))]
#endif
        public QueryBuilderParameter<UserInput> User
        {
            get { return (QueryBuilderParameter<UserInput>)_user.Value; }
            set { _user = new InputPropertyInfo { Name = "user", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_skipInviteEmail.Name != null) yield return _skipInviteEmail;
            if (_temporaryPassword.Name != null) yield return _temporaryPassword;
            if (_user.Name != null) yield return _user;
        }
    }

    public class UserDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class UserFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _name;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_name.Name != null) yield return _name;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserGetOrgMembershipsRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class UserInput : IGraphQlInputObject
    {
        private InputPropertyInfo _created;
        private InputPropertyInfo _email;
        private InputPropertyInfo _emailVerified;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastUpdatedBy;
        private InputPropertyInfo _name;
        private InputPropertyInfo _nickname;
        private InputPropertyInfo _roles;
        private InputPropertyInfo _updated;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> EmailVerified
        {
            get { return (QueryBuilderParameter<bool?>)_emailVerified.Value; }
            set { _emailVerified = new InputPropertyInfo { Name = "emailVerified", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> LastUpdatedBy
        {
            get { return (QueryBuilderParameter<string>)_lastUpdatedBy.Value; }
            set { _lastUpdatedBy = new InputPropertyInfo { Name = "lastUpdatedBy", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Nickname
        {
            get { return (QueryBuilderParameter<string>)_nickname.Value; }
            set { _nickname = new InputPropertyInfo { Name = "nickname", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RoleInput>>))]
#endif
        public QueryBuilderParameter<ICollection<RoleInput>> Roles
        {
            get { return (QueryBuilderParameter<ICollection<RoleInput>>)_roles.Value; }
            set { _roles = new InputPropertyInfo { Name = "roles", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_created.Name != null) yield return _created;
            if (_email.Name != null) yield return _email;
            if (_emailVerified.Name != null) yield return _emailVerified;
            if (_id.Name != null) yield return _id;
            if (_lastUpdatedBy.Name != null) yield return _lastUpdatedBy;
            if (_name.Name != null) yield return _name;
            if (_nickname.Name != null) yield return _nickname;
            if (_roles.Name != null) yield return _roles;
            if (_updated.Name != null) yield return _updated;
        }
    }

    public class UserRemoveOrgMembershipRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _orgId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> OrgId
        {
            get { return (QueryBuilderParameter<string>)_orgId.Value; }
            set { _orgId = new InputPropertyInfo { Name = "orgId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_orgId.Name != null) yield return _orgId;
        }
    }

    public class UserRemoveRoleRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _role;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RoleInput?>))]
#endif
        public QueryBuilderParameter<RoleInput?> Role
        {
            get { return (QueryBuilderParameter<RoleInput?>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_role.Name != null) yield return _role;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UserUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _user;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UserInput>))]
#endif
        public QueryBuilderParameter<UserInput> User
        {
            get { return (QueryBuilderParameter<UserInput>)_user.Value; }
            set { _user = new InputPropertyInfo { Name = "user", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_user.Name != null) yield return _user;
        }
    }

    public class ValueLocationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _encoding;
        private InputPropertyInfo _form;
        private InputPropertyInfo _header;
        private InputPropertyInfo _json;
        private InputPropertyInfo _mappedDefault;
        private InputPropertyInfo _queryParameter;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EncodingTypeInput?>))]
#endif
        public QueryBuilderParameter<EncodingTypeInput?> Encoding
        {
            get { return (QueryBuilderParameter<EncodingTypeInput?>)_encoding.Value; }
            set { _encoding = new InputPropertyInfo { Name = "encoding", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BodyValueLocationInput>))]
#endif
        public QueryBuilderParameter<BodyValueLocationInput> Form
        {
            get { return (QueryBuilderParameter<BodyValueLocationInput>)_form.Value; }
            set { _form = new InputPropertyInfo { Name = "form", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Header
        {
            get { return (QueryBuilderParameter<string>)_header.Value; }
            set { _header = new InputPropertyInfo { Name = "header", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BodyValueLocationInput>))]
#endif
        public QueryBuilderParameter<BodyValueLocationInput> Json
        {
            get { return (QueryBuilderParameter<BodyValueLocationInput>)_json.Value; }
            set { _json = new InputPropertyInfo { Name = "json", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> MappedDefault
        {
            get { return (QueryBuilderParameter<bool?>)_mappedDefault.Value; }
            set { _mappedDefault = new InputPropertyInfo { Name = "mappedDefault", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> QueryParameter
        {
            get { return (QueryBuilderParameter<string>)_queryParameter.Value; }
            set { _queryParameter = new InputPropertyInfo { Name = "queryParameter", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_encoding.Name != null) yield return _encoding;
            if (_form.Name != null) yield return _form;
            if (_header.Name != null) yield return _header;
            if (_json.Name != null) yield return _json;
            if (_mappedDefault.Name != null) yield return _mappedDefault;
            if (_queryParameter.Name != null) yield return _queryParameter;
        }
    }

    public class ValueMatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _location;
        private InputPropertyInfo _value;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ValueLocationInput>))]
#endif
        public QueryBuilderParameter<ValueLocationInput> Location
        {
            get { return (QueryBuilderParameter<ValueLocationInput>)_location.Value; }
            set { _location = new InputPropertyInfo { Name = "location", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_location.Name != null) yield return _location;
            if (_value.Name != null) yield return _value;
        }
    }

    public class WebhookTargetAmqpTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetApiKeyInput : IGraphQlInputObject
    {
        private InputPropertyInfo _apiKey;
        private InputPropertyInfo _keyName;
        private InputPropertyInfo _passedAs;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ApiKey
        {
            get { return (QueryBuilderParameter<string>)_apiKey.Value; }
            set { _apiKey = new InputPropertyInfo { Name = "apiKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> KeyName
        {
            get { return (QueryBuilderParameter<string>)_keyName.Value; }
            set { _keyName = new InputPropertyInfo { Name = "keyName", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> PassedAs
        {
            get { return (QueryBuilderParameter<string>)_passedAs.Value; }
            set { _passedAs = new InputPropertyInfo { Name = "passedAs", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_apiKey.Name != null) yield return _apiKey;
            if (_keyName.Name != null) yield return _keyName;
            if (_passedAs.Name != null) yield return _passedAs;
        }
    }

    public class WebhookTargetBasicAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _password;
        private InputPropertyInfo _username;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_password.Name != null) yield return _password;
            if (_username.Name != null) yield return _username;
        }
    }

    public class WebhookTargetCloudEventFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _sources;
        private InputPropertyInfo _types;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetCloudEventFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetCloudEventFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Sources
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_sources.Value; }
            set { _sources = new InputPropertyInfo { Name = "sources", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> Types
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_types.Value; }
            set { _types = new InputPropertyInfo { Name = "types", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_sources.Name != null) yield return _sources;
            if (_types.Name != null) yield return _types;
        }
    }

    public class WebhookTargetCreateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _target;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetInput> Target
        {
            get { return (QueryBuilderParameter<WebhookTargetInput>)_target.Value; }
            set { _target = new InputPropertyInfo { Name = "target", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_target.Name != null) yield return _target;
        }
    }

    public class WebhookTargetDeleteRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
        }
    }

    public class WebhookTargetFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _targetId;
        private InputPropertyInfo _userId;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<StringFilterExpressionInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterExpressionInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> Not
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<WebhookTargetFilterInput>>))]
#endif
        public QueryBuilderParameter<ICollection<WebhookTargetFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<WebhookTargetFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> TargetId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_targetId.Value; }
            set { _targetId = new InputPropertyInfo { Name = "targetId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> UserId
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_targetId.Name != null) yield return _targetId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class WebhookTargetHttpTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _apiKey;
        private InputPropertyInfo _basicAuth;
        private InputPropertyInfo _method;
        private InputPropertyInfo _noAuth;
        private InputPropertyInfo _oauth2ClientCredentialsFlow;
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetApiKeyInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetApiKeyInput> ApiKey
        {
            get { return (QueryBuilderParameter<WebhookTargetApiKeyInput>)_apiKey.Value; }
            set { _apiKey = new InputPropertyInfo { Name = "apiKey", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetBasicAuthInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetBasicAuthInput> BasicAuth
        {
            get { return (QueryBuilderParameter<WebhookTargetBasicAuthInput>)_basicAuth.Value; }
            set { _basicAuth = new InputPropertyInfo { Name = "basicAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<HttpMethodInput?>))]
#endif
        public QueryBuilderParameter<HttpMethodInput?> Method
        {
            get { return (QueryBuilderParameter<HttpMethodInput?>)_method.Value; }
            set { _method = new InputPropertyInfo { Name = "method", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetNoAuthInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetNoAuthInput> NoAuth
        {
            get { return (QueryBuilderParameter<WebhookTargetNoAuthInput>)_noAuth.Value; }
            set { _noAuth = new InputPropertyInfo { Name = "noAuth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetOAuth2ClientCredentialsFlowInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetOAuth2ClientCredentialsFlowInput> Oauth2ClientCredentialsFlow
        {
            get { return (QueryBuilderParameter<WebhookTargetOAuth2ClientCredentialsFlowInput>)_oauth2ClientCredentialsFlow.Value; }
            set { _oauth2ClientCredentialsFlow = new InputPropertyInfo { Name = "oauth2ClientCredentialsFlow", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_apiKey.Name != null) yield return _apiKey;
            if (_basicAuth.Name != null) yield return _basicAuth;
            if (_method.Name != null) yield return _method;
            if (_noAuth.Name != null) yield return _noAuth;
            if (_oauth2ClientCredentialsFlow.Name != null) yield return _oauth2ClientCredentialsFlow;
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _amqpTarget;
        private InputPropertyInfo _auth;
        private InputPropertyInfo _created;
        private InputPropertyInfo _durable;
        private InputPropertyInfo _eventFilters;
        private InputPropertyInfo _httpTarget;
        private InputPropertyInfo _id;
        private InputPropertyInfo _jsonPathExpressions;
        private InputPropertyInfo _kafkaTarget;
        private InputPropertyInfo _maxRetry;
        private InputPropertyInfo _mqttTarget;
        private InputPropertyInfo _name;
        private InputPropertyInfo _natsTarget;
        private InputPropertyInfo _targetType;
        private InputPropertyInfo _updated;
        private InputPropertyInfo _wsTarget;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetAmqpTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetAmqpTargetInput> AmqpTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetAmqpTargetInput>)_amqpTarget.Value; }
            set { _amqpTarget = new InputPropertyInfo { Name = "amqpTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthInput>))]
#endif
        public QueryBuilderParameter<AuthInput> Auth
        {
            get { return (QueryBuilderParameter<AuthInput>)_auth.Value; }
            set { _auth = new InputPropertyInfo { Name = "auth", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Created
        {
            get { return (QueryBuilderParameter<object>)_created.Value; }
            set { _created = new InputPropertyInfo { Name = "created", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
#endif
        public QueryBuilderParameter<bool?> Durable
        {
            get { return (QueryBuilderParameter<bool?>)_durable.Value; }
            set { _durable = new InputPropertyInfo { Name = "durable", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetCloudEventFilterInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetCloudEventFilterInput> EventFilters
        {
            get { return (QueryBuilderParameter<WebhookTargetCloudEventFilterInput>)_eventFilters.Value; }
            set { _eventFilters = new InputPropertyInfo { Name = "eventFilters", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetHttpTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetHttpTargetInput> HttpTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetHttpTargetInput>)_httpTarget.Value; }
            set { _httpTarget = new InputPropertyInfo { Name = "httpTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
#endif
        public QueryBuilderParameter<ICollection<string>> JsonPathExpressions
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_jsonPathExpressions.Value; }
            set { _jsonPathExpressions = new InputPropertyInfo { Name = "jsonPathExpressions", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetKafkaTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetKafkaTargetInput> KafkaTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetKafkaTargetInput>)_kafkaTarget.Value; }
            set { _kafkaTarget = new InputPropertyInfo { Name = "kafkaTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
#endif
        public QueryBuilderParameter<int?> MaxRetry
        {
            get { return (QueryBuilderParameter<int?>)_maxRetry.Value; }
            set { _maxRetry = new InputPropertyInfo { Name = "maxRetry", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetMqttTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetMqttTargetInput> MqttTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetMqttTargetInput>)_mqttTarget.Value; }
            set { _mqttTarget = new InputPropertyInfo { Name = "mqttTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetNatsTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetNatsTargetInput> NatsTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetNatsTargetInput>)_natsTarget.Value; }
            set { _natsTarget = new InputPropertyInfo { Name = "natsTarget", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetTargetTypeInput?>))]
#endif
        public QueryBuilderParameter<WebhookTargetTargetTypeInput?> TargetType
        {
            get { return (QueryBuilderParameter<WebhookTargetTargetTypeInput?>)_targetType.Value; }
            set { _targetType = new InputPropertyInfo { Name = "targetType", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
#endif
        public QueryBuilderParameter<object> Updated
        {
            get { return (QueryBuilderParameter<object>)_updated.Value; }
            set { _updated = new InputPropertyInfo { Name = "updated", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetWsTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetWsTargetInput> WsTarget
        {
            get { return (QueryBuilderParameter<WebhookTargetWsTargetInput>)_wsTarget.Value; }
            set { _wsTarget = new InputPropertyInfo { Name = "wsTarget", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_amqpTarget.Name != null) yield return _amqpTarget;
            if (_auth.Name != null) yield return _auth;
            if (_created.Name != null) yield return _created;
            if (_durable.Name != null) yield return _durable;
            if (_eventFilters.Name != null) yield return _eventFilters;
            if (_httpTarget.Name != null) yield return _httpTarget;
            if (_id.Name != null) yield return _id;
            if (_jsonPathExpressions.Name != null) yield return _jsonPathExpressions;
            if (_kafkaTarget.Name != null) yield return _kafkaTarget;
            if (_maxRetry.Name != null) yield return _maxRetry;
            if (_mqttTarget.Name != null) yield return _mqttTarget;
            if (_name.Name != null) yield return _name;
            if (_natsTarget.Name != null) yield return _natsTarget;
            if (_targetType.Name != null) yield return _targetType;
            if (_updated.Name != null) yield return _updated;
            if (_wsTarget.Name != null) yield return _wsTarget;
        }
    }

    public class WebhookTargetKafkaTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _targetBroker;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetBroker
        {
            get { return (QueryBuilderParameter<string>)_targetBroker.Value; }
            set { _targetBroker = new InputPropertyInfo { Name = "targetBroker", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_targetBroker.Name != null) yield return _targetBroker;
        }
    }

    public class WebhookTargetMqttTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetNatsTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class WebhookTargetNoAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo __;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> _
        {
            get { return (QueryBuilderParameter<string>)__.Value; }
            set { __ = new InputPropertyInfo { Name = "_", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (__.Name != null) yield return __;
        }
    }

    public class WebhookTargetOAuth2ClientCredentialsFlowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientId;
        private InputPropertyInfo _clientSecret;
        private InputPropertyInfo _headerPrefix;
        private InputPropertyInfo _scope;
        private InputPropertyInfo _tokenEndpoint;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ClientId
        {
            get { return (QueryBuilderParameter<string>)_clientId.Value; }
            set { _clientId = new InputPropertyInfo { Name = "clientId", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> ClientSecret
        {
            get { return (QueryBuilderParameter<string>)_clientSecret.Value; }
            set { _clientSecret = new InputPropertyInfo { Name = "clientSecret", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> HeaderPrefix
        {
            get { return (QueryBuilderParameter<string>)_headerPrefix.Value; }
            set { _headerPrefix = new InputPropertyInfo { Name = "headerPrefix", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> Scope
        {
            get { return (QueryBuilderParameter<string>)_scope.Value; }
            set { _scope = new InputPropertyInfo { Name = "scope", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TokenEndpoint
        {
            get { return (QueryBuilderParameter<string>)_tokenEndpoint.Value; }
            set { _tokenEndpoint = new InputPropertyInfo { Name = "tokenEndpoint", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientId.Name != null) yield return _clientId;
            if (_clientSecret.Name != null) yield return _clientSecret;
            if (_headerPrefix.Name != null) yield return _headerPrefix;
            if (_scope.Name != null) yield return _scope;
            if (_tokenEndpoint.Name != null) yield return _tokenEndpoint;
        }
    }

    public class WebhookTargetUpdateRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _target;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebhookTargetInput>))]
#endif
        public QueryBuilderParameter<WebhookTargetInput> Target
        {
            get { return (QueryBuilderParameter<WebhookTargetInput>)_target.Value; }
            set { _target = new InputPropertyInfo { Name = "target", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_target.Name != null) yield return _target;
        }
    }

    public class WebhookTargetWsTargetInput : IGraphQlInputObject
    {
        private InputPropertyInfo _targetUri;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
#endif
        public QueryBuilderParameter<string> TargetUri
        {
            get { return (QueryBuilderParameter<string>)_targetUri.Value; }
            set { _targetUri = new InputPropertyInfo { Name = "targetUri", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_targetUri.Name != null) yield return _targetUri;
        }
    }

    public class ZoneFilter : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ZoneFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ZoneFilter>> And
        {
            get { return (QueryBuilderParameter<ICollection<ZoneFilter>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterExpressionInput>))]
#endif
        public QueryBuilderParameter<IdFilterExpressionInput> Id
        {
            get { return (QueryBuilderParameter<IdFilterExpressionInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ZoneFilter>))]
#endif
        public QueryBuilderParameter<ZoneFilter> Not
        {
            get { return (QueryBuilderParameter<ZoneFilter>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ZoneFilter>>))]
#endif
        public QueryBuilderParameter<ICollection<ZoneFilter>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ZoneFilter>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }
    #endregion

    #region data classes
    public class Address
    {
        public string CountryName { get; set; }
        public string Id { get; set; }
        public string Locality { get; set; }
        public string PostalCode { get; set; }
        public string Region { get; set; }
        public string StreetAddress { get; set; }
    }

    public class AddressMutation
    {
        public string CountryName { get; set; }
        public string Id { get; set; }
        public string Locality { get; set; }
        public string PostalCode { get; set; }
        public string Region { get; set; }
        public string StreetAddress { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class Auth
    {
        public ICollection<Auth> And { get; set; }
        public ICollection<Match> Matches { get; set; }
        public ICollection<Auth> Not { get; set; }
        public ICollection<Auth> Or { get; set; }
    }

    public class BillingCalculatedProductBundleResponse
    {
        public BillingCalculationResponse Calculation { get; set; }
        public int? Code { get; set; }
        public ProductBundleResponse ProductBundle { get; set; }
        public string ProductSlug { get; set; }
        public string StatusMessage { get; set; }
    }

    public class BillingCalculationResponse
    {
        public int? FixedPrice { get; set; }
        public string ItemSlug { get; set; }
        public int? OveragePrice { get; set; }
        public ProductPriceItemResponse ProductPriceItem { get; set; }
        public int? Quantity { get; set; }
        public int? UnitPrice { get; set; }
    }

    public class BillingPriceTypeFilterExpression
    {
        public PriceType? ProductPriceType { get; set; }
    }

    public class BillingProductBundleFilter
    {
        public ICollection<BillingProductBundleFilter> And { get; set; }
        public ICollection<BillingProductBundleFilter> Not { get; set; }
        public ICollection<BillingProductBundleFilter> Or { get; set; }
        public BillingPriceTypeFilterExpression ProductPriceType { get; set; }
        public IdFilterExpression Sku { get; set; }
        public IdFilterExpression Slug { get; set; }
    }

    public class BillingProductBundleSubscriptionResponse
    {
        public BillingCalculatedProductBundleResponse ProductBundle { get; set; }
        public string SubscriptionId { get; set; }
    }

    public class BodyValueLocation
    {
        public string BodySource { get; set; }
        public string Field { get; set; }
    }

    [GraphQlObjectType("Building")]
    public class Building : IPlace, IThingContainer
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class BuildingCreateResponse
    {
        public BuildingMutation Building { get; set; }
    }

    public class BuildingDeleteResponse
    {
        public string _ { get; set; }
    }

    public class BuildingMutation
    {
        public AddressMutation Address { get; set; }
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string SiteId { get; set; }
    }

    public class BuildingUpdateResponse
    {
        public BuildingMutation Building { get; set; }
    }

    [GraphQlObjectType("CalendarEvent")]
    public class CalendarEvent : IEvent
    {
        public object EndTime { get; set; }
        public ICollection<CalendarInvitation> HasInvitations { get; set; }
        public ICollection<CalendarInvitee> HasInvitees { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public object StartTime { get; set; }
    }

    public class CalendarInvitation
    {
        public EmailAddress Email { get; set; }
        public CalendarEvent Event { get; set; }
        public CalendarInvitee HasInvitee { get; set; }
        public CalendarInvitationResponse? Response { get; set; }
    }

    public class CalendarInvitee
    {
        public string AdditionalName { get; set; }
        public ICollection<EmailAddress> Emails { get; set; }
        public string FamilyName { get; set; }
        public string GivenName { get; set; }
        public ICollection<CalendarEvent> HasCalendarEvents { get; set; }
        public ICollection<CalendarInvitation> HasCalendarInvitations { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public Floor Floor { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public Guid? ParentSpaceId { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class CertMatch
    {
        public CertificateAuthorityBundle CaCerts { get; set; }
        public string DnsName { get; set; }
        public string SerialNumber { get; set; }
    }

    public class Cert
    {
        public string Certificate { get; set; }
        public CertificateType? Type { get; set; }
    }

    public class CertificateAuthorityBundle
    {
        public ICollection<Cert> CaCertificates { get; set; }
    }

    public class Connector
    {
        public object Config { get; set; }
        public string ConfigHash { get; set; }
        public ConnectorType ConnectorType { get; set; }
        public string ConnectorTypeId { get; set; }
        public ICollection<ConnectorContribution> Contributions { get; set; }
        public object Created { get; set; }
        public string Id { get; set; }
        public object LastSeen { get; set; }
        public string LastUpdatedBy { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public object RuntimeData { get; set; }
        public ConnectorState? State { get; set; }
        public string StateDetails { get; set; }
        public ICollection<Thing> Things { get; set; }
        public object Updated { get; set; }
        public string WorkflowId { get; set; }
    }

    public class ConnectorAuth
    {
        public object Created { get; set; }
        public string Id { get; set; }
        public object LastAccessed { get; set; }
        public object Updated { get; set; }
    }

    public class ConnectorAuthCreateResponse
    {
        public ConnectorAuth ConnectorAuth { get; set; }
    }

    public class ConnectorAuthDeleteResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorAuthUpdateResponse
    {
        public ConnectorAuth ConnectorAuth { get; set; }
    }

    public class ConnectorContribution
    {
        public int? Count { get; set; }
        public string SystemType { get; set; }
    }

    public class ConnectorCreateResponse
    {
        public Connector Connector { get; set; }
    }

    public class ConnectorDeleteResponse
    {
        public string _ { get; set; }
    }

    public class ConnectorFilter
    {
        public IdFilterExpression ConnectorTypeId { get; set; }
        public IdFilterExpression Id { get; set; }
    }

    public class ConnectorRequestsConnectorRequest
    {
        public string ConnectorTypeId { get; set; }
        public string Id { get; set; }
    }

    public class ConnectorRequestsCreateResponse
    {
        public ConnectorRequestsConnectorRequest Request { get; set; }
    }

    public class ConnectorRequestsFilter
    {
        public IdFilterExpression ConnectorTypeId { get; set; }
    }

    public class ConnectorType
    {
        public object ConfigSchema { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string TaskQueue { get; set; }
        public string Version { get; set; }
    }

    public class ConnectorTypeFilter
    {
        public IdFilterExpression ConnectorTypeId { get; set; }
        public IdFilterExpression Description { get; set; }
        public IdFilterExpression Name { get; set; }
        public IdFilterExpression Version { get; set; }
    }

    public class ConnectorUpdateResponse
    {
        public Connector Connector { get; set; }
    }

    public class ConnectorUpsertConfigResponse
    {
        public object Config { get; set; }
        public string ConfigHash { get; set; }
        public string Id { get; set; }
    }

    public class DeviceManufacturer
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string LogoUrl { get; set; }
        public string Name { get; set; }
    }

    public class DeviceModel
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string ImageUrl { get; set; }
        public DeviceManufacturer Manufacturer { get; set; }
        public string ManufacturerId { get; set; }
        public string Name { get; set; }
        public ICollection<string> SeeAlsoUrls { get; set; }
    }

    public class EmailAddress
    {
        public string Address { get; set; }
    }

    public interface IEvent
    {
        object EndTime { get; set; }
        string Id { get; set; }
        string Name { get; set; }
        object StartTime { get; set; }
    }

    public class ExampleFilter
    {
        public ICollection<ExampleFilter> And { get; set; }
        public StringFilterExpression Color { get; set; }
        public StringFilterExpression Make { get; set; }
        public StringFilterExpression Model { get; set; }
        public ICollection<ExampleFilter> Not { get; set; }
        public ICollection<ExampleFilter> Or { get; set; }
        public IdFilterExpression Vin { get; set; }
        public StringFilterExpression Year { get; set; }
    }

    public class FeedsUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public int? Level { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public Guid? ParentSpaceId { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public string FirmwareVersion { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public string MappingKey { get; set; }
        public DeviceModel Model { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
    }

    [GraphQlObjectType("Floor")]
    public class Floor : IPlace, IThingContainer
    {
        public Building Building { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public int? Level { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public ICollection<Zone> Zones { get; set; }
    }

    public class FloorCreateResponse
    {
        public FloorMutation Floor { get; set; }
    }

    public class FloorDeleteResponse
    {
        public string _ { get; set; }
    }

    public class FloorMutation
    {
        public string BuildingId { get; set; }
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public int? Level { get; set; }
        public string Name { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class FloorUpdateResponse
    {
        public FloorMutation Floor { get; set; }
    }

    public class Gateway
    {
        public GatewayActiveDetails Active { get; set; }
        public GatewayAssignmentDetails Assignment { get; set; }
        public GatewayFirstBootDetails FirstBoot { get; set; }
        public string GatewayId { get; set; }
        public Org Organization { get; set; }
        public GatewayProvisioningDetails Provisioning { get; set; }
        public GatewayRegistrationDetails Registration { get; set; }
        public GatewayRmaDetails Rma { get; set; }
        public GatewayShippingDetails Shipping { get; set; }
        public GatewayLifecycleState? State { get; set; }
        public object StateTime { get; set; }
        public GatewaySuspensionDetails Suspension { get; set; }
        public GatewayTerminationDetails Termination { get; set; }
    }

    public class GatewayActiveDetails
    {
        public object LastSeenTime { get; set; }
    }

    public class GatewayAssignResponse
    {
        public string _ { get; set; }
    }

    public class GatewayAssignmentDetails
    {
        public object AssignmentTime { get; set; }
        public string PhysicalPlaceId { get; set; }
        public object PreciseGeoLocation { get; set; }
        public ICollection<string> ServesPlaceIds { get; set; }
        public ICollection<SystemTypeKey> ServesSystemTypes { get; set; }
        public string UniqueName { get; set; }
    }

    public class GatewayFilter
    {
        public ICollection<GatewayFilter> And { get; set; }
        public IdFilterExpression DeviceId { get; set; }
        public IdFilterExpression GatewayId { get; set; }
        public StringFilterExpression Iccid { get; set; }
        public StringFilterExpression Imei { get; set; }
        public StringFilterExpression LanMac { get; set; }
        public GatewayModelFilterExpression MappedModel { get; set; }
        public ICollection<GatewayFilter> Not { get; set; }
        public ICollection<GatewayFilter> Or { get; set; }
        public IdFilterExpression PhysicalPlaceId { get; set; }
        public StringFilterExpression SerialNumber { get; set; }
        public StringArrayFilterExpression ServesPlaceIds { get; set; }
        public GatewaySystemTypeFilterExpression ServesSystemTypes { get; set; }
        public GatewayLifecycleStateFilterExpression State { get; set; }
        public TimestampFilterExpression StateTime { get; set; }
        public StringFilterExpression UniqueName { get; set; }
    }

    public class GatewayFirstBootDetails
    {
        public object BootTime { get; set; }
    }

    public class GatewayGenerateContainerSiDsResponse
    {
        public string AvailableCertificateCn { get; set; }
        public string SigningCertificateCn { get; set; }
    }

    public class GatewayLifecycleStateFilterExpression
    {
        public GatewayLifecycleState? Eq { get; set; }
        public ICollection<GatewayLifecycleState> In { get; set; }
    }

    public class GatewayModelFilterExpression
    {
        public GatewayModel? Eq { get; set; }
        public ICollection<GatewayModel> In { get; set; }
    }

    public class GatewayNote
    {
        public string Note { get; set; }
        public object Time { get; set; }
    }

    public class GatewayProvisioningDetails
    {
        public object ProvisionTime { get; set; }
    }

    public class GatewayRmaDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewayRmaReason? Reason { get; set; }
        public object RmaTime { get; set; }
    }

    public class GatewayRegisterContainerResponse
    {
        public string DeviceId { get; set; }
        public string GatewayId { get; set; }
    }

    public class GatewayRegistrationDetails
    {
        public string Imei { get; set; }
        public string LanMac { get; set; }
        public GatewayModel? MappedModel { get; set; }
        public string SerialNumber { get; set; }
        public GatewaySimInfo Sim { get; set; }
    }

    public class GatewaySimCertificate
    {
        public string Id { get; set; }
        public string Pem { get; set; }
        public string SubjectKeyId { get; set; }
    }

    public class GatewaySimInfo
    {
        public GatewaySimCertificate AvailableCertificate { get; set; }
        public string Iccid { get; set; }
        public GatewaySimCertificate SigningCertificate { get; set; }
        public GatewaySimType? SimType { get; set; }
    }

    public class GatewayShippingDetails
    {
        public GatewayCourier? Courier { get; set; }
        public object ShipTime { get; set; }
        public GatewayShippingStatus? Status { get; set; }
        public object StatusTime { get; set; }
        public string TrackingNumber { get; set; }
    }

    public class GatewaySuspendResponse
    {
        public string _ { get; set; }
    }

    public class GatewaySuspensionDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewaySuspensionReason? Reason { get; set; }
        public object SuspensionTime { get; set; }
    }

    public class GatewaySystemTypeFilterExpression
    {
        public SystemTypeKey? Eq { get; set; }
        public ICollection<SystemTypeKey> In { get; set; }
    }

    public class GatewayTerminationDetails
    {
        public ICollection<GatewayNote> NotesCustomer { get; set; }
        public GatewayTerminationReason? Reason { get; set; }
        public object TerminationTime { get; set; }
    }

    [GraphQlObjectType("GenericPlace")]
    public class GenericPlace : IPlace, IThingContainer
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class GeoPoint
    {
        public ICollection<decimal> Coordinates { get; set; }
        public string Type { get; set; }
    }

    public class Grant
    {
        public object ApprovalTime { get; set; }
        public ICollection<GrantPlacesAndTypes> GrantedPlacesAndTypes { get; set; }
        public string GranteeUserId { get; set; }
        public ICollection<GrantNote> GrantorNotes { get; set; }
        public string GrantorUserId { get; set; }
        public string Id { get; set; }
        public object RequestTime { get; set; }
        public ICollection<GrantRequest> Requests { get; set; }
        public GrantGrantState? State { get; set; }
        public object UpdateTime { get; set; }
    }

    public class GrantCreateResponse
    {
        public string Id { get; set; }
    }

    public class GrantDeleteResponse
    {
        public string _ { get; set; }
    }

    public class GrantFilter
    {
        public ICollection<GrantFilter> And { get; set; }
        public IdFilterExpression GrantedIds { get; set; }
        public SystemTypeFilterExpression GrantedTypes { get; set; }
        public IdFilterExpression GranteeUserId { get; set; }
        public IdFilterExpression GrantorUserId { get; set; }
        public IdFilterExpression Id { get; set; }
        public ICollection<GrantFilter> Not { get; set; }
        public ICollection<GrantFilter> Or { get; set; }
        public GrantGrantStateFilterExpression State { get; set; }
    }

    public class GrantGrantStateFilterExpression
    {
        public GrantGrantState? Eq { get; set; }
        public ICollection<GrantGrantState> In { get; set; }
    }

    public class GrantNote
    {
        public string Note { get; set; }
        public object Time { get; set; }
    }

    public class GrantPlacesAndTypes
    {
        public ICollection<string> GrantedIds { get; set; }
        public ICollection<SystemTypeKey> GrantedSystemTypes { get; set; }
    }

    public class GrantRequest
    {
        public string RequestNote { get; set; }
        public GrantRequestType? RequestType { get; set; }
        public ICollection<SystemTypeKey> SystemTypes { get; set; }
    }

    public class GrantUpdateResponse
    {
        public string _ { get; set; }
    }

    public class IdFilterExpression
    {
        public string Eq { get; set; }
        public ICollection<string> In { get; set; }
    }

    public class IpAllowlistMatch
    {
        public ICollection<string> AllowedIps { get; set; }
    }

    public class Invite
    {
        public object Created { get; set; }
        public string Email { get; set; }
        public object Expiration { get; set; }
        public string Id { get; set; }
        public Org Organization { get; set; }
        public ICollection<Role> Roles { get; set; }
        public InviteInviteStatus? Status { get; set; }
    }

    public class InviteCreateResponse
    {
        public Invite Invite { get; set; }
    }

    public class InviteDeleteResponse
    {
        public string _ { get; set; }
    }

    public class InviteFilter
    {
        public ICollection<InviteFilter> And { get; set; }
        public StringFilterExpression Email { get; set; }
        public IdFilterExpression InviteId { get; set; }
        public ICollection<InviteFilter> Not { get; set; }
        public ICollection<InviteFilter> Or { get; set; }
        public InviteInviteStatusFilterExpression State { get; set; }
    }

    public class InviteInviteStatusFilterExpression
    {
        public InviteInviteStatus? Eq { get; set; }
        public ICollection<InviteInviteStatus> In { get; set; }
    }

    public class InviteUpdateResponse
    {
        public Invite Invite { get; set; }
    }

    public class IsPointOfUnion
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public int? Level { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public Guid? ParentSpaceId { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public string FirmwareVersion { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public string MappingKey { get; set; }
        public DeviceModel Model { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
    }

    public class MtlsMatch
    {
        public Cert ClientCert { get; set; }
        public Cert IssuerCert { get; set; }
        public bool? MappedCert { get; set; }
        public CertMatch MatchCert { get; set; }
    }

    public class Match
    {
        public IpAllowlistMatch IpAllowlist { get; set; }
        public MtlsMatch Mtls { get; set; }
        public bool? NoAuth { get; set; }
        public RegexMatch Regex { get; set; }
        public SignatureMatch Signature { get; set; }
        public ValueMatch Value { get; set; }
    }

    public class MetadataEntry
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    public class Mutation
    {
        public GatewayAssignResponse AssignGateway { get; set; }
        public UserAssignRoleResponse AssignRole { get; set; }
        public BuildingCreateResponse CreateBuilding { get; set; }
        public ConnectorCreateResponse CreateConnector { get; set; }
        public ConnectorAuthCreateResponse CreateConnectorAuth { get; set; }
        public FloorCreateResponse CreateFloor { get; set; }
        public GrantCreateResponse CreateGrant { get; set; }
        public InviteCreateResponse CreateInvite { get; set; }
        public PersonalAccessTokenCreateResponse CreatePersonalAccessToken { get; set; }
        public ConnectorRequestsCreateResponse CreateRequest { get; set; }
        public SiteCreateResponse CreateSite { get; set; }
        public SpaceCreateResponse CreateSpace { get; set; }
        public UserCreateResponse CreateUser { get; set; }
        public WebhookTargetCreateResponse CreateWebhookTarget { get; set; }
        public BuildingDeleteResponse DeleteBuilding { get; set; }
        public ConnectorDeleteResponse DeleteConnector { get; set; }
        public ConnectorAuthDeleteResponse DeleteConnectorAuth { get; set; }
        public FloorDeleteResponse DeleteFloor { get; set; }
        public GrantDeleteResponse DeleteGrant { get; set; }
        public InviteDeleteResponse DeleteInvite { get; set; }
        public PersonalAccessTokenDeleteResponse DeletePersonalAccessToken { get; set; }
        public SiteDeleteResponse DeleteSite { get; set; }
        public SpaceDeleteResponse DeleteSpace { get; set; }
        public UserDeleteResponse DeleteUser { get; set; }
        public WebhookTargetDeleteResponse DeleteWebhookTarget { get; set; }
        public GatewayGenerateContainerSiDsResponse GenerateContainerSiDs { get; set; }
        public UserGetOrgMembershipsResponse GetOrgMembershipsUser { get; set; }
        public GatewayRegisterContainerResponse RegisterGatewayContainer { get; set; }
        public UserRemoveOrgMembershipResponse RemoveOrgMembershipUser { get; set; }
        public UserRemoveRoleResponse RemoveRole { get; set; }
        public GatewaySuspendResponse SuspendGateway { get; set; }
        public BuildingUpdateResponse UpdateBuilding { get; set; }
        public ConnectorUpdateResponse UpdateConnector { get; set; }
        public ConnectorAuthUpdateResponse UpdateConnectorAuth { get; set; }
        public FloorUpdateResponse UpdateFloor { get; set; }
        public GrantUpdateResponse UpdateGrant { get; set; }
        public InviteUpdateResponse UpdateInvite { get; set; }
        public OrgUpdateResponse UpdateOrganization { get; set; }
        public PersonalAccessTokenUpdateResponse UpdatePersonalAccessToken { get; set; }
        public SiteUpdateResponse UpdateSite { get; set; }
        public SpaceUpdateResponse UpdateSpace { get; set; }
        public UserUpdateResponse UpdateUser { get; set; }
        public WebhookTargetUpdateResponse UpdateWebhookTarget { get; set; }
        public ConnectorUpsertConfigResponse UpsertConfigConnector { get; set; }
    }

    public class OneTimePriceItem
    {
        public string PriceId { get; set; }
        public Tier Tier { get; set; }
    }

    public class OneTimePriceItems
    {
        public ICollection<OneTimePriceItem> Items { get; set; }
    }

    public class Org
    {
        public OrgContact AdminContact { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public object Created { get; set; }
        public ICollection<Gateway> Gateways { get; set; }
        public string Id { get; set; }
        public string LastUpdatedBy { get; set; }
        public string Name { get; set; }
        public ICollection<Site> Sites { get; set; }
        public OrgState? State { get; set; }
        public string StripeCustomerId { get; set; }
        public ICollection<Thing> Things { get; set; }
        public object Updated { get; set; }
        public ICollection<User> Users { get; set; }
    }

    public class OrgContact
    {
        public string Email { get; set; }
        public string Name { get; set; }
    }

    public class OrgFilter
    {
        public ICollection<OrgFilter> And { get; set; }
        public ICollection<OrgFilter> Not { get; set; }
        public ICollection<OrgFilter> Or { get; set; }
        public OrgStateFilterExpression State { get; set; }
    }

    public class OrgStateFilterExpression
    {
        public OrgState? Eq { get; set; }
        public ICollection<OrgState> In { get; set; }
    }

    public class OrgUpdateResponse
    {
        public Org Org { get; set; }
    }

    public class PermissionFilterExpression
    {
        public Permission? Eq { get; set; }
        public ICollection<Permission> In { get; set; }
    }

    public class Person
    {
        public string AdditionalName { get; set; }
        public ICollection<EmailAddress> Emails { get; set; }
        public string FamilyName { get; set; }
        public string GivenName { get; set; }
        public ICollection<CalendarEvent> HasCalendarEvents { get; set; }
        public ICollection<CalendarInvitation> HasCalendarInvitations { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class PersonalAccessToken
    {
        public object Created { get; set; }
        public string Id { get; set; }
        public object LastExchanged { get; set; }
        public string Name { get; set; }
        public ICollection<Permission> Permissions { get; set; }
        public object Updated { get; set; }
        public string UserId { get; set; }
    }

    public class PersonalAccessTokenCreateResponse
    {
        public PersonalAccessToken Pat { get; set; }
        public string Token { get; set; }
    }

    public class PersonalAccessTokenDeleteResponse
    {
        public string _ { get; set; }
    }

    public class PersonalAccessTokenFilter
    {
        public ICollection<PersonalAccessTokenFilter> And { get; set; }
        public IdFilterExpression Id { get; set; }
        public StringFilterExpression Name { get; set; }
        public ICollection<PersonalAccessTokenFilter> Not { get; set; }
        public ICollection<PersonalAccessTokenFilter> Or { get; set; }
        public PermissionFilterExpression Permissions { get; set; }
        public IdFilterExpression UserId { get; set; }
    }

    public class PersonalAccessTokenUpdateResponse
    {
        public PersonalAccessToken Pat { get; set; }
        public string Token { get; set; }
    }

    public interface IPlace
    {
        ICollection<CalendarEvent> CalendarEvents { get; set; }
        ICollection<Connector> Connectors { get; set; }
        string ExactType { get; set; }
        object Geoshape { get; set; }
        Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        ICollection<IPlace> HasPart { get; set; }
        ICollection<Point> HasPoint { get; set; }
        string Id { get; set; }
        ICollection<Thing> IsFedBy { get; set; }
        ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        ICollection<IPlace> IsPartOf { get; set; }
        string Name { get; set; }
        ICollection<Thing> Things { get; set; }
        ICollection<string> Type { get; set; }
    }

    public class Point
    {
        public ICollection<TimeseriesAggregateRow> Aggregation { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public string Id { get; set; }
        public ICollection<IsPointOfUnion> IsPointOf { get; set; }
        public string MappingKey { get; set; }
        public string Name { get; set; }
        public ICollection<TimeseriesRow> Series { get; set; }
        public ICollection<string> StateTexts { get; set; }
        public ICollection<string> Type { get; set; }
        public Unit Unit { get; set; }
    }

    public class ProductBundleResponse
    {
        public string Description { get; set; }
        public Interval? Interval { get; set; }
        public ICollection<ProductPriceItemResponse> Items { get; set; }
        public ICollection<MetadataEntry> Metadata { get; set; }
        public ProductType? ProductType { get; set; }
        public string Sku { get; set; }
        public string Slug { get; set; }
        public string Title { get; set; }
    }

    public class ProductPriceItemResponse
    {
        public string LookupKey { get; set; }
        public ICollection<MetadataEntry> Metadata { get; set; }
        public OneTimePriceItems OneTimePriceItems { get; set; }
        public string PriceId { get; set; }
        public bool? QuantityEnabled { get; set; }
        public QuantityRange QuantityRange { get; set; }
        public string Slug { get; set; }
        public ICollection<Tier> Tiers { get; set; }
        public string TiersMode { get; set; }
        public PriceType? Type { get; set; }
        public int? UnitAmount { get; set; }
        public string UnitAmountDecimal { get; set; }
    }

    public class QuantityRange
    {
        public int? Max { get; set; }
        public int? Min { get; set; }
    }

    public class Query
    {
        public ICollection<ConnectorType> AvailableConnectorTypes { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ConnectorAuth ConnectorAuth { get; set; }
        public ICollection<ConnectorType> ConnectorTypes { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public Gateway Gateway { get; set; }
        public ICollection<Gateway> Gateways { get; set; }
        public Grant Grant { get; set; }
        public ICollection<Grant> Grants { get; set; }
        public Invite Invite { get; set; }
        public ICollection<Invite> Invites { get; set; }
        public User Me { get; set; }
        public Org Organization { get; set; }
        public ICollection<Person> People { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<BillingProductBundleSubscriptionResponse> ProductBundleSubscriptions { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<PersonalAccessToken> Tokens { get; set; }
        public ICollection<Unit> Units { get; set; }
        public ICollection<User> Users { get; set; }
        public WebhookTarget WebhookTarget { get; set; }
        public ICollection<WebhookTarget> WebhookTargets { get; set; }
    }

    public class RegexMatch
    {
        public ValueLocation Location { get; set; }
        public string Regex { get; set; }
    }

    public class SignatureMatch
    {
        public Cert AsymmetricKey { get; set; }
        public ValueLocation Location { get; set; }
        public string SymmetricKey { get; set; }
        public SignatureType? Type { get; set; }
    }

    [GraphQlObjectType("Site")]
    public class Site : IPlace, IThingContainer
    {
        public ICollection<Building> Buildings { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class SiteCreateResponse
    {
        public SiteMutation Site { get; set; }
    }

    public class SiteDeleteResponse
    {
        public string _ { get; set; }
    }

    public class SiteMutation
    {
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class SiteUpdateResponse
    {
        public SiteMutation Site { get; set; }
    }

    [GraphQlObjectType("Space")]
    public class Space : IPlace, IThingContainer
    {
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public Floor Floor { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public Guid? ParentSpaceId { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public class SpaceCreateResponse
    {
        public SpaceMutation Space { get; set; }
    }

    public class SpaceDeleteResponse
    {
        public string _ { get; set; }
    }

    public class SpaceMutation
    {
        public ICollection<string> ExactType { get; set; }
        public string FloorId { get; set; }
        public object Geoshape { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string ParentSpaceId { get; set; }
    }

    public class SpaceUpdateResponse
    {
        public SpaceMutation Space { get; set; }
    }

    public class StringArrayFilterExpression
    {
        public string Eq { get; set; }
        public ICollection<string> In { get; set; }
    }

    public class StringFilterExpression
    {
        public string Contains { get; set; }
        public string Eq { get; set; }
        public ICollection<string> In { get; set; }
    }

    public class SystemTypeFilterExpression
    {
        public SystemTypeKey? Eq { get; set; }
        public ICollection<SystemTypeKey> In { get; set; }
    }

    public class Thing
    {
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public string FirmwareVersion { get; set; }
        public object Geoshape { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public ICollection<Thing> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsPartOf { get; set; }
        public string MappingKey { get; set; }
        public DeviceModel Model { get; set; }
        public string Name { get; set; }
        public Org Organization { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<string> Type { get; set; }
    }

    public interface IThingContainer
    {
        ICollection<Thing> Things { get; set; }
    }

    public class ThingFeed
    {
        public Address Address { get; set; }
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public ICollection<Floor> Floors { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Point> Points { get; set; }
        public ICollection<Site> Sites { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
        public Building Building { get; set; }
        public int? Level { get; set; }
        public ICollection<Space> Spaces { get; set; }
        public ICollection<Zone> Zones { get; set; }
        public ICollection<Building> Buildings { get; set; }
        public Org Organization { get; set; }
        public Floor Floor { get; set; }
        public Guid? ParentSpaceId { get; set; }
        public ICollection<FeedsUnion> Feeds { get; set; }
        public string FirmwareVersion { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public IPlace HasLocation { get; set; }
        public string MappingKey { get; set; }
        public DeviceModel Model { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> Places { get; set; }
    }

    public class Tier
    {
        public int? FlatAmount { get; set; }
        public string FlatAmountDecimal { get; set; }
        public int? UnitAmount { get; set; }
        public string UnitAmountDecimal { get; set; }
        public int? UpTo { get; set; }
    }

    public class TimeseriesAggregateRow
    {
        public decimal? Avg { get; set; }
        public int? Count { get; set; }
        public decimal? Max { get; set; }
        public decimal? Min { get; set; }
        public decimal? Sum { get; set; }
        public DateTimeOffset? Timestamp { get; set; }
    }

    public class TimeseriesRow
    {
        public DateTimeOffset? Timestamp { get; set; }
        public TimeseriesRowValue Value { get; set; }
    }

    public class TimeseriesRowValue
    {
        public bool? BoolValue { get; set; }
        public string ByteArrayValue { get; set; }
        public decimal? Float32Value { get; set; }
        public decimal? Float64Value { get; set; }
        public GeoPoint GeopointValue { get; set; }
        public int? Int32Value { get; set; }
        public int? Int64Value { get; set; }
        public string StringValue { get; set; }
        public int? Uint32Value { get; set; }
        public int? Uint64Value { get; set; }
    }

    public class TimestampFilterExpression
    {
        public object Eq { get; set; }
        public object Gt { get; set; }
        public object Gte { get; set; }
        public object Lt { get; set; }
        public object Lte { get; set; }
    }

    public class Unit
    {
        public string Description { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class UnitFilter
    {
        public IdFilterExpression Id { get; set; }
    }

    public class User
    {
        public object Created { get; set; }
        public string Email { get; set; }
        public bool? EmailVerified { get; set; }
        public string Id { get; set; }
        public string LastUpdatedBy { get; set; }
        public string Name { get; set; }
        public string Nickname { get; set; }
        public Org Organization { get; set; }
        public ICollection<Role> Roles { get; set; }
        public ICollection<PersonalAccessToken> Tokens { get; set; }
        public object Updated { get; set; }
    }

    public class UserAssignRoleResponse
    {
        public User User { get; set; }
    }

    public class UserCreateResponse
    {
        public User User { get; set; }
    }

    public class UserDeleteResponse
    {
        public string _ { get; set; }
    }

    public class UserFilter
    {
        public StringFilterExpression Email { get; set; }
        public StringFilterExpression Name { get; set; }
        public IdFilterExpression UserId { get; set; }
    }

    public class UserGetOrgMembershipsResponse
    {
        public ICollection<string> OrgIds { get; set; }
    }

    public class UserRemoveOrgMembershipResponse
    {
        public string _ { get; set; }
    }

    public class UserRemoveRoleResponse
    {
        public User User { get; set; }
    }

    public class UserUpdateResponse
    {
        public User User { get; set; }
    }

    public class ValueLocation
    {
        public EncodingType? Encoding { get; set; }
        public BodyValueLocation Form { get; set; }
        public string Header { get; set; }
        public BodyValueLocation Json { get; set; }
        public bool? MappedDefault { get; set; }
        public string QueryParameter { get; set; }
    }

    public class ValueMatch
    {
        public ValueLocation Location { get; set; }
        public string Value { get; set; }
    }

    public class WebhookTarget
    {
        public WebhookTargetAmqpTarget AmqpTarget { get; set; }
        public Auth Auth { get; set; }
        public object Created { get; set; }
        public bool? Durable { get; set; }
        public WebhookTargetCloudEventFilter EventFilters { get; set; }
        public WebhookTargetHttpTarget HttpTarget { get; set; }
        public string Id { get; set; }
        public ICollection<string> JsonPathExpressions { get; set; }
        public WebhookTargetKafkaTarget KafkaTarget { get; set; }
        public int? MaxRetry { get; set; }
        public WebhookTargetMqttTarget MqttTarget { get; set; }
        public string Name { get; set; }
        public WebhookTargetNatsTarget NatsTarget { get; set; }
        public Org Organization { get; set; }
        public WebhookTargetTargetType? TargetType { get; set; }
        public object Updated { get; set; }
        public User User { get; set; }
        public WebhookTargetWsTarget WsTarget { get; set; }
    }

    public class WebhookTargetAmqpTarget
    {
        public string TargetUri { get; set; }
    }

    public class WebhookTargetApiKey
    {
        public string ApiKey { get; set; }
        public string KeyName { get; set; }
        public string PassedAs { get; set; }
    }

    public class WebhookTargetBasicAuth
    {
        public string Password { get; set; }
        public string Username { get; set; }
    }

    public class WebhookTargetCloudEventFilter
    {
        public ICollection<WebhookTargetCloudEventFilter> And { get; set; }
        public ICollection<WebhookTargetCloudEventFilter> Not { get; set; }
        public ICollection<WebhookTargetCloudEventFilter> Or { get; set; }
        public ICollection<string> Sources { get; set; }
        public ICollection<string> Types { get; set; }
    }

    public class WebhookTargetCreateResponse
    {
        public WebhookTarget Target { get; set; }
    }

    public class WebhookTargetDeleteResponse
    {
        public string _ { get; set; }
    }

    public class WebhookTargetFilter
    {
        public ICollection<WebhookTargetFilter> And { get; set; }
        public StringFilterExpression Name { get; set; }
        public ICollection<WebhookTargetFilter> Not { get; set; }
        public ICollection<WebhookTargetFilter> Or { get; set; }
        public IdFilterExpression TargetId { get; set; }
        public IdFilterExpression UserId { get; set; }
    }

    public class WebhookTargetHttpTarget
    {
        public WebhookTargetApiKey ApiKey { get; set; }
        public WebhookTargetBasicAuth BasicAuth { get; set; }
        public HttpMethod? Method { get; set; }
        public WebhookTargetNoAuth NoAuth { get; set; }
        public WebhookTargetOAuth2ClientCredentialsFlow Oauth2ClientCredentialsFlow { get; set; }
        public string TargetUri { get; set; }
    }

    public class WebhookTargetKafkaTarget
    {
        public string TargetBroker { get; set; }
    }

    public class WebhookTargetMqttTarget
    {
        public string TargetUri { get; set; }
    }

    public class WebhookTargetNatsTarget
    {
        public string TargetUri { get; set; }
    }

    public class WebhookTargetNoAuth
    {
        public string _ { get; set; }
    }

    public class WebhookTargetOAuth2ClientCredentialsFlow
    {
        public string ClientId { get; set; }
        public string ClientSecret { get; set; }
        public string HeaderPrefix { get; set; }
        public string Scope { get; set; }
        public string TokenEndpoint { get; set; }
    }

    public class WebhookTargetUpdateResponse
    {
        public WebhookTarget Target { get; set; }
    }

    public class WebhookTargetWsTarget
    {
        public string TargetUri { get; set; }
    }

    [GraphQlObjectType("Zone")]
    public class Zone : IPlace, IThingContainer
    {
        public ICollection<CalendarEvent> CalendarEvents { get; set; }
        public ICollection<Connector> Connectors { get; set; }
        public string Description { get; set; }
        public string ExactType { get; set; }
        public object Geoshape { get; set; }
        public Address HasAddress { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> HasPart { get; set; }
        public ICollection<Point> HasPoint { get; set; }
        public string Id { get; set; }
        public ICollection<Thing> IsFedBy { get; set; }
        public ICollection<Thing> IsLocationOf { get; set; }
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
#endif
        public ICollection<IPlace> IsPartOf { get; set; }
        public string Name { get; set; }
        public ICollection<Thing> Things { get; set; }
        public ICollection<string> Type { get; set; }
    }
    #endregion
}
